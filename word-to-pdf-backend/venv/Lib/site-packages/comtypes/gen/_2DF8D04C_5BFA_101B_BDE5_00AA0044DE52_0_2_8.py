# -*- coding: mbcs -*-

from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import (
    _check_version, BSTR, CoClass, COMMETHOD, dispid, DISPMETHOD,
    GUID, helpstring, IUnknown
)
from comtypes.automation import _midlSAFEARRAY, IDispatch, VARIANT
from ctypes import HRESULT
from ctypes.wintypes import VARIANT_BOOL
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from comtypes import hints


_lcid = 0  # change this if required
typelib_path = 'C:\\Program Files\\Microsoft Office\\Root\\VFS\\ProgramFilesCommonX64\\Microsoft Shared\\OFFICE16\\MSO.DLL'
MsoRGBType = c_int

# values for enumeration 'MsoTextEffectAlignment'
msoTextEffectAlignmentMixed = -2
msoTextEffectAlignmentLeft = 1
msoTextEffectAlignmentCentered = 2
msoTextEffectAlignmentRight = 3
msoTextEffectAlignmentLetterJustify = 4
msoTextEffectAlignmentWordJustify = 5
msoTextEffectAlignmentStretchJustify = 6
MsoTextEffectAlignment = c_int  # enum

# values for enumeration 'MsoPictureColorType'
msoPictureMixed = -2
msoPictureAutomatic = 1
msoPictureGrayscale = 2
msoPictureBlackAndWhite = 3
msoPictureWatermark = 4
MsoPictureColorType = c_int  # enum

# values for enumeration 'MsoTriState'
msoTrue = -1
msoFalse = 0
msoCTrue = 1
msoTriStateToggle = -3
msoTriStateMixed = -2
MsoTriState = c_int  # enum

# values for enumeration 'MsoBroadcastCapabilities'
BroadcastCapFileSizeLimited = 1
BroadcastCapSupportsMeetingNotes = 2
BroadcastCapSupportsUpdateDoc = 4
MsoBroadcastCapabilities = c_int  # enum

# values for enumeration 'MsoPictureCompress'
msoPictureCompressDocDefault = -1
msoPictureCompressFalse = 0
msoPictureCompressTrue = 1
MsoPictureCompress = c_int  # enum

# values for enumeration 'MsoHyperlinkType'
msoHyperlinkRange = 0
msoHyperlinkShape = 1
msoHyperlinkInlineShape = 2
MsoHyperlinkType = c_int  # enum

# values for enumeration 'MsoDocInspectorStatus'
msoDocInspectorStatusDocOk = 0
msoDocInspectorStatusIssueFound = 1
msoDocInspectorStatusError = 2
MsoDocInspectorStatus = c_int  # enum

# values for enumeration 'XlChartElementPosition'
xlChartElementPositionAutomatic = -4105
xlChartElementPositionCustom = -4114
XlChartElementPosition = c_int  # enum

# values for enumeration 'MsoExtraInfoMethod'
msoMethodGet = 0
msoMethodPost = 1
MsoExtraInfoMethod = c_int  # enum

# values for enumeration 'MsoFileFindListBy'
msoListbyName = 1
msoListbyTitle = 2
MsoFileFindListBy = c_int  # enum

# values for enumeration 'MsoGraphicStyleIndex'
msoGraphicStyleMixed = -2
msoGraphicStyleNotAPreset = 0
msoGraphicStylePreset1 = 1
msoGraphicStylePreset2 = 2
msoGraphicStylePreset3 = 3
msoGraphicStylePreset4 = 4
msoGraphicStylePreset5 = 5
msoGraphicStylePreset6 = 6
msoGraphicStylePreset7 = 7
msoGraphicStylePreset8 = 8
msoGraphicStylePreset9 = 9
msoGraphicStylePreset10 = 10
msoGraphicStylePreset11 = 11
msoGraphicStylePreset12 = 12
msoGraphicStylePreset13 = 13
msoGraphicStylePreset14 = 14
msoGraphicStylePreset15 = 15
msoGraphicStylePreset16 = 16
msoGraphicStylePreset17 = 17
msoGraphicStylePreset18 = 18
msoGraphicStylePreset19 = 19
msoGraphicStylePreset20 = 20
msoGraphicStylePreset21 = 21
msoGraphicStylePreset22 = 22
msoGraphicStylePreset23 = 23
msoGraphicStylePreset24 = 24
msoGraphicStylePreset25 = 25
msoGraphicStylePreset26 = 26
msoGraphicStylePreset27 = 27
msoGraphicStylePreset28 = 28
MsoGraphicStyleIndex = c_int  # enum

# values for enumeration 'MsoScriptLanguage'
msoScriptLanguageJava = 1
msoScriptLanguageVisualBasic = 2
msoScriptLanguageASP = 3
msoScriptLanguageOther = 4
MsoScriptLanguage = c_int  # enum

# values for enumeration 'MsoScriptLocation'
msoScriptLocationInHead = 1
msoScriptLocationInBody = 2
MsoScriptLocation = c_int  # enum

# values for enumeration 'MsoPresetLightingDirection'
msoPresetLightingDirectionMixed = -2
msoLightingTopLeft = 1
msoLightingTop = 2
msoLightingTopRight = 3
msoLightingLeft = 4
msoLightingNone = 5
msoLightingRight = 6
msoLightingBottomLeft = 7
msoLightingBottom = 8
msoLightingBottomRight = 9
MsoPresetLightingDirection = c_int  # enum

# values for enumeration 'MsoAnimationType'
msoAnimationIdle = 1
msoAnimationGreeting = 2
msoAnimationGoodbye = 3
msoAnimationBeginSpeaking = 4
msoAnimationRestPose = 5
msoAnimationCharacterSuccessMajor = 6
msoAnimationGetAttentionMajor = 11
msoAnimationGetAttentionMinor = 12
msoAnimationSearching = 13
msoAnimationPrinting = 18
msoAnimationGestureRight = 19
msoAnimationWritingNotingSomething = 22
msoAnimationWorkingAtSomething = 23
msoAnimationThinking = 24
msoAnimationSendingMail = 25
msoAnimationListensToComputer = 26
msoAnimationDisappear = 31
msoAnimationAppear = 32
msoAnimationGetArtsy = 100
msoAnimationGetTechy = 101
msoAnimationGetWizardy = 102
msoAnimationCheckingSomething = 103
msoAnimationLookDown = 104
msoAnimationLookDownLeft = 105
msoAnimationLookDownRight = 106
msoAnimationLookLeft = 107
msoAnimationLookRight = 108
msoAnimationLookUp = 109
msoAnimationLookUpLeft = 110
msoAnimationLookUpRight = 111
msoAnimationSaving = 112
msoAnimationGestureDown = 113
msoAnimationGestureLeft = 114
msoAnimationGestureUp = 115
msoAnimationEmptyTrash = 116
MsoAnimationType = c_int  # enum

# values for enumeration 'MsoFlipCmd'
msoFlipHorizontal = 0
msoFlipVertical = 1
MsoFlipCmd = c_int  # enum

# values for enumeration 'MsoCalloutType'
msoCalloutMixed = -2
msoCalloutOne = 1
msoCalloutTwo = 2
msoCalloutThree = 3
msoCalloutFour = 4
MsoCalloutType = c_int  # enum

# values for enumeration 'MsoConnectorType'
msoConnectorTypeMixed = -2
msoConnectorStraight = 1
msoConnectorElbow = 2
msoConnectorCurve = 3
MsoConnectorType = c_int  # enum

# values for enumeration 'MsoTextOrientation'
msoTextOrientationMixed = -2
msoTextOrientationHorizontal = 1
msoTextOrientationUpward = 2
msoTextOrientationDownward = 3
msoTextOrientationVerticalFarEast = 4
msoTextOrientationVertical = 5
msoTextOrientationHorizontalRotatedFarEast = 6
MsoTextOrientation = c_int  # enum

# values for enumeration 'MsoAutoShapeType'
msoShapeMixed = -2
msoShapeRectangle = 1
msoShapeParallelogram = 2
msoShapeTrapezoid = 3
msoShapeDiamond = 4
msoShapeRoundedRectangle = 5
msoShapeOctagon = 6
msoShapeIsoscelesTriangle = 7
msoShapeRightTriangle = 8
msoShapeOval = 9
msoShapeHexagon = 10
msoShapeCross = 11
msoShapeRegularPentagon = 12
msoShapeCan = 13
msoShapeCube = 14
msoShapeBevel = 15
msoShapeFoldedCorner = 16
msoShapeSmileyFace = 17
msoShapeDonut = 18
msoShapeNoSymbol = 19
msoShapeBlockArc = 20
msoShapeHeart = 21
msoShapeLightningBolt = 22
msoShapeSun = 23
msoShapeMoon = 24
msoShapeArc = 25
msoShapeDoubleBracket = 26
msoShapeDoubleBrace = 27
msoShapePlaque = 28
msoShapeLeftBracket = 29
msoShapeRightBracket = 30
msoShapeLeftBrace = 31
msoShapeRightBrace = 32
msoShapeRightArrow = 33
msoShapeLeftArrow = 34
msoShapeUpArrow = 35
msoShapeDownArrow = 36
msoShapeLeftRightArrow = 37
msoShapeUpDownArrow = 38
msoShapeQuadArrow = 39
msoShapeLeftRightUpArrow = 40
msoShapeBentArrow = 41
msoShapeUTurnArrow = 42
msoShapeLeftUpArrow = 43
msoShapeBentUpArrow = 44
msoShapeCurvedRightArrow = 45
msoShapeCurvedLeftArrow = 46
msoShapeCurvedUpArrow = 47
msoShapeCurvedDownArrow = 48
msoShapeStripedRightArrow = 49
msoShapeNotchedRightArrow = 50
msoShapePentagon = 51
msoShapeChevron = 52
msoShapeRightArrowCallout = 53
msoShapeLeftArrowCallout = 54
msoShapeUpArrowCallout = 55
msoShapeDownArrowCallout = 56
msoShapeLeftRightArrowCallout = 57
msoShapeUpDownArrowCallout = 58
msoShapeQuadArrowCallout = 59
msoShapeCircularArrow = 60
msoShapeFlowchartProcess = 61
msoShapeFlowchartAlternateProcess = 62
msoShapeFlowchartDecision = 63
msoShapeFlowchartData = 64
msoShapeFlowchartPredefinedProcess = 65
msoShapeFlowchartInternalStorage = 66
msoShapeFlowchartDocument = 67
msoShapeFlowchartMultidocument = 68
msoShapeFlowchartTerminator = 69
msoShapeFlowchartPreparation = 70
msoShapeFlowchartManualInput = 71
msoShapeFlowchartManualOperation = 72
msoShapeFlowchartConnector = 73
msoShapeFlowchartOffpageConnector = 74
msoShapeFlowchartCard = 75
msoShapeFlowchartPunchedTape = 76
msoShapeFlowchartSummingJunction = 77
msoShapeFlowchartOr = 78
msoShapeFlowchartCollate = 79
msoShapeFlowchartSort = 80
msoShapeFlowchartExtract = 81
msoShapeFlowchartMerge = 82
msoShapeFlowchartStoredData = 83
msoShapeFlowchartDelay = 84
msoShapeFlowchartSequentialAccessStorage = 85
msoShapeFlowchartMagneticDisk = 86
msoShapeFlowchartDirectAccessStorage = 87
msoShapeFlowchartDisplay = 88
msoShapeExplosion1 = 89
msoShapeExplosion2 = 90
msoShape4pointStar = 91
msoShape5pointStar = 92
msoShape8pointStar = 93
msoShape16pointStar = 94
msoShape24pointStar = 95
msoShape32pointStar = 96
msoShapeUpRibbon = 97
msoShapeDownRibbon = 98
msoShapeCurvedUpRibbon = 99
msoShapeCurvedDownRibbon = 100
msoShapeVerticalScroll = 101
msoShapeHorizontalScroll = 102
msoShapeWave = 103
msoShapeDoubleWave = 104
msoShapeRectangularCallout = 105
msoShapeRoundedRectangularCallout = 106
msoShapeOvalCallout = 107
msoShapeCloudCallout = 108
msoShapeLineCallout1 = 109
msoShapeLineCallout2 = 110
msoShapeLineCallout3 = 111
msoShapeLineCallout4 = 112
msoShapeLineCallout1AccentBar = 113
msoShapeLineCallout2AccentBar = 114
msoShapeLineCallout3AccentBar = 115
msoShapeLineCallout4AccentBar = 116
msoShapeLineCallout1NoBorder = 117
msoShapeLineCallout2NoBorder = 118
msoShapeLineCallout3NoBorder = 119
msoShapeLineCallout4NoBorder = 120
msoShapeLineCallout1BorderandAccentBar = 121
msoShapeLineCallout2BorderandAccentBar = 122
msoShapeLineCallout3BorderandAccentBar = 123
msoShapeLineCallout4BorderandAccentBar = 124
msoShapeActionButtonCustom = 125
msoShapeActionButtonHome = 126
msoShapeActionButtonHelp = 127
msoShapeActionButtonInformation = 128
msoShapeActionButtonBackorPrevious = 129
msoShapeActionButtonForwardorNext = 130
msoShapeActionButtonBeginning = 131
msoShapeActionButtonEnd = 132
msoShapeActionButtonReturn = 133
msoShapeActionButtonDocument = 134
msoShapeActionButtonSound = 135
msoShapeActionButtonMovie = 136
msoShapeBalloon = 137
msoShapeNotPrimitive = 138
msoShapeFlowchartOfflineStorage = 139
msoShapeLeftRightRibbon = 140
msoShapeDiagonalStripe = 141
msoShapePie = 142
msoShapeNonIsoscelesTrapezoid = 143
msoShapeDecagon = 144
msoShapeHeptagon = 145
msoShapeDodecagon = 146
msoShape6pointStar = 147
msoShape7pointStar = 148
msoShape10pointStar = 149
msoShape12pointStar = 150
msoShapeRound1Rectangle = 151
msoShapeRound2SameRectangle = 152
msoShapeRound2DiagRectangle = 153
msoShapeSnipRoundRectangle = 154
msoShapeSnip1Rectangle = 155
msoShapeSnip2SameRectangle = 156
msoShapeSnip2DiagRectangle = 157
msoShapeFrame = 158
msoShapeHalfFrame = 159
msoShapeTear = 160
msoShapeChord = 161
msoShapeCorner = 162
msoShapeMathPlus = 163
msoShapeMathMinus = 164
msoShapeMathMultiply = 165
msoShapeMathDivide = 166
msoShapeMathEqual = 167
msoShapeMathNotEqual = 168
msoShapeCornerTabs = 169
msoShapeSquareTabs = 170
msoShapePlaqueTabs = 171
msoShapeGear6 = 172
msoShapeGear9 = 173
msoShapeFunnel = 174
msoShapePieWedge = 175
msoShapeLeftCircularArrow = 176
msoShapeLeftRightCircularArrow = 177
msoShapeSwooshArrow = 178
msoShapeCloud = 179
msoShapeChartX = 180
msoShapeChartStar = 181
msoShapeChartPlus = 182
msoShapeLineInverse = 183
MsoAutoShapeType = c_int  # enum

# values for enumeration 'MsoPresetTextEffect'
msoTextEffectMixed = -2
msoTextEffect1 = 0
msoTextEffect2 = 1
msoTextEffect3 = 2
msoTextEffect4 = 3
msoTextEffect5 = 4
msoTextEffect6 = 5
msoTextEffect7 = 6
msoTextEffect8 = 7
msoTextEffect9 = 8
msoTextEffect10 = 9
msoTextEffect11 = 10
msoTextEffect12 = 11
msoTextEffect13 = 12
msoTextEffect14 = 13
msoTextEffect15 = 14
msoTextEffect16 = 15
msoTextEffect17 = 16
msoTextEffect18 = 17
msoTextEffect19 = 18
msoTextEffect20 = 19
msoTextEffect21 = 20
msoTextEffect22 = 21
msoTextEffect23 = 22
msoTextEffect24 = 23
msoTextEffect25 = 24
msoTextEffect26 = 25
msoTextEffect27 = 26
msoTextEffect28 = 27
msoTextEffect29 = 28
msoTextEffect30 = 29
msoTextEffect31 = 30
msoTextEffect32 = 31
msoTextEffect33 = 32
msoTextEffect34 = 33
msoTextEffect35 = 34
msoTextEffect36 = 35
msoTextEffect37 = 36
msoTextEffect38 = 37
msoTextEffect39 = 38
msoTextEffect40 = 39
msoTextEffect41 = 40
msoTextEffect42 = 41
msoTextEffect43 = 42
msoTextEffect44 = 43
msoTextEffect45 = 44
msoTextEffect46 = 45
msoTextEffect47 = 46
msoTextEffect48 = 47
msoTextEffect49 = 48
msoTextEffect50 = 49
MsoPresetTextEffect = c_int  # enum

# values for enumeration 'MsoEditingType'
msoEditingAuto = 0
msoEditingCorner = 1
msoEditingSmooth = 2
msoEditingSymmetric = 3
MsoEditingType = c_int  # enum

# values for enumeration 'MsoCondition'
msoConditionFileTypeAllFiles = 1
msoConditionFileTypeOfficeFiles = 2
msoConditionFileTypeWordDocuments = 3
msoConditionFileTypeExcelWorkbooks = 4
msoConditionFileTypePowerPointPresentations = 5
msoConditionFileTypeBinders = 6
msoConditionFileTypeDatabases = 7
msoConditionFileTypeTemplates = 8
msoConditionIncludes = 9
msoConditionIncludesPhrase = 10
msoConditionBeginsWith = 11
msoConditionEndsWith = 12
msoConditionIncludesNearEachOther = 13
msoConditionIsExactly = 14
msoConditionIsNot = 15
msoConditionYesterday = 16
msoConditionToday = 17
msoConditionTomorrow = 18
msoConditionLastWeek = 19
msoConditionThisWeek = 20
msoConditionNextWeek = 21
msoConditionLastMonth = 22
msoConditionThisMonth = 23
msoConditionNextMonth = 24
msoConditionAnytime = 25
msoConditionAnytimeBetween = 26
msoConditionOn = 27
msoConditionOnOrAfter = 28
msoConditionOnOrBefore = 29
msoConditionInTheNext = 30
msoConditionInTheLast = 31
msoConditionEquals = 32
msoConditionDoesNotEqual = 33
msoConditionAnyNumberBetween = 34
msoConditionAtMost = 35
msoConditionAtLeast = 36
msoConditionMoreThan = 37
msoConditionLessThan = 38
msoConditionIsYes = 39
msoConditionIsNo = 40
msoConditionIncludesFormsOf = 41
msoConditionFreeText = 42
msoConditionFileTypeOutlookItems = 43
msoConditionFileTypeMailItem = 44
msoConditionFileTypeCalendarItem = 45
msoConditionFileTypeContactItem = 46
msoConditionFileTypeNoteItem = 47
msoConditionFileTypeJournalItem = 48
msoConditionFileTypeTaskItem = 49
msoConditionFileTypePhotoDrawFiles = 50
msoConditionFileTypeDataConnectionFiles = 51
msoConditionFileTypePublisherFiles = 52
msoConditionFileTypeProjectFiles = 53
msoConditionFileTypeDocumentImagingFiles = 54
msoConditionFileTypeVisioFiles = 55
msoConditionFileTypeDesignerFiles = 56
msoConditionFileTypeWebPages = 57
msoConditionEqualsLow = 58
msoConditionEqualsNormal = 59
msoConditionEqualsHigh = 60
msoConditionNotEqualToLow = 61
msoConditionNotEqualToNormal = 62
msoConditionNotEqualToHigh = 63
msoConditionEqualsNotStarted = 64
msoConditionEqualsInProgress = 65
msoConditionEqualsCompleted = 66
msoConditionEqualsWaitingForSomeoneElse = 67
msoConditionEqualsDeferred = 68
msoConditionNotEqualToNotStarted = 69
msoConditionNotEqualToInProgress = 70
msoConditionNotEqualToCompleted = 71
msoConditionNotEqualToWaitingForSomeoneElse = 72
msoConditionNotEqualToDeferred = 73
MsoCondition = c_int  # enum

# values for enumeration 'MsoConnector'
msoConnectorAnd = 1
msoConnectorOr = 2
MsoConnector = c_int  # enum

# values for enumeration 'MsoFileType'
msoFileTypeAllFiles = 1
msoFileTypeOfficeFiles = 2
msoFileTypeWordDocuments = 3
msoFileTypeExcelWorkbooks = 4
msoFileTypePowerPointPresentations = 5
msoFileTypeBinders = 6
msoFileTypeDatabases = 7
msoFileTypeTemplates = 8
msoFileTypeOutlookItems = 9
msoFileTypeMailItem = 10
msoFileTypeCalendarItem = 11
msoFileTypeContactItem = 12
msoFileTypeNoteItem = 13
msoFileTypeJournalItem = 14
msoFileTypeTaskItem = 15
msoFileTypePhotoDrawFiles = 16
msoFileTypeDataConnectionFiles = 17
msoFileTypePublisherFiles = 18
msoFileTypeProjectFiles = 19
msoFileTypeDocumentImagingFiles = 20
msoFileTypeVisioFiles = 21
msoFileTypeDesignerFiles = 22
msoFileTypeWebPages = 23
MsoFileType = c_int  # enum

# values for enumeration 'MsoSortBy'
msoSortByFileName = 1
msoSortBySize = 2
msoSortByFileType = 3
msoSortByLastModified = 4
msoSortByNone = 5
MsoSortBy = c_int  # enum

# values for enumeration 'XlGradientStopPositionType'
xlGradientStopPositionTypeExtremeValue = 0
xlGradientStopPositionTypeNumber = 1
xlGradientStopPositionTypePercent = 2
XlGradientStopPositionType = c_int  # enum

# values for enumeration 'MsoBlogImageType'
msoblogImageTypeJPEG = 1
msoblogImageTypeGIF = 2
msoblogImageTypePNG = 3
MsoBlogImageType = c_int  # enum

# values for enumeration 'MsoBlogCategorySupport'
msoBlogNoCategories = 0
msoBlogOneCategory = 1
msoBlogMultipleCategories = 2
MsoBlogCategorySupport = c_int  # enum

# values for enumeration 'MsoPresetLightingSoftness'
msoPresetLightingSoftnessMixed = -2
msoLightingDim = 1
msoLightingNormal = 2
msoLightingBright = 3
MsoPresetLightingSoftness = c_int  # enum

# values for enumeration 'MsoColorType'
msoColorTypeMixed = -2
msoColorTypeRGB = 1
msoColorTypeScheme = 2
msoColorTypeCMYK = 3
msoColorTypeCMS = 4
msoColorTypeInk = 5
MsoColorType = c_int  # enum

# values for enumeration 'MsoControlOLEUsage'
msoControlOLEUsageNeither = 0
msoControlOLEUsageServer = 1
msoControlOLEUsageClient = 2
msoControlOLEUsageBoth = 3
MsoControlOLEUsage = c_int  # enum

# values for enumeration 'MsoControlType'
msoControlCustom = 0
msoControlButton = 1
msoControlEdit = 2
msoControlDropdown = 3
msoControlComboBox = 4
msoControlButtonDropdown = 5
msoControlSplitDropdown = 6
msoControlOCXDropdown = 7
msoControlGenericDropdown = 8
msoControlGraphicDropdown = 9
msoControlPopup = 10
msoControlGraphicPopup = 11
msoControlButtonPopup = 12
msoControlSplitButtonPopup = 13
msoControlSplitButtonMRUPopup = 14
msoControlLabel = 15
msoControlExpandingGrid = 16
msoControlSplitExpandingGrid = 17
msoControlGrid = 18
msoControlGauge = 19
msoControlGraphicCombo = 20
msoControlPane = 21
msoControlActiveX = 22
msoControlSpinner = 23
msoControlLabelEx = 24
msoControlWorkPane = 25
msoControlAutoCompleteCombo = 26
MsoControlType = c_int  # enum

# values for enumeration 'MsoButtonState'
msoButtonUp = 0
msoButtonDown = -1
msoButtonMixed = 2
MsoButtonState = c_int  # enum

# values for enumeration 'MsoButtonStyle'
msoButtonAutomatic = 0
msoButtonIcon = 1
msoButtonCaption = 2
msoButtonIconAndCaption = 3
msoButtonIconAndWrapCaption = 7
msoButtonIconAndCaptionBelow = 11
msoButtonWrapCaption = 14
msoButtonIconAndWrapCaptionBelow = 15
MsoButtonStyle = c_int  # enum

# values for enumeration 'MsoCommandBarButtonHyperlinkType'
msoCommandBarButtonHyperlinkNone = 0
msoCommandBarButtonHyperlinkOpen = 1
msoCommandBarButtonHyperlinkInsertPicture = 2
MsoCommandBarButtonHyperlinkType = c_int  # enum

# values for enumeration 'MsoPresetMaterial'
msoPresetMaterialMixed = -2
msoMaterialMatte = 1
msoMaterialPlastic = 2
msoMaterialMetal = 3
msoMaterialWireFrame = 4
msoMaterialMatte2 = 5
msoMaterialPlastic2 = 6
msoMaterialMetal2 = 7
msoMaterialWarmMatte = 8
msoMaterialTranslucentPowder = 9
msoMaterialPowder = 10
msoMaterialDarkEdge = 11
msoMaterialSoftEdge = 12
msoMaterialClear = 13
msoMaterialFlat = 14
msoMaterialSoftMetal = 15
MsoPresetMaterial = c_int  # enum

# values for enumeration 'MsoShadowType'
msoShadowMixed = -2
msoShadow1 = 1
msoShadow2 = 2
msoShadow3 = 3
msoShadow4 = 4
msoShadow5 = 5
msoShadow6 = 6
msoShadow7 = 7
msoShadow8 = 8
msoShadow9 = 9
msoShadow10 = 10
msoShadow11 = 11
msoShadow12 = 12
msoShadow13 = 13
msoShadow14 = 14
msoShadow15 = 15
msoShadow16 = 16
msoShadow17 = 17
msoShadow18 = 18
msoShadow19 = 19
msoShadow20 = 20
msoShadow21 = 21
msoShadow22 = 22
msoShadow23 = 23
msoShadow24 = 24
msoShadow25 = 25
msoShadow26 = 26
msoShadow27 = 27
msoShadow28 = 28
msoShadow29 = 29
msoShadow30 = 30
msoShadow31 = 31
msoShadow32 = 32
msoShadow33 = 33
msoShadow34 = 34
msoShadow35 = 35
msoShadow36 = 36
msoShadow37 = 37
msoShadow38 = 38
msoShadow39 = 39
msoShadow40 = 40
msoShadow41 = 41
msoShadow42 = 42
msoShadow43 = 43
MsoShadowType = c_int  # enum

# values for enumeration 'XlSizeRepresents'
xlSizeIsWidth = 2
xlSizeIsArea = 1
XlSizeRepresents = c_int  # enum

# values for enumeration 'MsoCalloutAngleType'
msoCalloutAngleMixed = -2
msoCalloutAngleAutomatic = 1
msoCalloutAngle30 = 2
msoCalloutAngle45 = 3
msoCalloutAngle60 = 4
msoCalloutAngle90 = 5
MsoCalloutAngleType = c_int  # enum

# values for enumeration 'MsoShadowStyle'
msoShadowStyleMixed = -2
msoShadowStyleInnerShadow = 1
msoShadowStyleOuterShadow = 2
MsoShadowStyle = c_int  # enum

# values for enumeration 'XlChartSplitType'
xlSplitByPosition = 1
xlSplitByPercentValue = 3
xlSplitByCustomSplit = 4
xlSplitByValue = 2
XlChartSplitType = c_int  # enum

# values for enumeration 'MsoCalloutDropType'
msoCalloutDropMixed = -2
msoCalloutDropCustom = 1
msoCalloutDropTop = 2
msoCalloutDropCenter = 3
msoCalloutDropBottom = 4
MsoCalloutDropType = c_int  # enum

# values for enumeration 'XlPieSliceLocation'
xlHorizontalCoordinate = 1
xlVerticalCoordinate = 2
XlPieSliceLocation = c_int  # enum

# values for enumeration 'MsoPictureType'
msoPictureTypeDefault = -2
msoPictureTypePNG = 0
msoPictureTypeBMP = 1
msoPictureTypeGIF = 2
msoPictureTypeJPG = 3
msoPictureTypePDF = 4
MsoPictureType = c_int  # enum

# values for enumeration 'MsoDiagramType'
msoDiagramMixed = -2
msoDiagramOrgChart = 1
msoDiagramCycle = 2
msoDiagramRadial = 3
msoDiagramPyramid = 4
msoDiagramVenn = 5
msoDiagramTarget = 6
MsoDiagramType = c_int  # enum

# values for enumeration 'XlPieSliceIndex'
xlOuterCounterClockwisePoint = 1
xlOuterCenterPoint = 2
xlOuterClockwisePoint = 3
xlMidClockwiseRadiusPoint = 4
xlCenterPoint = 5
xlMidCounterClockwiseRadiusPoint = 6
xlInnerClockwisePoint = 7
xlInnerCenterPoint = 8
xlInnerCounterClockwisePoint = 9
XlPieSliceIndex = c_int  # enum

# values for enumeration 'MsoPresetThreeDFormat'
msoPresetThreeDFormatMixed = -2
msoThreeD1 = 1
msoThreeD2 = 2
msoThreeD3 = 3
msoThreeD4 = 4
msoThreeD5 = 5
msoThreeD6 = 6
msoThreeD7 = 7
msoThreeD8 = 8
msoThreeD9 = 9
msoThreeD10 = 10
msoThreeD11 = 11
msoThreeD12 = 12
msoThreeD13 = 13
msoThreeD14 = 14
msoThreeD15 = 15
msoThreeD16 = 16
msoThreeD17 = 17
msoThreeD18 = 18
msoThreeD19 = 19
msoThreeD20 = 20
MsoPresetThreeDFormat = c_int  # enum

# values for enumeration 'MsoPresetExtrusionDirection'
msoPresetExtrusionDirectionMixed = -2
msoExtrusionBottomRight = 1
msoExtrusionBottom = 2
msoExtrusionBottomLeft = 3
msoExtrusionRight = 4
msoExtrusionNone = 5
msoExtrusionLeft = 6
msoExtrusionTopRight = 7
msoExtrusionTop = 8
msoExtrusionTopLeft = 9
MsoPresetExtrusionDirection = c_int  # enum

# values for enumeration 'MsoButtonSetType'
msoButtonSetNone = 0
msoButtonSetOK = 1
msoButtonSetCancel = 2
msoButtonSetOkCancel = 3
msoButtonSetYesNo = 4
msoButtonSetYesNoCancel = 5
msoButtonSetBackClose = 6
msoButtonSetNextClose = 7
msoButtonSetBackNextClose = 8
msoButtonSetRetryCancel = 9
msoButtonSetAbortRetryIgnore = 10
msoButtonSetSearchClose = 11
msoButtonSetBackNextSnooze = 12
msoButtonSetTipsOptionsClose = 13
msoButtonSetYesAllNoCancel = 14
MsoButtonSetType = c_int  # enum

# values for enumeration 'SignatureLineImage'
siglnimgSoftwareRequired = 0
siglnimgUnsigned = 1
siglnimgSignedValid = 2
siglnimgSignedInvalid = 3
siglnimgSigned = 4
SignatureLineImage = c_int  # enum

# values for enumeration 'ContentVerificationResults'
contverresError = 0
contverresVerifying = 1
contverresUnverified = 2
contverresValid = 3
contverresModified = 4
ContentVerificationResults = c_int  # enum

# values for enumeration 'CertificateVerificationResults'
certverresError = 0
certverresVerifying = 1
certverresUnverified = 2
certverresValid = 3
certverresInvalid = 4
certverresExpired = 5
certverresRevoked = 6
certverresUntrusted = 7
CertificateVerificationResults = c_int  # enum

# values for enumeration 'SignatureProviderDetail'
sigprovdetUrl = 0
sigprovdetHashAlgorithm = 1
sigprovdetUIOnly = 2
sigprovdetUseOfficeUI = 3
sigprovdetUseOfficeStampUI = 4
SignatureProviderDetail = c_int  # enum

# values for enumeration 'MsoTelemetryConsentLevel'
msoTelemetryConsentLevelUnset = 0
msoTelemetryConsentLevelBasic = 1
msoTelemetryConsentLevelFull = 2
msoTelemetryConsentLevelZero = 3
msoTelemetryConsentLevelDefault = 4
MsoTelemetryConsentLevel = c_int  # enum

# values for enumeration 'MsoTextDirection'
msoTextDirectionMixed = -2
msoTextDirectionLeftToRight = 1
msoTextDirectionRightToLeft = 2
MsoTextDirection = c_int  # enum

# values for enumeration 'MsoAlignCmd'
msoAlignLefts = 0
msoAlignCenters = 1
msoAlignRights = 2
msoAlignTops = 3
msoAlignMiddles = 4
msoAlignBottoms = 5
MsoAlignCmd = c_int  # enum

# values for enumeration 'MsoChartFieldType'
msoChartFieldBubbleSize = 1
msoChartFieldCategoryName = 2
msoChartFieldPercentage = 3
msoChartFieldSeriesName = 4
msoChartFieldValue = 5
msoChartFieldFormula = 6
msoChartFieldRange = 7
MsoChartFieldType = c_int  # enum

# values for enumeration 'MsoBlackWhiteMode'
msoBlackWhiteMixed = -2
msoBlackWhiteAutomatic = 1
msoBlackWhiteGrayScale = 2
msoBlackWhiteLightGrayScale = 3
msoBlackWhiteInverseGrayScale = 4
msoBlackWhiteGrayOutline = 5
msoBlackWhiteBlackTextAndLine = 6
msoBlackWhiteHighContrast = 7
msoBlackWhiteBlack = 8
msoBlackWhiteWhite = 9
msoBlackWhiteDontShow = 10
MsoBlackWhiteMode = c_int  # enum

# values for enumeration 'MsoRelativeNodePosition'
msoBeforeNode = 1
msoAfterNode = 2
msoBeforeFirstSibling = 3
msoAfterLastSibling = 4
MsoRelativeNodePosition = c_int  # enum

# values for enumeration 'MsoDiagramNodeType'
msoDiagramNode = 1
msoDiagramAssistant = 2
MsoDiagramNodeType = c_int  # enum

# values for enumeration 'MsoOrgChartLayoutType'
msoOrgChartLayoutMixed = -2
msoOrgChartLayoutStandard = 1
msoOrgChartLayoutBothHanging = 2
msoOrgChartLayoutLeftHanging = 3
msoOrgChartLayoutRightHanging = 4
msoOrgChartLayoutDefault = 5
MsoOrgChartLayoutType = c_int  # enum

# values for enumeration 'MsoSmartArtNodePosition'
msoSmartArtNodeDefault = 1
msoSmartArtNodeAfter = 2
msoSmartArtNodeBefore = 3
msoSmartArtNodeAbove = 4
msoSmartArtNodeBelow = 5
MsoSmartArtNodePosition = c_int  # enum

# values for enumeration 'MsoSmartArtNodeType'
msoSmartArtNodeTypeDefault = 1
msoSmartArtNodeTypeAssistant = 2
MsoSmartArtNodeType = c_int  # enum

# values for enumeration 'MsoTextRangeInsertPosition'
msoMsoTextRangeInsertBefore = 0
msoMsoTextRangeInsertAfter = 1
MsoTextRangeInsertPosition = c_int  # enum

# values for enumeration 'MsoParagraphAlignment'
msoAlignMixed = -2
msoAlignLeft = 1
msoAlignCenter = 2
msoAlignRight = 3
msoAlignJustify = 4
msoAlignDistribute = 5
msoAlignThaiDistribute = 6
msoAlignJustifyLow = 7
MsoParagraphAlignment = c_int  # enum

# values for enumeration 'MsoBaselineAlignment'
msoBaselineAlignMixed = -2
msoBaselineAlignBaseline = 1
msoBaselineAlignTop = 2
msoBaselineAlignCenter = 3
msoBaselineAlignFarEast50 = 4
msoBaselineAlignAuto = 5
MsoBaselineAlignment = c_int  # enum

# values for enumeration 'MsoPresetTextEffectShape'
msoTextEffectShapeMixed = -2
msoTextEffectShapePlainText = 1
msoTextEffectShapeStop = 2
msoTextEffectShapeTriangleUp = 3
msoTextEffectShapeTriangleDown = 4
msoTextEffectShapeChevronUp = 5
msoTextEffectShapeChevronDown = 6
msoTextEffectShapeRingInside = 7
msoTextEffectShapeRingOutside = 8
msoTextEffectShapeArchUpCurve = 9
msoTextEffectShapeArchDownCurve = 10
msoTextEffectShapeCircleCurve = 11
msoTextEffectShapeButtonCurve = 12
msoTextEffectShapeArchUpPour = 13
msoTextEffectShapeArchDownPour = 14
msoTextEffectShapeCirclePour = 15
msoTextEffectShapeButtonPour = 16
msoTextEffectShapeCurveUp = 17
msoTextEffectShapeCurveDown = 18
msoTextEffectShapeCanUp = 19
msoTextEffectShapeCanDown = 20
msoTextEffectShapeWave1 = 21
msoTextEffectShapeWave2 = 22
msoTextEffectShapeDoubleWave1 = 23
msoTextEffectShapeDoubleWave2 = 24
msoTextEffectShapeInflate = 25
msoTextEffectShapeDeflate = 26
msoTextEffectShapeInflateBottom = 27
msoTextEffectShapeDeflateBottom = 28
msoTextEffectShapeInflateTop = 29
msoTextEffectShapeDeflateTop = 30
msoTextEffectShapeDeflateInflate = 31
msoTextEffectShapeDeflateInflateDeflate = 32
msoTextEffectShapeFadeRight = 33
msoTextEffectShapeFadeLeft = 34
msoTextEffectShapeFadeUp = 35
msoTextEffectShapeFadeDown = 36
msoTextEffectShapeSlantUp = 37
msoTextEffectShapeSlantDown = 38
msoTextEffectShapeCascadeUp = 39
msoTextEffectShapeCascadeDown = 40
MsoPresetTextEffectShape = c_int  # enum

# values for enumeration 'MsoPrivacyOptionSetting'
msoUserContentEnabled = 0
msoDownloadContentEnabled = 1
msoControllerConnectedServicesEnabled = 2
msoDisconnectedState = 3
MsoPrivacyOptionSetting = c_int  # enum

# values for enumeration 'MsoAppLanguageID'
msoLanguageIDInstall = 1
msoLanguageIDUI = 2
msoLanguageIDHelp = 3
msoLanguageIDExeMode = 4
msoLanguageIDUIPrevious = 5
MsoAppLanguageID = c_int  # enum

# values for enumeration 'MsoLanguageID'
msoLanguageIDMixed = -2
msoLanguageIDNone = 0
msoLanguageIDNoProofing = 1024
msoLanguageIDAfrikaans = 1078
msoLanguageIDAlbanian = 1052
msoLanguageIDAmharic = 1118
msoLanguageIDArabicAlgeria = 5121
msoLanguageIDArabicBahrain = 15361
msoLanguageIDArabicEgypt = 3073
msoLanguageIDArabicIraq = 2049
msoLanguageIDArabicJordan = 11265
msoLanguageIDArabicKuwait = 13313
msoLanguageIDArabicLebanon = 12289
msoLanguageIDArabicLibya = 4097
msoLanguageIDArabicMorocco = 6145
msoLanguageIDArabicOman = 8193
msoLanguageIDArabicQatar = 16385
msoLanguageIDArabic = 1025
msoLanguageIDArabicSyria = 10241
msoLanguageIDArabicTunisia = 7169
msoLanguageIDArabicUAE = 14337
msoLanguageIDArabicYemen = 9217
msoLanguageIDArmenian = 1067
msoLanguageIDAssamese = 1101
msoLanguageIDAzeriCyrillic = 2092
msoLanguageIDAzeriLatin = 1068
msoLanguageIDBasque = 1069
msoLanguageIDByelorussian = 1059
msoLanguageIDBengali = 1093
msoLanguageIDBosnian = 4122
msoLanguageIDBosnianBosniaHerzegovinaCyrillic = 8218
msoLanguageIDBosnianBosniaHerzegovinaLatin = 5146
msoLanguageIDBulgarian = 1026
msoLanguageIDBurmese = 1109
msoLanguageIDCatalan = 1027
msoLanguageIDChineseHongKongSAR = 3076
msoLanguageIDChineseMacaoSAR = 5124
msoLanguageIDSimplifiedChinese = 2052
msoLanguageIDChineseSingapore = 4100
msoLanguageIDTraditionalChinese = 1028
msoLanguageIDCherokee = 1116
msoLanguageIDCroatian = 1050
msoLanguageIDCzech = 1029
msoLanguageIDDanish = 1030
msoLanguageIDDivehi = 1125
msoLanguageIDBelgianDutch = 2067
msoLanguageIDDutch = 1043
msoLanguageIDDzongkhaBhutan = 2129
msoLanguageIDEdo = 1126
msoLanguageIDEnglishAUS = 3081
msoLanguageIDEnglishBelize = 10249
msoLanguageIDEnglishCanadian = 4105
msoLanguageIDEnglishCaribbean = 9225
msoLanguageIDEnglishIndonesia = 14345
msoLanguageIDEnglishIreland = 6153
msoLanguageIDEnglishJamaica = 8201
msoLanguageIDEnglishNewZealand = 5129
msoLanguageIDEnglishPhilippines = 13321
msoLanguageIDEnglishSouthAfrica = 7177
msoLanguageIDEnglishTrinidadTobago = 11273
msoLanguageIDEnglishUK = 2057
msoLanguageIDEnglishUS = 1033
msoLanguageIDEnglishZimbabwe = 12297
msoLanguageIDEstonian = 1061
msoLanguageIDFaeroese = 1080
msoLanguageIDFarsi = 1065
msoLanguageIDFilipino = 1124
msoLanguageIDFinnish = 1035
msoLanguageIDBelgianFrench = 2060
msoLanguageIDFrenchCameroon = 11276
msoLanguageIDFrenchCanadian = 3084
msoLanguageIDFrenchCotedIvoire = 12300
msoLanguageIDFrench = 1036
msoLanguageIDFrenchHaiti = 15372
msoLanguageIDFrenchLuxembourg = 5132
msoLanguageIDFrenchMali = 13324
msoLanguageIDFrenchMonaco = 6156
msoLanguageIDFrenchMorocco = 14348
msoLanguageIDFrenchReunion = 8204
msoLanguageIDFrenchSenegal = 10252
msoLanguageIDSwissFrench = 4108
msoLanguageIDFrenchWestIndies = 7180
msoLanguageIDFrenchZaire = 9228
msoLanguageIDFrenchCongoDRC = 9228
msoLanguageIDFrisianNetherlands = 1122
msoLanguageIDFulfulde = 1127
msoLanguageIDGaelicIreland = 2108
msoLanguageIDGaelicScotland = 1084
msoLanguageIDGalician = 1110
msoLanguageIDGeorgian = 1079
msoLanguageIDGermanAustria = 3079
msoLanguageIDGerman = 1031
msoLanguageIDGermanLiechtenstein = 5127
msoLanguageIDGermanLuxembourg = 4103
msoLanguageIDSwissGerman = 2055
msoLanguageIDGreek = 1032
msoLanguageIDGuarani = 1140
msoLanguageIDGujarati = 1095
msoLanguageIDHausa = 1128
msoLanguageIDHawaiian = 1141
msoLanguageIDHebrew = 1037
msoLanguageIDHindi = 1081
msoLanguageIDHungarian = 1038
msoLanguageIDIbibio = 1129
msoLanguageIDIcelandic = 1039
msoLanguageIDIgbo = 1136
msoLanguageIDIndonesian = 1057
msoLanguageIDInuktitut = 1117
msoLanguageIDItalian = 1040
msoLanguageIDSwissItalian = 2064
msoLanguageIDJapanese = 1041
msoLanguageIDKannada = 1099
msoLanguageIDKanuri = 1137
msoLanguageIDKashmiri = 1120
msoLanguageIDKashmiriDevanagari = 2144
msoLanguageIDKazakh = 1087
msoLanguageIDKhmer = 1107
msoLanguageIDKirghiz = 1088
msoLanguageIDKonkani = 1111
msoLanguageIDKorean = 1042
msoLanguageIDKyrgyz = 1088
msoLanguageIDLatin = 1142
msoLanguageIDLao = 1108
msoLanguageIDLatvian = 1062
msoLanguageIDLithuanian = 1063
msoLanguageIDMacedonian = 1071
msoLanguageIDMacedonianFYROM = 1071
msoLanguageIDMalaysian = 1086
msoLanguageIDMalayBruneiDarussalam = 2110
msoLanguageIDMalayalam = 1100
msoLanguageIDMaltese = 1082
msoLanguageIDManipuri = 1112
msoLanguageIDMaori = 1153
msoLanguageIDMarathi = 1102
msoLanguageIDMongolian = 1104
msoLanguageIDNepali = 1121
msoLanguageIDNorwegianBokmol = 1044
msoLanguageIDNorwegianNynorsk = 2068
msoLanguageIDOriya = 1096
msoLanguageIDOromo = 1138
msoLanguageIDPashto = 1123
msoLanguageIDPolish = 1045
msoLanguageIDBrazilianPortuguese = 1046
msoLanguageIDPortuguese = 2070
msoLanguageIDPunjabi = 1094
msoLanguageIDQuechuaBolivia = 1131
msoLanguageIDQuechuaEcuador = 2155
msoLanguageIDQuechuaPeru = 3179
msoLanguageIDRhaetoRomanic = 1047
msoLanguageIDRomanianMoldova = 2072
msoLanguageIDRomanian = 1048
msoLanguageIDRussianMoldova = 2073
msoLanguageIDRussian = 1049
msoLanguageIDSamiLappish = 1083
msoLanguageIDSanskrit = 1103
msoLanguageIDSepedi = 1132
msoLanguageIDSerbianBosniaHerzegovinaCyrillic = 7194
msoLanguageIDSerbianBosniaHerzegovinaLatin = 6170
msoLanguageIDSerbianCyrillic = 3098
msoLanguageIDSerbianLatin = 2074
msoLanguageIDSesotho = 1072
msoLanguageIDSindhi = 1113
msoLanguageIDSindhiPakistan = 2137
msoLanguageIDSinhalese = 1115
msoLanguageIDSlovak = 1051
msoLanguageIDSlovenian = 1060
msoLanguageIDSomali = 1143
msoLanguageIDSorbian = 1070
msoLanguageIDSpanishArgentina = 11274
msoLanguageIDSpanishBolivia = 16394
msoLanguageIDSpanishChile = 13322
msoLanguageIDSpanishColombia = 9226
msoLanguageIDSpanishCostaRica = 5130
msoLanguageIDSpanishDominicanRepublic = 7178
msoLanguageIDSpanishEcuador = 12298
msoLanguageIDSpanishElSalvador = 17418
msoLanguageIDSpanishGuatemala = 4106
msoLanguageIDSpanishHonduras = 18442
msoLanguageIDMexicanSpanish = 2058
msoLanguageIDSpanishNicaragua = 19466
msoLanguageIDSpanishPanama = 6154
msoLanguageIDSpanishParaguay = 15370
msoLanguageIDSpanishPeru = 10250
msoLanguageIDSpanishPuertoRico = 20490
msoLanguageIDSpanishModernSort = 3082
msoLanguageIDSpanish = 1034
msoLanguageIDSpanishUruguay = 14346
msoLanguageIDSpanishVenezuela = 8202
msoLanguageIDSutu = 1072
msoLanguageIDSwahili = 1089
msoLanguageIDSwedishFinland = 2077
msoLanguageIDSwedish = 1053
msoLanguageIDSyriac = 1114
msoLanguageIDTajik = 1064
msoLanguageIDTamil = 1097
msoLanguageIDTamazight = 1119
msoLanguageIDTamazightLatin = 2143
msoLanguageIDTatar = 1092
msoLanguageIDTelugu = 1098
msoLanguageIDThai = 1054
msoLanguageIDTibetan = 1105
msoLanguageIDTigrignaEthiopic = 1139
msoLanguageIDTigrignaEritrea = 2163
msoLanguageIDTsonga = 1073
msoLanguageIDTswana = 1074
msoLanguageIDTurkish = 1055
msoLanguageIDTurkmen = 1090
msoLanguageIDUkrainian = 1058
msoLanguageIDUrdu = 1056
msoLanguageIDUzbekCyrillic = 2115
msoLanguageIDUzbekLatin = 1091
msoLanguageIDVenda = 1075
msoLanguageIDVietnamese = 1066
msoLanguageIDWelsh = 1106
msoLanguageIDXhosa = 1076
msoLanguageIDYi = 1144
msoLanguageIDYiddish = 1085
msoLanguageIDYoruba = 1130
msoLanguageIDZulu = 1077
MsoLanguageID = c_int  # enum

# values for enumeration 'XlDataLabelsType'
xlDataLabelsShowNone = -4142
xlDataLabelsShowValue = 2
xlDataLabelsShowPercent = 3
xlDataLabelsShowLabel = 4
xlDataLabelsShowLabelAndPercent = 5
xlDataLabelsShowBubbleSizes = 6
XlDataLabelsType = c_int  # enum

# values for enumeration 'XlAxisGroup'
xlPrimary = 1
xlSecondary = 2
XlAxisGroup = c_int  # enum

# values for enumeration 'XlErrorBarDirection'
xlChartX = -4168
xlChartY = 1
XlErrorBarDirection = c_int  # enum

# values for enumeration 'XlErrorBarInclude'
xlErrorBarIncludeBoth = 1
xlErrorBarIncludeMinusValues = 3
xlErrorBarIncludeNone = -4142
xlErrorBarIncludePlusValues = 2
XlErrorBarInclude = c_int  # enum

# values for enumeration 'XlErrorBarType'
xlErrorBarTypeCustom = -4114
xlErrorBarTypeFixedValue = 1
xlErrorBarTypePercent = 2
xlErrorBarTypeStDev = -4155
xlErrorBarTypeStError = 4
XlErrorBarType = c_int  # enum

# values for enumeration 'XlColorIndex'
xlColorIndexAutomatic = -4105
xlColorIndexNone = -4142
XlColorIndex = c_int  # enum

# values for enumeration 'XlMarkerStyle'
xlMarkerStyleAutomatic = -4105
xlMarkerStyleCircle = 8
xlMarkerStyleDash = -4115
xlMarkerStyleDiamond = 2
xlMarkerStyleDot = -4118
xlMarkerStyleNone = -4142
xlMarkerStylePicture = -4147
xlMarkerStylePlus = 9
xlMarkerStyleSquare = 1
xlMarkerStyleStar = 5
xlMarkerStyleTriangle = 3
xlMarkerStyleX = -4168
XlMarkerStyle = c_int  # enum

# values for enumeration 'XlChartPictureType'
xlStackScale = 3
xlStack = 2
xlStretch = 1
XlChartPictureType = c_int  # enum

# values for enumeration 'XlChartType'
xlColumnClustered = 51
xlColumnStacked = 52
xlColumnStacked100 = 53
xl3DColumnClustered = 54
xl3DColumnStacked = 55
xl3DColumnStacked100 = 56
xlBarClustered = 57
xlBarStacked = 58
xlBarStacked100 = 59
xl3DBarClustered = 60
xl3DBarStacked = 61
xl3DBarStacked100 = 62
xlLineStacked = 63
xlLineStacked100 = 64
xlLineMarkers = 65
xlLineMarkersStacked = 66
xlLineMarkersStacked100 = 67
xlPieOfPie = 68
xlPieExploded = 69
xl3DPieExploded = 70
xlBarOfPie = 71
xlXYScatterSmooth = 72
xlXYScatterSmoothNoMarkers = 73
xlXYScatterLines = 74
xlXYScatterLinesNoMarkers = 75
xlAreaStacked = 76
xlAreaStacked100 = 77
xl3DAreaStacked = 78
xl3DAreaStacked100 = 79
xlDoughnutExploded = 80
xlRadarMarkers = 81
xlRadarFilled = 82
xlSurface = 83
xlSurfaceWireframe = 84
xlSurfaceTopView = 85
xlSurfaceTopViewWireframe = 86
xlBubble = 15
xlBubble3DEffect = 87
xlStockHLC = 88
xlStockOHLC = 89
xlStockVHLC = 90
xlStockVOHLC = 91
xlCylinderColClustered = 92
xlCylinderColStacked = 93
xlCylinderColStacked100 = 94
xlCylinderBarClustered = 95
xlCylinderBarStacked = 96
xlCylinderBarStacked100 = 97
xlCylinderCol = 98
xlConeColClustered = 99
xlConeColStacked = 100
xlConeColStacked100 = 101
xlConeBarClustered = 102
xlConeBarStacked = 103
xlConeBarStacked100 = 104
xlConeCol = 105
xlPyramidColClustered = 106
xlPyramidColStacked = 107
xlPyramidColStacked100 = 108
xlPyramidBarClustered = 109
xlPyramidBarStacked = 110
xlPyramidBarStacked100 = 111
xlPyramidCol = 112
xl3DColumn = -4100
xlLine = 4
xl3DLine = -4101
xl3DPie = -4102
xlPie = 5
xlXYScatter = -4169
xl3DArea = -4098
xlArea = 1
xlDoughnut = -4120
xlRadar = -4151
xlCombo = -4152
xlComboColumnClusteredLine = 113
xlComboColumnClusteredLineSecondaryAxis = 114
xlComboAreaStackedColumnClustered = 115
xlOtherCombinations = 116
xlSuggestedChart = -2
xlTreemap = 117
xlHistogram = 118
xlWaterfall = 119
xlSunburst = 120
xlBoxwhisker = 121
xlPareto = 122
xlFunnel = 123
xlColumnClusteredEx = 124
xlColumnStackedEx = 125
xlColumnStacked100Ex = 126
xlLineEx = 127
xlLineStackedEx = 128
xlLineStacked100Ex = 129
xlPieEx = 130
xlDoughnutEx = 131
xlBarClusteredEx = 132
xlBarStackedEx = 133
xlBarStacked100Ex = 134
xlAreaEx = 135
xlAreaStackedEx = 136
xlAreaStacked100Ex = 137
xlXYScatterEx = 138
xlBubbleEx = 139
xlRegionMap = 140
XlChartType = c_int  # enum

# values for enumeration 'XlBarShape'
xlBox = 0
xlPyramidToPoint = 1
xlPyramidToMax = 2
xlCylinder = 3
xlConeToPoint = 4
xlConeToMax = 5
XlBarShape = c_int  # enum

# values for enumeration 'XlParentDataLabelOptions'
xlParentDataLabelOptionsNone = 0
xlParentDataLabelOptionsBanner = 1
xlParentDataLabelOptionsOverlapping = 2
XlParentDataLabelOptions = c_int  # enum

# values for enumeration 'XlValueSortOrder'
xlValueNone = 0
xlValueAscending = 1
xlValueDescending = 2
XlValueSortOrder = c_int  # enum

# values for enumeration 'XlGeoProjectionType'
xlGeoProjectionTypeAutomatic = 0
xlGeoProjectionTypeMercator = 1
xlGeoProjectionTypeMiller = 2
xlGeoProjectionTypeAlbers = 3
xlGeoProjectionTypeRobinson = 4
XlGeoProjectionType = c_int  # enum

# values for enumeration 'XlGeoMappingLevel'
xlGeoMappingLevelAutomatic = 0
xlGeoMappingLevelDataOnly = 1
xlGeoMappingLevelPostalCode = 2
xlGeoMappingLevelCounty = 3
xlGeoMappingLevelState = 4
xlGeoMappingLevelCountryRegion = 5
xlGeoMappingLevelCountryRegionList = 6
xlGeoMappingLevelWorld = 7
XlGeoMappingLevel = c_int  # enum

# values for enumeration 'XlRegionLabelOptions'
xlRegionLabelOptionsNone = 0
xlRegionLabelOptionsBestFitOnly = 1
xlRegionLabelOptionsShowAll = 2
XlRegionLabelOptions = c_int  # enum

# values for enumeration 'XlSeriesColorGradientStyle'
xlSeriesColorGradientStyleSequential = 0
xlSeriesColorGradientStyleDiverging = 1
XlSeriesColorGradientStyle = c_int  # enum

# values for enumeration 'MsoIconType'
msoIconNone = 0
msoIconAlert = 2
msoIconTip = 3
msoIconAlertInfo = 4
msoIconAlertWarning = 5
msoIconAlertQuery = 6
msoIconAlertCritical = 7
MsoIconType = c_int  # enum

# values for enumeration 'XlTrendlineType'
xlExponential = 5
xlLinear = -4132
xlLogarithmic = -4133
xlMovingAvg = 6
xlPolynomial = 3
xlPower = 4
XlTrendlineType = c_int  # enum

# values for enumeration 'XlBinsType'
xlBinsTypeAutomatic = 0
xlBinsTypeCategorical = 1
xlBinsTypeManual = 2
xlBinsTypeBinSize = 3
xlBinsTypeBinCount = 4
XlBinsType = c_int  # enum

# values for enumeration 'MsoContactCardStyle'
msoContactCardHover = 0
msoContactCardFull = 1
MsoContactCardStyle = c_int  # enum

# values for enumeration 'MsoMixedType'
msoIntegerMixed = 32768
msoSingleMixed = -2147483648
MsoMixedType = c_int  # enum

# values for enumeration 'MsoContactCardAddressType'
msoContactCardAddressTypeUnknown = 0
msoContactCardAddressTypeOutlook = 1
msoContactCardAddressTypeSMTP = 2
msoContactCardAddressTypeIM = 3
MsoContactCardAddressType = c_int  # enum

# values for enumeration 'MsoContactCardType'
msoContactCardTypeEnterpriseContact = 0
msoContactCardTypePersonalContact = 1
msoContactCardTypeUnknownContact = 2
msoContactCardTypeEnterpriseGroup = 3
msoContactCardTypePersonalDistributionList = 4
MsoContactCardType = c_int  # enum

# values for enumeration 'MsoBalloonType'
msoBalloonTypeButtons = 0
msoBalloonTypeBullets = 1
msoBalloonTypeNumbers = 2
MsoBalloonType = c_int  # enum

# values for enumeration 'XlAxisCrosses'
xlAxisCrossesAutomatic = -4105
xlAxisCrossesCustom = -4114
xlAxisCrossesMaximum = 2
xlAxisCrossesMinimum = 4
XlAxisCrosses = c_int  # enum

# values for enumeration 'XlTickMark'
xlTickMarkCross = 4
xlTickMarkInside = 2
xlTickMarkNone = -4142
xlTickMarkOutside = 3
XlTickMark = c_int  # enum

# values for enumeration 'XlScaleType'
xlScaleLinear = -4132
xlScaleLogarithmic = -4133
XlScaleType = c_int  # enum

# values for enumeration 'XlTickLabelPosition'
xlTickLabelPositionHigh = -4127
xlTickLabelPositionLow = -4134
xlTickLabelPositionNextToAxis = 4
xlTickLabelPositionNone = -4142
XlTickLabelPosition = c_int  # enum

# values for enumeration 'XlAxisType'
xlCategory = 1
xlSeriesAxis = 3
xlValue = 2
XlAxisType = c_int  # enum

# values for enumeration 'XlTimeUnit'
xlDays = 0
xlMonths = 1
xlYears = 2
XlTimeUnit = c_int  # enum

# values for enumeration 'XlCategoryType'
xlCategoryScale = 2
xlTimeScale = 3
xlAutomaticScale = -4105
XlCategoryType = c_int  # enum

# values for enumeration 'XlDisplayUnit'
xlHundreds = -2
xlThousands = -3
xlTenThousands = -4
xlHundredThousands = -5
xlMillions = -6
xlTenMillions = -7
xlHundredMillions = -8
xlThousandMillions = -9
xlMillionMillions = -10
xlDisplayUnitCustom = -4114
xlDisplayUnitNone = -4142
XlDisplayUnit = c_int  # enum

# values for enumeration 'XlCategorySortOrder'
xlIndexAscending = 0
xlIndexDescending = 1
xlCategoryAscending = 2
xlCategoryDescending = 3
XlCategorySortOrder = c_int  # enum

# values for enumeration 'XlDataLabelPosition'
xlLabelPositionCenter = -4108
xlLabelPositionAbove = 0
xlLabelPositionBelow = 1
xlLabelPositionLeft = -4131
xlLabelPositionRight = -4152
xlLabelPositionOutsideEnd = 2
xlLabelPositionInsideEnd = 3
xlLabelPositionInsideBase = 4
xlLabelPositionBestFit = 5
xlLabelPositionMixed = 6
xlLabelPositionCustom = 7
XlDataLabelPosition = c_int  # enum

# values for enumeration 'MsoModeType'
msoModeModal = 0
msoModeAutoDown = 1
msoModeModeless = 2
MsoModeType = c_int  # enum

# values for enumeration 'MsoAssignmentMethod'
NOT_SET = -1
STANDARD = 0
PRIVILEGED = 1
AUTO = 2
MsoAssignmentMethod = c_int  # enum

# values for enumeration 'MsoScaleFrom'
msoScaleFromTopLeft = 0
msoScaleFromMiddle = 1
msoScaleFromBottomRight = 2
MsoScaleFrom = c_int  # enum

# values for enumeration 'MsoSensitivityLabelError'
msoNoError = 0
msoUserNotSignedIn = 1
MsoSensitivityLabelError = c_int  # enum

# values for enumeration 'MsoExtrusionColorType'
msoExtrusionColorTypeMixed = -2
msoExtrusionColorAutomatic = 1
msoExtrusionColorCustom = 2
MsoExtrusionColorType = c_int  # enum

# values for enumeration 'MsoBalloonErrorType'
msoBalloonErrorNone = 0
msoBalloonErrorOther = 1
msoBalloonErrorTooBig = 2
msoBalloonErrorOutOfMemory = 3
msoBalloonErrorBadPictureRef = 4
msoBalloonErrorBadReference = 5
msoBalloonErrorButtonlessModal = 6
msoBalloonErrorButtonModeless = 7
msoBalloonErrorBadCharacter = 8
msoBalloonErrorCOMFailure = 9
msoBalloonErrorCharNotTopmostForModal = 10
msoBalloonErrorTooManyControls = 11
MsoBalloonErrorType = c_int  # enum

# values for enumeration 'MsoBarPosition'
msoBarLeft = 0
msoBarTop = 1
msoBarRight = 2
msoBarBottom = 3
msoBarFloating = 4
msoBarPopup = 5
msoBarMenuBar = 6
MsoBarPosition = c_int  # enum

# values for enumeration 'MsoArrowheadLength'
msoArrowheadLengthMixed = -2
msoArrowheadShort = 1
msoArrowheadLengthMedium = 2
msoArrowheadLong = 3
MsoArrowheadLength = c_int  # enum

# values for enumeration 'MsoArrowheadStyle'
msoArrowheadStyleMixed = -2
msoArrowheadNone = 1
msoArrowheadTriangle = 2
msoArrowheadOpen = 3
msoArrowheadStealth = 4
msoArrowheadDiamond = 5
msoArrowheadOval = 6
MsoArrowheadStyle = c_int  # enum

# values for enumeration 'MsoArrowheadWidth'
msoArrowheadWidthMixed = -2
msoArrowheadNarrow = 1
msoArrowheadWidthMedium = 2
msoArrowheadWide = 3
MsoArrowheadWidth = c_int  # enum

# values for enumeration 'MsoLineDashStyle'
msoLineDashStyleMixed = -2
msoLineSolid = 1
msoLineSquareDot = 2
msoLineRoundDot = 3
msoLineDash = 4
msoLineDashDot = 5
msoLineDashDotDot = 6
msoLineLongDash = 7
msoLineLongDashDot = 8
msoLineLongDashDotDot = 9
msoLineSysDash = 10
msoLineSysDot = 11
msoLineSysDashDot = 12
MsoLineDashStyle = c_int  # enum

# values for enumeration 'MsoPatternType'
msoPatternMixed = -2
msoPattern5Percent = 1
msoPattern10Percent = 2
msoPattern20Percent = 3
msoPattern25Percent = 4
msoPattern30Percent = 5
msoPattern40Percent = 6
msoPattern50Percent = 7
msoPattern60Percent = 8
msoPattern70Percent = 9
msoPattern75Percent = 10
msoPattern80Percent = 11
msoPattern90Percent = 12
msoPatternDarkHorizontal = 13
msoPatternDarkVertical = 14
msoPatternDarkDownwardDiagonal = 15
msoPatternDarkUpwardDiagonal = 16
msoPatternSmallCheckerBoard = 17
msoPatternTrellis = 18
msoPatternLightHorizontal = 19
msoPatternLightVertical = 20
msoPatternLightDownwardDiagonal = 21
msoPatternLightUpwardDiagonal = 22
msoPatternSmallGrid = 23
msoPatternDottedDiamond = 24
msoPatternWideDownwardDiagonal = 25
msoPatternWideUpwardDiagonal = 26
msoPatternDashedUpwardDiagonal = 27
msoPatternDashedDownwardDiagonal = 28
msoPatternNarrowVertical = 29
msoPatternNarrowHorizontal = 30
msoPatternDashedVertical = 31
msoPatternDashedHorizontal = 32
msoPatternLargeConfetti = 33
msoPatternLargeGrid = 34
msoPatternHorizontalBrick = 35
msoPatternLargeCheckerBoard = 36
msoPatternSmallConfetti = 37
msoPatternZigZag = 38
msoPatternSolidDiamond = 39
msoPatternDiagonalBrick = 40
msoPatternOutlinedDiamond = 41
msoPatternPlaid = 42
msoPatternSphere = 43
msoPatternWeave = 44
msoPatternDottedGrid = 45
msoPatternDivot = 46
msoPatternShingle = 47
msoPatternWave = 48
msoPatternHorizontal = 49
msoPatternVertical = 50
msoPatternCross = 51
msoPatternDownwardDiagonal = 52
msoPatternUpwardDiagonal = 53
msoPatternDiagonalCross = 54
MsoPatternType = c_int  # enum

# values for enumeration 'MsoLineStyle'
msoLineStyleMixed = -2
msoLineSingle = 1
msoLineThinThin = 2
msoLineThinThick = 3
msoLineThickThin = 4
msoLineThickBetweenThin = 5
MsoLineStyle = c_int  # enum

# values for enumeration 'MsoDistributeCmd'
msoDistributeHorizontally = 0
msoDistributeVertically = 1
MsoDistributeCmd = c_int  # enum

# values for enumeration 'MsoFillType'
msoFillMixed = -2
msoFillSolid = 1
msoFillPatterned = 2
msoFillGradient = 3
msoFillTextured = 4
msoFillBackground = 5
msoFillPicture = 6
MsoFillType = c_int  # enum

# values for enumeration 'MsoNumberedBulletStyle'
msoBulletStyleMixed = -2
msoBulletAlphaLCPeriod = 0
msoBulletAlphaUCPeriod = 1
msoBulletArabicParenRight = 2
msoBulletArabicPeriod = 3
msoBulletRomanLCParenBoth = 4
msoBulletRomanLCParenRight = 5
msoBulletRomanLCPeriod = 6
msoBulletRomanUCPeriod = 7
msoBulletAlphaLCParenBoth = 8
msoBulletAlphaLCParenRight = 9
msoBulletAlphaUCParenBoth = 10
msoBulletAlphaUCParenRight = 11
msoBulletArabicParenBoth = 12
msoBulletArabicPlain = 13
msoBulletRomanUCParenBoth = 14
msoBulletRomanUCParenRight = 15
msoBulletSimpChinPlain = 16
msoBulletSimpChinPeriod = 17
msoBulletCircleNumDBPlain = 18
msoBulletCircleNumWDWhitePlain = 19
msoBulletCircleNumWDBlackPlain = 20
msoBulletTradChinPlain = 21
msoBulletTradChinPeriod = 22
msoBulletArabicAlphaDash = 23
msoBulletArabicAbjadDash = 24
msoBulletHebrewAlphaDash = 25
msoBulletKanjiKoreanPlain = 26
msoBulletKanjiKoreanPeriod = 27
msoBulletArabicDBPlain = 28
msoBulletArabicDBPeriod = 29
msoBulletThaiAlphaPeriod = 30
msoBulletThaiAlphaParenRight = 31
msoBulletThaiAlphaParenBoth = 32
msoBulletThaiNumPeriod = 33
msoBulletThaiNumParenRight = 34
msoBulletThaiNumParenBoth = 35
msoBulletHindiAlphaPeriod = 36
msoBulletHindiNumPeriod = 37
msoBulletKanjiSimpChinDBPeriod = 38
msoBulletHindiNumParenRight = 39
msoBulletHindiAlpha1Period = 40
MsoNumberedBulletStyle = c_int  # enum

# values for enumeration 'MsoBulletType'
msoBulletMixed = -2
msoBulletNone = 0
msoBulletUnnumbered = 1
msoBulletNumbered = 2
msoBulletPicture = 3
MsoBulletType = c_int  # enum

# values for enumeration 'MsoBarProtection'
msoBarNoProtection = 0
msoBarNoCustomize = 1
msoBarNoResize = 2
msoBarNoMove = 4
msoBarNoChangeVisible = 8
msoBarNoChangeDock = 16
msoBarNoVerticalDock = 32
msoBarNoHorizontalDock = 64
MsoBarProtection = c_int  # enum

# values for enumeration 'MsoBarType'
msoBarTypeNormal = 0
msoBarTypeMenuBar = 1
msoBarTypePopup = 2
MsoBarType = c_int  # enum

# values for enumeration 'MsoWizardActType'
msoWizardActInactive = 0
msoWizardActActive = 1
msoWizardActSuspend = 2
msoWizardActResume = 3
MsoWizardActType = c_int  # enum

# values for enumeration 'MsoHorizontalAnchor'
msoHorizontalAnchorMixed = -2
msoAnchorNone = 1
msoAnchorCenter = 2
MsoHorizontalAnchor = c_int  # enum

# values for enumeration 'SignatureType'
sigtypeUnknown = 0
sigtypeNonVisible = 1
sigtypeSignatureLine = 2
sigtypeMax = 3
SignatureType = c_int  # enum

# values for enumeration 'XlEndStyleCap'
xlCap = 1
xlNoCap = 2
XlEndStyleCap = c_int  # enum

# values for enumeration 'MsoLastModified'
msoLastModifiedYesterday = 1
msoLastModifiedToday = 2
msoLastModifiedLastWeek = 3
msoLastModifiedThisWeek = 4
msoLastModifiedLastMonth = 5
msoLastModifiedThisMonth = 6
msoLastModifiedAnyTime = 7
MsoLastModified = c_int  # enum

# values for enumeration 'MsoSoftEdgeType'
msoSoftEdgeTypeMixed = -2
msoSoftEdgeTypeNone = 0
msoSoftEdgeType1 = 1
msoSoftEdgeType2 = 2
msoSoftEdgeType3 = 3
msoSoftEdgeType4 = 4
msoSoftEdgeType5 = 5
msoSoftEdgeType6 = 6
MsoSoftEdgeType = c_int  # enum

# values for enumeration 'MsoWizardMsgType'
msoWizardMsgLocalStateOn = 1
msoWizardMsgLocalStateOff = 2
msoWizardMsgShowHelp = 3
msoWizardMsgSuspending = 4
msoWizardMsgResuming = 5
MsoWizardMsgType = c_int  # enum

# values for enumeration 'MsoVerticalAnchor'
msoVerticalAnchorMixed = -2
msoAnchorTop = 1
msoAnchorTopBaseline = 2
msoAnchorMiddle = 3
msoAnchorBottom = 4
msoAnchorBottomBaseLine = 5
MsoVerticalAnchor = c_int  # enum

# values for enumeration 'MsoTextStrike'
msoStrikeMixed = -2
msoNoStrike = 0
msoSingleStrike = 1
msoDoubleStrike = 2
MsoTextStrike = c_int  # enum

# values for enumeration 'MsoTextCaps'
msoCapsMixed = -2
msoNoCaps = 0
msoSmallCaps = 1
msoAllCaps = 2
MsoTextCaps = c_int  # enum

# values for enumeration 'MsoTextUnderlineType'
msoUnderlineMixed = -2
msoNoUnderline = 0
msoUnderlineWords = 1
msoUnderlineSingleLine = 2
msoUnderlineDoubleLine = 3
msoUnderlineHeavyLine = 4
msoUnderlineDottedLine = 5
msoUnderlineDottedHeavyLine = 6
msoUnderlineDashLine = 7
msoUnderlineDashHeavyLine = 8
msoUnderlineDashLongLine = 9
msoUnderlineDashLongHeavyLine = 10
msoUnderlineDotDashLine = 11
msoUnderlineDotDashHeavyLine = 12
msoUnderlineDotDotDashLine = 13
msoUnderlineDotDotDashHeavyLine = 14
msoUnderlineWavyLine = 15
msoUnderlineWavyHeavyLine = 16
msoUnderlineWavyDoubleLine = 17
MsoTextUnderlineType = c_int  # enum

# values for enumeration 'MsoOrientation'
msoOrientationMixed = -2
msoOrientationHorizontal = 1
msoOrientationVertical = 2
MsoOrientation = c_int  # enum

# values for enumeration 'MsoBalloonButtonType'
msoBalloonButtonYesToAll = -15
msoBalloonButtonOptions = -14
msoBalloonButtonTips = -13
msoBalloonButtonClose = -12
msoBalloonButtonSnooze = -11
msoBalloonButtonSearch = -10
msoBalloonButtonIgnore = -9
msoBalloonButtonAbort = -8
msoBalloonButtonRetry = -7
msoBalloonButtonNext = -6
msoBalloonButtonBack = -5
msoBalloonButtonNo = -4
msoBalloonButtonYes = -3
msoBalloonButtonCancel = -2
msoBalloonButtonOK = -1
msoBalloonButtonNull = 0
MsoBalloonButtonType = c_int  # enum

# values for enumeration 'MsoSortOrder'
msoSortOrderAscending = 1
msoSortOrderDescending = 2
MsoSortOrder = c_int  # enum

# values for enumeration 'MsoZOrderCmd'
msoBringToFront = 0
msoSendToBack = 1
msoBringForward = 2
msoSendBackward = 3
msoBringInFrontOfText = 4
msoSendBehindText = 5
MsoZOrderCmd = c_int  # enum

# values for enumeration 'XlDisplayBlanksAs'
xlInterpolated = 3
xlNotPlotted = 1
xlZero = 2
XlDisplayBlanksAs = c_int  # enum

# values for enumeration 'XlRowCol'
xlColumns = 2
xlRows = 1
XlRowCol = c_int  # enum

# values for enumeration 'MsoChartElementType'
msoElementChartTitleNone = 0
msoElementChartTitleCenteredOverlay = 1
msoElementChartTitleAboveChart = 2
msoElementLegendNone = 100
msoElementLegendRight = 101
msoElementLegendTop = 102
msoElementLegendLeft = 103
msoElementLegendBottom = 104
msoElementLegendRightOverlay = 105
msoElementLegendLeftOverlay = 106
msoElementDataLabelNone = 200
msoElementDataLabelShow = 201
msoElementDataLabelCenter = 202
msoElementDataLabelInsideEnd = 203
msoElementDataLabelInsideBase = 204
msoElementDataLabelOutSideEnd = 205
msoElementDataLabelLeft = 206
msoElementDataLabelRight = 207
msoElementDataLabelTop = 208
msoElementDataLabelBottom = 209
msoElementDataLabelBestFit = 210
msoElementDataLabelCallout = 211
msoElementPrimaryCategoryAxisTitleNone = 300
msoElementPrimaryCategoryAxisTitleAdjacentToAxis = 301
msoElementPrimaryCategoryAxisTitleBelowAxis = 302
msoElementPrimaryCategoryAxisTitleRotated = 303
msoElementPrimaryCategoryAxisTitleVertical = 304
msoElementPrimaryCategoryAxisTitleHorizontal = 305
msoElementPrimaryValueAxisTitleNone = 306
msoElementPrimaryValueAxisTitleAdjacentToAxis = 306
msoElementPrimaryValueAxisTitleBelowAxis = 308
msoElementPrimaryValueAxisTitleRotated = 309
msoElementPrimaryValueAxisTitleVertical = 310
msoElementPrimaryValueAxisTitleHorizontal = 311
msoElementSecondaryCategoryAxisTitleNone = 312
msoElementSecondaryCategoryAxisTitleAdjacentToAxis = 313
msoElementSecondaryCategoryAxisTitleBelowAxis = 314
msoElementSecondaryCategoryAxisTitleRotated = 315
msoElementSecondaryCategoryAxisTitleVertical = 316
msoElementSecondaryCategoryAxisTitleHorizontal = 317
msoElementSecondaryValueAxisTitleNone = 318
msoElementSecondaryValueAxisTitleAdjacentToAxis = 319
msoElementSecondaryValueAxisTitleBelowAxis = 320
msoElementSecondaryValueAxisTitleRotated = 321
msoElementSecondaryValueAxisTitleVertical = 322
msoElementSecondaryValueAxisTitleHorizontal = 323
msoElementSeriesAxisTitleNone = 324
msoElementSeriesAxisTitleRotated = 325
msoElementSeriesAxisTitleVertical = 326
msoElementSeriesAxisTitleHorizontal = 327
msoElementPrimaryValueGridLinesNone = 328
msoElementPrimaryValueGridLinesMinor = 329
msoElementPrimaryValueGridLinesMajor = 330
msoElementPrimaryValueGridLinesMinorMajor = 331
msoElementPrimaryCategoryGridLinesNone = 332
msoElementPrimaryCategoryGridLinesMinor = 333
msoElementPrimaryCategoryGridLinesMajor = 334
msoElementPrimaryCategoryGridLinesMinorMajor = 335
msoElementSecondaryValueGridLinesNone = 336
msoElementSecondaryValueGridLinesMinor = 337
msoElementSecondaryValueGridLinesMajor = 338
msoElementSecondaryValueGridLinesMinorMajor = 339
msoElementSecondaryCategoryGridLinesNone = 340
msoElementSecondaryCategoryGridLinesMinor = 341
msoElementSecondaryCategoryGridLinesMajor = 342
msoElementSecondaryCategoryGridLinesMinorMajor = 343
msoElementSeriesAxisGridLinesNone = 344
msoElementSeriesAxisGridLinesMinor = 345
msoElementSeriesAxisGridLinesMajor = 346
msoElementSeriesAxisGridLinesMinorMajor = 347
msoElementPrimaryCategoryAxisNone = 348
msoElementPrimaryCategoryAxisShow = 349
msoElementPrimaryCategoryAxisWithoutLabels = 350
msoElementPrimaryCategoryAxisReverse = 351
msoElementPrimaryValueAxisNone = 352
msoElementPrimaryValueAxisShow = 353
msoElementPrimaryValueAxisThousands = 354
msoElementPrimaryValueAxisMillions = 355
msoElementPrimaryValueAxisBillions = 356
msoElementPrimaryValueAxisLogScale = 357
msoElementSecondaryCategoryAxisNone = 358
msoElementSecondaryCategoryAxisShow = 359
msoElementSecondaryCategoryAxisWithoutLabels = 360
msoElementSecondaryCategoryAxisReverse = 361
msoElementSecondaryValueAxisNone = 362
msoElementSecondaryValueAxisShow = 363
msoElementSecondaryValueAxisThousands = 364
msoElementSecondaryValueAxisMillions = 365
msoElementSecondaryValueAxisBillions = 366
msoElementSecondaryValueAxisLogScale = 367
msoElementSeriesAxisNone = 368
msoElementSeriesAxisShow = 369
msoElementSeriesAxisWithoutLabeling = 370
msoElementSeriesAxisReverse = 371
msoElementPrimaryCategoryAxisThousands = 372
msoElementPrimaryCategoryAxisMillions = 373
msoElementPrimaryCategoryAxisBillions = 374
msoElementPrimaryCategoryAxisLogScale = 375
msoElementSecondaryCategoryAxisThousands = 376
msoElementSecondaryCategoryAxisMillions = 377
msoElementSecondaryCategoryAxisBillions = 378
msoElementSecondaryCategoryAxisLogScale = 379
msoElementDataTableNone = 500
msoElementDataTableShow = 501
msoElementDataTableWithLegendKeys = 502
msoElementTrendlineNone = 600
msoElementTrendlineAddLinear = 601
msoElementTrendlineAddExponential = 602
msoElementTrendlineAddLinearForecast = 603
msoElementTrendlineAddTwoPeriodMovingAverage = 604
msoElementErrorBarNone = 700
msoElementErrorBarStandardError = 701
msoElementErrorBarPercentage = 702
msoElementErrorBarStandardDeviation = 703
msoElementLineNone = 800
msoElementLineDropLine = 801
msoElementLineHiLoLine = 802
msoElementLineSeriesLine = 803
msoElementLineDropHiLoLine = 804
msoElementUpDownBarsNone = 900
msoElementUpDownBarsShow = 901
msoElementPlotAreaNone = 1000
msoElementPlotAreaShow = 1001
msoElementChartWallNone = 1100
msoElementChartWallShow = 1101
msoElementChartFloorNone = 1200
msoElementChartFloorShow = 1201
MsoChartElementType = c_int  # enum

# values for enumeration 'XlCategoryLabelLevel'
xlCategoryLabelLevelNone = -3
xlCategoryLabelLevelCustom = -2
xlCategoryLabelLevelAll = -1
XlCategoryLabelLevel = c_int  # enum

# values for enumeration 'XlSeriesNameLevel'
xlSeriesNameLevelNone = -3
xlSeriesNameLevelCustom = -2
xlSeriesNameLevelAll = -1
XlSeriesNameLevel = c_int  # enum

# values for enumeration 'MsoSearchIn'
msoSearchInMyComputer = 0
msoSearchInOutlook = 1
msoSearchInMyNetworkPlaces = 2
msoSearchInCustom = 3
MsoSearchIn = c_int  # enum

# values for enumeration 'MsoSegmentType'
msoSegmentLine = 0
msoSegmentCurve = 1
MsoSegmentType = c_int  # enum

# values for enumeration 'DocProperties'
offPropertyTypeNumber = 1
offPropertyTypeBoolean = 2
offPropertyTypeDate = 3
offPropertyTypeString = 4
offPropertyTypeFloat = 5
DocProperties = c_int  # enum

# values for enumeration 'MsoDocProperties'
msoPropertyTypeNumber = 1
msoPropertyTypeBoolean = 2
msoPropertyTypeDate = 3
msoPropertyTypeString = 4
msoPropertyTypeFloat = 5
MsoDocProperties = c_int  # enum

# values for enumeration 'MsoCustomXMLValidationErrorType'
msoCustomXMLValidationErrorSchemaGenerated = 0
msoCustomXMLValidationErrorAutomaticallyCleared = 1
msoCustomXMLValidationErrorManual = 2
MsoCustomXMLValidationErrorType = c_int  # enum

# values for enumeration 'MsoCustomXMLNodeType'
msoCustomXMLNodeElement = 1
msoCustomXMLNodeAttribute = 2
msoCustomXMLNodeText = 3
msoCustomXMLNodeCData = 4
msoCustomXMLNodeProcessingInstruction = 7
msoCustomXMLNodeComment = 8
msoCustomXMLNodeDocument = 9
MsoCustomXMLNodeType = c_int  # enum

# values for enumeration 'MsoFarEastLineBreakLanguageID'
MsoFarEastLineBreakLanguageJapanese = 1041
MsoFarEastLineBreakLanguageKorean = 1042
MsoFarEastLineBreakLanguageSimplifiedChinese = 2052
MsoFarEastLineBreakLanguageTraditionalChinese = 1028
MsoFarEastLineBreakLanguageID = c_int  # enum

# values for enumeration 'MsoButtonStyleHidden'
msoButtonWrapText = 4
msoButtonTextBelow = 8
MsoButtonStyleHidden = c_int  # enum

# values for enumeration 'MsoFeatureInstall'
msoFeatureInstallNone = 0
msoFeatureInstallOnDemand = 1
msoFeatureInstallOnDemandWithUI = 2
MsoFeatureInstall = c_int  # enum

# values for enumeration 'MsoPresetGradientType'
msoPresetGradientMixed = -2
msoGradientEarlySunset = 1
msoGradientLateSunset = 2
msoGradientNightfall = 3
msoGradientDaybreak = 4
msoGradientHorizon = 5
msoGradientDesert = 6
msoGradientOcean = 7
msoGradientCalmWater = 8
msoGradientFire = 9
msoGradientFog = 10
msoGradientMoss = 11
msoGradientPeacock = 12
msoGradientWheat = 13
msoGradientParchment = 14
msoGradientMahogany = 15
msoGradientRainbow = 16
msoGradientRainbowII = 17
msoGradientGold = 18
msoGradientGoldII = 19
msoGradientBrass = 20
msoGradientChrome = 21
msoGradientChromeII = 22
msoGradientSilver = 23
msoGradientSapphire = 24
MsoPresetGradientType = c_int  # enum

# values for enumeration 'MsoShapeType'
msoShapeTypeMixed = -2
msoAutoShape = 1
msoCallout = 2
msoChart = 3
msoComment = 4
msoFreeform = 5
msoGroup = 6
msoEmbeddedOLEObject = 7
msoFormControl = 8
msoLine = 9
msoLinkedOLEObject = 10
msoLinkedPicture = 11
msoOLEControlObject = 12
msoPicture = 13
msoPlaceholder = 14
msoTextEffect = 15
msoMedia = 16
msoTextBox = 17
msoScriptAnchor = 18
msoTable = 19
msoCanvas = 20
msoDiagram = 21
msoInk = 22
msoInkComment = 23
msoSmartArt = 24
msoSlicer = 25
msoWebVideo = 26
msoContentApp = 27
msoGraphic = 28
msoLinkedGraphic = 29
mso3DModel = 30
msoLinked3DModel = 31
MsoShapeType = c_int  # enum

# values for enumeration 'MsoPresetCamera'
msoPresetCameraMixed = -2
msoCameraLegacyObliqueTopLeft = 1
msoCameraLegacyObliqueTop = 2
msoCameraLegacyObliqueTopRight = 3
msoCameraLegacyObliqueLeft = 4
msoCameraLegacyObliqueFront = 5
msoCameraLegacyObliqueRight = 6
msoCameraLegacyObliqueBottomLeft = 7
msoCameraLegacyObliqueBottom = 8
msoCameraLegacyObliqueBottomRight = 9
msoCameraLegacyPerspectiveTopLeft = 10
msoCameraLegacyPerspectiveTop = 11
msoCameraLegacyPerspectiveTopRight = 12
msoCameraLegacyPerspectiveLeft = 13
msoCameraLegacyPerspectiveFront = 14
msoCameraLegacyPerspectiveRight = 15
msoCameraLegacyPerspectiveBottomLeft = 16
msoCameraLegacyPerspectiveBottom = 17
msoCameraLegacyPerspectiveBottomRight = 18
msoCameraOrthographicFront = 19
msoCameraIsometricTopUp = 20
msoCameraIsometricTopDown = 21
msoCameraIsometricBottomUp = 22
msoCameraIsometricBottomDown = 23
msoCameraIsometricLeftUp = 24
msoCameraIsometricLeftDown = 25
msoCameraIsometricRightUp = 26
msoCameraIsometricRightDown = 27
msoCameraIsometricOffAxis1Left = 28
msoCameraIsometricOffAxis1Right = 29
msoCameraIsometricOffAxis1Top = 30
msoCameraIsometricOffAxis2Left = 31
msoCameraIsometricOffAxis2Right = 32
msoCameraIsometricOffAxis2Top = 33
msoCameraIsometricOffAxis3Left = 34
msoCameraIsometricOffAxis3Right = 35
msoCameraIsometricOffAxis3Bottom = 36
msoCameraIsometricOffAxis4Left = 37
msoCameraIsometricOffAxis4Right = 38
msoCameraIsometricOffAxis4Bottom = 39
msoCameraObliqueTopLeft = 40
msoCameraObliqueTop = 41
msoCameraObliqueTopRight = 42
msoCameraObliqueLeft = 43
msoCameraObliqueRight = 44
msoCameraObliqueBottomLeft = 45
msoCameraObliqueBottom = 46
msoCameraObliqueBottomRight = 47
msoCameraPerspectiveFront = 48
msoCameraPerspectiveLeft = 49
msoCameraPerspectiveRight = 50
msoCameraPerspectiveAbove = 51
msoCameraPerspectiveBelow = 52
msoCameraPerspectiveAboveLeftFacing = 53
msoCameraPerspectiveAboveRightFacing = 54
msoCameraPerspectiveContrastingLeftFacing = 55
msoCameraPerspectiveContrastingRightFacing = 56
msoCameraPerspectiveHeroicLeftFacing = 57
msoCameraPerspectiveHeroicRightFacing = 58
msoCameraPerspectiveHeroicExtremeLeftFacing = 59
msoCameraPerspectiveHeroicExtremeRightFacing = 60
msoCameraPerspectiveRelaxed = 61
msoCameraPerspectiveRelaxedModerately = 62
MsoPresetCamera = c_int  # enum

# values for enumeration 'MsoLightRigType'
msoLightRigMixed = -2
msoLightRigLegacyFlat1 = 1
msoLightRigLegacyFlat2 = 2
msoLightRigLegacyFlat3 = 3
msoLightRigLegacyFlat4 = 4
msoLightRigLegacyNormal1 = 5
msoLightRigLegacyNormal2 = 6
msoLightRigLegacyNormal3 = 7
msoLightRigLegacyNormal4 = 8
msoLightRigLegacyHarsh1 = 9
msoLightRigLegacyHarsh2 = 10
msoLightRigLegacyHarsh3 = 11
msoLightRigLegacyHarsh4 = 12
msoLightRigThreePoint = 13
msoLightRigBalanced = 14
msoLightRigSoft = 15
msoLightRigHarsh = 16
msoLightRigFlood = 17
msoLightRigContrasting = 18
msoLightRigMorning = 19
msoLightRigSunrise = 20
msoLightRigSunset = 21
msoLightRigChilly = 22
msoLightRigFreezing = 23
msoLightRigFlat = 24
msoLightRigTwoPoint = 25
msoLightRigGlow = 26
msoLightRigBrightRoom = 27
MsoLightRigType = c_int  # enum

# values for enumeration 'MsoBevelType'
msoBevelTypeMixed = -2
msoBevelNone = 1
msoBevelRelaxedInset = 2
msoBevelCircle = 3
msoBevelSlope = 4
msoBevelCross = 5
msoBevelAngle = 6
msoBevelSoftRound = 7
msoBevelConvex = 8
msoBevelCoolSlant = 9
msoBevelDivot = 10
msoBevelRiblet = 11
msoBevelHardEdge = 12
msoBevelArtDeco = 13
MsoBevelType = c_int  # enum

# values for enumeration 'MsoComboStyle'
msoComboNormal = 0
msoComboLabel = 1
MsoComboStyle = c_int  # enum

# values for enumeration 'MsoPickerField'
msoPickerFieldUnknown = 0
msoPickerFieldDateTime = 1
msoPickerFieldNumber = 2
msoPickerFieldText = 3
msoPickerFieldUser = 4
msoPickerFieldMax = 5
MsoPickerField = c_int  # enum

# values for enumeration 'MsoOLEMenuGroup'
msoOLEMenuGroupNone = -1
msoOLEMenuGroupFile = 0
msoOLEMenuGroupEdit = 1
msoOLEMenuGroupContainer = 2
msoOLEMenuGroupObject = 3
msoOLEMenuGroupWindow = 4
msoOLEMenuGroupHelp = 5
MsoOLEMenuGroup = c_int  # enum

# values for enumeration 'MsoMenuAnimation'
msoMenuAnimationNone = 0
msoMenuAnimationRandom = 1
msoMenuAnimationUnfold = 2
msoMenuAnimationSlide = 3
MsoMenuAnimation = c_int  # enum

# values for enumeration 'MsoThemeColorIndex'
msoThemeColorMixed = -2
msoNotThemeColor = 0
msoThemeColorDark1 = 1
msoThemeColorLight1 = 2
msoThemeColorDark2 = 3
msoThemeColorLight2 = 4
msoThemeColorAccent1 = 5
msoThemeColorAccent2 = 6
msoThemeColorAccent3 = 7
msoThemeColorAccent4 = 8
msoThemeColorAccent5 = 9
msoThemeColorAccent6 = 10
msoThemeColorHyperlink = 11
msoThemeColorFollowedHyperlink = 12
msoThemeColorText1 = 13
msoThemeColorBackground1 = 14
msoThemeColorText2 = 15
msoThemeColorBackground2 = 16
MsoThemeColorIndex = c_int  # enum

# values for enumeration 'MsoBarRow'
msoBarRowFirst = 0
msoBarRowLast = -1
MsoBarRow = c_int  # enum

# values for enumeration 'XlTickLabelOrientation'
xlTickLabelOrientationAutomatic = -4105
xlTickLabelOrientationDownward = -4170
xlTickLabelOrientationHorizontal = -4128
xlTickLabelOrientationUpward = -4171
xlTickLabelOrientationVertical = -4166
XlTickLabelOrientation = c_int  # enum

# values for enumeration 'MsoSharedWorkspaceTaskPriority'
msoSharedWorkspaceTaskPriorityHigh = 1
msoSharedWorkspaceTaskPriorityNormal = 2
msoSharedWorkspaceTaskPriorityLow = 3
MsoSharedWorkspaceTaskPriority = c_int  # enum

# values for enumeration 'MsoSyncConflictResolutionType'
msoSyncConflictClientWins = 0
msoSyncConflictServerWins = 1
msoSyncConflictMerge = 2
MsoSyncConflictResolutionType = c_int  # enum

# values for enumeration 'MsoReflectionType'
msoReflectionTypeMixed = -2
msoReflectionTypeNone = 0
msoReflectionType1 = 1
msoReflectionType2 = 2
msoReflectionType3 = 3
msoReflectionType4 = 4
msoReflectionType5 = 5
msoReflectionType6 = 6
msoReflectionType7 = 7
msoReflectionType8 = 8
msoReflectionType9 = 9
MsoReflectionType = c_int  # enum

# values for enumeration 'MsoCTPDockPositionRestrict'
msoCTPDockPositionRestrictNone = 0
msoCTPDockPositionRestrictNoChange = 1
msoCTPDockPositionRestrictNoHorizontal = 2
msoCTPDockPositionRestrictNoVertical = 3
MsoCTPDockPositionRestrict = c_int  # enum

# values for enumeration 'MsoFileNewSection'
msoOpenDocument = 0
msoNew = 1
msoNewfromExistingFile = 2
msoNewfromTemplate = 3
msoBottomSection = 4
MsoFileNewSection = c_int  # enum

# values for enumeration 'XlLegendPosition'
xlLegendPositionBottom = -4107
xlLegendPositionCorner = 2
xlLegendPositionLeft = -4131
xlLegendPositionRight = -4152
xlLegendPositionTop = -4160
xlLegendPositionCustom = -4161
XlLegendPosition = c_int  # enum

# values for enumeration 'MsoShapeStyleIndex'
msoShapeStyleMixed = -2
msoShapeStyleNotAPreset = 0
msoShapeStylePreset1 = 1
msoShapeStylePreset2 = 2
msoShapeStylePreset3 = 3
msoShapeStylePreset4 = 4
msoShapeStylePreset5 = 5
msoShapeStylePreset6 = 6
msoShapeStylePreset7 = 7
msoShapeStylePreset8 = 8
msoShapeStylePreset9 = 9
msoShapeStylePreset10 = 10
msoShapeStylePreset11 = 11
msoShapeStylePreset12 = 12
msoShapeStylePreset13 = 13
msoShapeStylePreset14 = 14
msoShapeStylePreset15 = 15
msoShapeStylePreset16 = 16
msoShapeStylePreset17 = 17
msoShapeStylePreset18 = 18
msoShapeStylePreset19 = 19
msoShapeStylePreset20 = 20
msoShapeStylePreset21 = 21
msoShapeStylePreset22 = 22
msoShapeStylePreset23 = 23
msoShapeStylePreset24 = 24
msoShapeStylePreset25 = 25
msoShapeStylePreset26 = 26
msoShapeStylePreset27 = 27
msoShapeStylePreset28 = 28
msoShapeStylePreset29 = 29
msoShapeStylePreset30 = 30
msoShapeStylePreset31 = 31
msoShapeStylePreset32 = 32
msoShapeStylePreset33 = 33
msoShapeStylePreset34 = 34
msoShapeStylePreset35 = 35
msoShapeStylePreset36 = 36
msoShapeStylePreset37 = 37
msoShapeStylePreset38 = 38
msoShapeStylePreset39 = 39
msoShapeStylePreset40 = 40
msoShapeStylePreset41 = 41
msoShapeStylePreset42 = 42
msoShapeStylePreset43 = 43
msoShapeStylePreset44 = 44
msoShapeStylePreset45 = 45
msoShapeStylePreset46 = 46
msoShapeStylePreset47 = 47
msoShapeStylePreset48 = 48
msoShapeStylePreset49 = 49
msoShapeStylePreset50 = 50
msoShapeStylePreset51 = 51
msoShapeStylePreset52 = 52
msoShapeStylePreset53 = 53
msoShapeStylePreset54 = 54
msoShapeStylePreset55 = 55
msoShapeStylePreset56 = 56
msoShapeStylePreset57 = 57
msoShapeStylePreset58 = 58
msoShapeStylePreset59 = 59
msoShapeStylePreset60 = 60
msoShapeStylePreset61 = 61
msoShapeStylePreset62 = 62
msoShapeStylePreset63 = 63
msoShapeStylePreset64 = 64
msoShapeStylePreset65 = 65
msoShapeStylePreset66 = 66
msoShapeStylePreset67 = 67
msoShapeStylePreset68 = 68
msoShapeStylePreset69 = 69
msoShapeStylePreset70 = 70
msoShapeStylePreset71 = 71
msoShapeStylePreset72 = 72
msoShapeStylePreset73 = 73
msoShapeStylePreset74 = 74
msoShapeStylePreset75 = 75
msoShapeStylePreset76 = 76
msoShapeStylePreset77 = 77
msoLineStylePreset1 = 10001
msoLineStylePreset2 = 10002
msoLineStylePreset3 = 10003
msoLineStylePreset4 = 10004
msoLineStylePreset5 = 10005
msoLineStylePreset6 = 10006
msoLineStylePreset7 = 10007
msoLineStylePreset8 = 10008
msoLineStylePreset9 = 10009
msoLineStylePreset10 = 10010
msoLineStylePreset11 = 10011
msoLineStylePreset12 = 10012
msoLineStylePreset13 = 10013
msoLineStylePreset14 = 10014
msoLineStylePreset15 = 10015
msoLineStylePreset16 = 10016
msoLineStylePreset17 = 10017
msoLineStylePreset18 = 10018
msoLineStylePreset19 = 10019
msoLineStylePreset20 = 10020
msoLineStylePreset21 = 10021
msoLineStylePreset22 = 10022
msoLineStylePreset23 = 10023
msoLineStylePreset24 = 10024
msoLineStylePreset25 = 10025
msoLineStylePreset26 = 10026
msoLineStylePreset27 = 10027
msoLineStylePreset28 = 10028
msoLineStylePreset29 = 10029
msoLineStylePreset30 = 10030
msoLineStylePreset31 = 10031
msoLineStylePreset32 = 10032
msoLineStylePreset33 = 10033
msoLineStylePreset34 = 10034
msoLineStylePreset35 = 10035
msoLineStylePreset36 = 10036
msoLineStylePreset37 = 10037
msoLineStylePreset38 = 10038
msoLineStylePreset39 = 10039
msoLineStylePreset40 = 10040
msoLineStylePreset41 = 10041
msoLineStylePreset42 = 10042
MsoShapeStyleIndex = c_int  # enum

# values for enumeration 'XlPivotFieldOrientation'
xlColumnField = 2
xlDataField = 4
xlHidden = 0
xlPageField = 3
xlRowField = 1
XlPivotFieldOrientation = c_int  # enum

# values for enumeration 'MsoCTPDockPosition'
msoCTPDockPositionLeft = 0
msoCTPDockPositionTop = 1
msoCTPDockPositionRight = 2
msoCTPDockPositionBottom = 3
msoCTPDockPositionFloating = 4
MsoCTPDockPosition = c_int  # enum

# values for enumeration 'MsoSyncVersionType'
msoSyncVersionLastViewed = 0
msoSyncVersionServer = 1
MsoSyncVersionType = c_int  # enum

# values for enumeration 'XlReadingOrder'
xlContext = -5002
xlLTR = -5003
xlRTL = -5004
XlReadingOrder = c_int  # enum

# values for enumeration 'MsoFileNewAction'
msoEditFile = 0
msoCreateNewFile = 1
msoOpenFile = 2
MsoFileNewAction = c_int  # enum

# values for enumeration 'MsoSyncCompareType'
msoSyncCompareAndMerge = 0
msoSyncCompareSideBySide = 1
MsoSyncCompareType = c_int  # enum

# values for enumeration 'XlHAlign'
xlHAlignCenter = -4108
xlHAlignCenterAcrossSelection = 7
xlHAlignDistributed = -4117
xlHAlignFill = 5
xlHAlignGeneral = 1
xlHAlignJustify = -4130
xlHAlignLeft = -4131
xlHAlignRight = -4152
XlHAlign = c_int  # enum

# values for enumeration 'MsoTextCharWrap'
msoCharWrapMixed = -2
msoNoCharWrap = 0
msoStandardCharWrap = 1
msoStrictCharWrap = 2
msoCustomCharWrap = 3
MsoTextCharWrap = c_int  # enum

# values for enumeration 'XlBorderWeight'
xlHairline = 1
xlMedium = -4138
xlThick = 4
xlThin = 2
XlBorderWeight = c_int  # enum

# values for enumeration 'MsoSyncAvailableType'
msoSyncAvailableNone = 0
msoSyncAvailableOffline = 1
msoSyncAvailableAnywhere = 2
MsoSyncAvailableType = c_int  # enum

# values for enumeration 'MsoAutomationSecurity'
msoAutomationSecurityLow = 1
msoAutomationSecurityByUI = 2
msoAutomationSecurityForceDisable = 3
MsoAutomationSecurity = c_int  # enum

# values for enumeration 'MsoSyncEventType'
msoSyncEventDownloadInitiated = 0
msoSyncEventDownloadSucceeded = 1
msoSyncEventDownloadFailed = 2
msoSyncEventUploadInitiated = 3
msoSyncEventUploadSucceeded = 4
msoSyncEventUploadFailed = 5
msoSyncEventDownloadNoChange = 6
msoSyncEventOffline = 7
MsoSyncEventType = c_int  # enum

# values for enumeration 'XlUnderlineStyle'
xlUnderlineStyleDouble = -4119
xlUnderlineStyleDoubleAccounting = 5
xlUnderlineStyleNone = -4142
xlUnderlineStyleSingle = 2
xlUnderlineStyleSingleAccounting = 4
XlUnderlineStyle = c_int  # enum

# values for enumeration 'XlVAlign'
xlVAlignBottom = -4107
xlVAlignCenter = -4108
xlVAlignDistributed = -4117
xlVAlignJustify = -4130
xlVAlignTop = -4160
XlVAlign = c_int  # enum

# values for enumeration 'MsoMetaPropertyType'
msoMetaPropertyTypeUnknown = 0
msoMetaPropertyTypeBoolean = 1
msoMetaPropertyTypeChoice = 2
msoMetaPropertyTypeCalculated = 3
msoMetaPropertyTypeComputed = 4
msoMetaPropertyTypeCurrency = 5
msoMetaPropertyTypeDateTime = 6
msoMetaPropertyTypeFillInChoice = 7
msoMetaPropertyTypeGuid = 8
msoMetaPropertyTypeInteger = 9
msoMetaPropertyTypeLookup = 10
msoMetaPropertyTypeMultiChoiceLookup = 11
msoMetaPropertyTypeMultiChoice = 12
msoMetaPropertyTypeMultiChoiceFillIn = 13
msoMetaPropertyTypeNote = 14
msoMetaPropertyTypeNumber = 15
msoMetaPropertyTypeText = 16
msoMetaPropertyTypeUrl = 17
msoMetaPropertyTypeUser = 18
msoMetaPropertyTypeUserMulti = 19
msoMetaPropertyTypeBusinessData = 20
msoMetaPropertyTypeBusinessDataSecondary = 21
msoMetaPropertyTypeMax = 22
MsoMetaPropertyType = c_int  # enum

# values for enumeration 'MsoSyncErrorType'
msoSyncErrorNone = 0
msoSyncErrorUnauthorizedUser = 1
msoSyncErrorCouldNotConnect = 2
msoSyncErrorOutOfSpace = 3
msoSyncErrorFileNotFound = 4
msoSyncErrorFileTooLarge = 5
msoSyncErrorFileInUse = 6
msoSyncErrorVirusUpload = 7
msoSyncErrorVirusDownload = 8
msoSyncErrorUnknownUpload = 9
msoSyncErrorUnknownDownload = 10
msoSyncErrorCouldNotOpen = 11
msoSyncErrorCouldNotUpdate = 12
msoSyncErrorCouldNotCompare = 13
msoSyncErrorCouldNotResolve = 14
msoSyncErrorNoNetwork = 15
msoSyncErrorUnknown = 16
MsoSyncErrorType = c_int  # enum

# values for enumeration 'MsoTabStopType'
msoTabStopMixed = -2
msoTabStopLeft = 1
msoTabStopCenter = 2
msoTabStopRight = 3
msoTabStopDecimal = 4
MsoTabStopType = c_int  # enum

# values for enumeration 'MsoLanguageIDHidden'
msoLanguageIDChineseHongKong = 3076
msoLanguageIDChineseMacao = 5124
msoLanguageIDEnglishTrinidad = 11273
MsoLanguageIDHidden = c_int  # enum

# values for enumeration 'MsoGradientStyle'
msoGradientMixed = -2
msoGradientHorizontal = 1
msoGradientVertical = 2
msoGradientDiagonalUp = 3
msoGradientDiagonalDown = 4
msoGradientFromCorner = 5
msoGradientFromTitle = 6
msoGradientFromCenter = 7
MsoGradientStyle = c_int  # enum

# values for enumeration 'MsoPresetTexture'
msoPresetTextureMixed = -2
msoTexturePapyrus = 1
msoTextureCanvas = 2
msoTextureDenim = 3
msoTextureWovenMat = 4
msoTextureWaterDroplets = 5
msoTexturePaperBag = 6
msoTextureFishFossil = 7
msoTextureSand = 8
msoTextureGreenMarble = 9
msoTextureWhiteMarble = 10
msoTextureBrownMarble = 11
msoTextureGranite = 12
msoTextureNewsprint = 13
msoTextureRecycledPaper = 14
msoTextureParchment = 15
msoTextureStationery = 16
msoTextureBlueTissuePaper = 17
msoTexturePinkTissuePaper = 18
msoTexturePurpleMesh = 19
msoTextureBouquet = 20
msoTextureCork = 21
msoTextureWalnut = 22
msoTextureOak = 23
msoTextureMediumWood = 24
MsoPresetTexture = c_int  # enum

# values for enumeration 'MsoGradientColorType'
msoGradientColorMixed = -2
msoGradientOneColor = 1
msoGradientTwoColors = 2
msoGradientPresetColors = 3
msoGradientMultiColor = 4
MsoGradientColorType = c_int  # enum

# values for enumeration 'MsoTextureType'
msoTextureTypeMixed = -2
msoTexturePreset = 1
msoTextureUserDefined = 2
MsoTextureType = c_int  # enum

# values for enumeration 'MsoTextureAlignment'
msoTextureAlignmentMixed = -2
msoTextureTopLeft = 0
msoTextureTop = 1
msoTextureTopRight = 2
msoTextureLeft = 3
msoTextureCenter = 4
msoTextureRight = 5
msoTextureBottomLeft = 6
msoTextureBottom = 7
msoTextureBottomRight = 8
MsoTextureAlignment = c_int  # enum

# values for enumeration 'MsoSyncStatusType'
msoSyncStatusNoSharedWorkspace = 0
msoSyncStatusNotRoaming = 0
msoSyncStatusLatest = 1
msoSyncStatusNewerAvailable = 2
msoSyncStatusLocalChanges = 3
msoSyncStatusConflict = 4
msoSyncStatusSuspended = 5
msoSyncStatusError = 6
MsoSyncStatusType = c_int  # enum

# values for enumeration 'MsoHTMLProjectOpen'
msoHTMLProjectOpenSourceView = 1
msoHTMLProjectOpenTextView = 2
MsoHTMLProjectOpen = c_int  # enum

# values for enumeration 'MsoCharacterSet'
msoCharacterSetArabic = 1
msoCharacterSetCyrillic = 2
msoCharacterSetEnglishWesternEuropeanOtherLatinScript = 3
msoCharacterSetGreek = 4
msoCharacterSetHebrew = 5
msoCharacterSetJapanese = 6
msoCharacterSetKorean = 7
msoCharacterSetMultilingualUnicode = 8
msoCharacterSetSimplifiedChinese = 9
msoCharacterSetThai = 10
msoCharacterSetTraditionalChinese = 11
msoCharacterSetVietnamese = 12
MsoCharacterSet = c_int  # enum

# values for enumeration 'MsoClipboardFormat'
msoClipboardFormatMixed = -2
msoClipboardFormatNative = 1
msoClipboardFormatHTML = 2
msoClipboardFormatRTF = 3
msoClipboardFormatPlainText = 4
MsoClipboardFormat = c_int  # enum

# values for enumeration 'MsoTextChangeCase'
msoCaseSentence = 1
msoCaseLower = 2
msoCaseUpper = 3
msoCaseTitle = 4
msoCaseToggle = 5
MsoTextChangeCase = c_int  # enum

# values for enumeration 'MsoFileFindOptions'
msoOptionsNew = 1
msoOptionsAdd = 2
msoOptionsWithin = 3
MsoFileFindOptions = c_int  # enum

# values for enumeration 'MsoFileFindView'
msoViewFileInfo = 1
msoViewPreview = 2
msoViewSummaryInfo = 3
MsoFileFindView = c_int  # enum

# values for enumeration 'MsoFileFindSortBy'
msoFileFindSortbyAuthor = 1
msoFileFindSortbyDateCreated = 2
msoFileFindSortbyLastSavedBy = 3
msoFileFindSortbyDateSaved = 4
msoFileFindSortbyFileName = 5
msoFileFindSortbySize = 6
msoFileFindSortbyTitle = 7
MsoFileFindSortBy = c_int  # enum

# values for enumeration 'MsoThemeColorSchemeIndex'
msoThemeDark1 = 1
msoThemeLight1 = 2
msoThemeDark2 = 3
msoThemeLight2 = 4
msoThemeAccent1 = 5
msoThemeAccent2 = 6
msoThemeAccent3 = 7
msoThemeAccent4 = 8
msoThemeAccent5 = 9
msoThemeAccent6 = 10
msoThemeHyperlink = 11
msoThemeFollowedHyperlink = 12
MsoThemeColorSchemeIndex = c_int  # enum

# values for enumeration 'MailFormat'
mfPlainText = 1
mfHTML = 2
mfRTF = 3
MailFormat = c_int  # enum

# values for enumeration 'MsoScreenSize'
msoScreenSize544x376 = 0
msoScreenSize640x480 = 1
msoScreenSize720x512 = 2
msoScreenSize800x600 = 3
msoScreenSize1024x768 = 4
msoScreenSize1152x882 = 5
msoScreenSize1152x900 = 6
msoScreenSize1280x1024 = 7
msoScreenSize1600x1200 = 8
msoScreenSize1800x1440 = 9
msoScreenSize1920x1200 = 10
MsoScreenSize = c_int  # enum

# values for enumeration 'MsoSignatureSubset'
msoSignatureSubsetSignaturesAllSigs = 0
msoSignatureSubsetSignaturesNonVisible = 1
msoSignatureSubsetSignatureLines = 2
msoSignatureSubsetSignatureLinesSigned = 3
msoSignatureSubsetSignatureLinesUnsigned = 4
msoSignatureSubsetAll = 5
MsoSignatureSubset = c_int  # enum

# values for enumeration 'MsoAutoSize'
msoAutoSizeMixed = -2
msoAutoSizeNone = 0
msoAutoSizeShapeToFitText = 1
msoAutoSizeTextToFitShape = 2
MsoAutoSize = c_int  # enum

# values for enumeration 'MsoTextTabAlign'
msoTabAlignMixed = -2
msoTabAlignLeft = 0
msoTabAlignCenter = 1
msoTabAlignRight = 2
msoTabAlignDecimal = 3
MsoTextTabAlign = c_int  # enum

# values for enumeration 'XlChartItem'
xlDataLabel = 0
xlChartArea = 2
xlSeries = 3
xlChartTitle = 4
xlWalls = 5
xlCorners = 6
xlDataTable = 7
xlTrendline = 8
xlErrorBars = 9
xlXErrorBars = 10
xlYErrorBars = 11
xlLegendEntry = 12
xlLegendKey = 13
xlShape = 14
xlMajorGridlines = 15
xlMinorGridlines = 16
xlAxisTitle = 17
xlUpBars = 18
xlPlotArea = 19
xlDownBars = 20
xlAxis = 21
xlSeriesLines = 22
xlFloor = 23
xlLegend = 24
xlHiLoLines = 25
xlDropLines = 26
xlRadarAxisLabels = 27
xlNothing = 28
xlLeaderLines = 29
xlDisplayUnitLabel = 30
xlPivotChartFieldButton = 31
xlPivotChartDropZone = 32
xlPivotChartExpandEntireFieldButton = 33
xlPivotChartCollapseEntireFieldButton = 34
XlChartItem = c_int  # enum

# values for enumeration 'MsoTextFontAlign'
msoFontAlignMixed = -2
msoFontAlignAuto = 0
msoFontAlignTop = 1
msoFontAlignCenter = 2
msoFontAlignBaseline = 3
msoFontAlignBottom = 4
MsoTextFontAlign = c_int  # enum

# values for enumeration 'MsoEncoding'
msoEncodingThai = 874
msoEncodingJapaneseShiftJIS = 932
msoEncodingSimplifiedChineseGBK = 936
msoEncodingKorean = 949
msoEncodingTraditionalChineseBig5 = 950
msoEncodingUnicodeLittleEndian = 1200
msoEncodingUnicodeBigEndian = 1201
msoEncodingCentralEuropean = 1250
msoEncodingCyrillic = 1251
msoEncodingWestern = 1252
msoEncodingGreek = 1253
msoEncodingTurkish = 1254
msoEncodingHebrew = 1255
msoEncodingArabic = 1256
msoEncodingBaltic = 1257
msoEncodingVietnamese = 1258
msoEncodingAutoDetect = 50001
msoEncodingJapaneseAutoDetect = 50932
msoEncodingSimplifiedChineseAutoDetect = 50936
msoEncodingKoreanAutoDetect = 50949
msoEncodingTraditionalChineseAutoDetect = 50950
msoEncodingCyrillicAutoDetect = 51251
msoEncodingGreekAutoDetect = 51253
msoEncodingArabicAutoDetect = 51256
msoEncodingISO88591Latin1 = 28591
msoEncodingISO88592CentralEurope = 28592
msoEncodingISO88593Latin3 = 28593
msoEncodingISO88594Baltic = 28594
msoEncodingISO88595Cyrillic = 28595
msoEncodingISO88596Arabic = 28596
msoEncodingISO88597Greek = 28597
msoEncodingISO88598Hebrew = 28598
msoEncodingISO88599Turkish = 28599
msoEncodingISO885915Latin9 = 28605
msoEncodingISO88598HebrewLogical = 38598
msoEncodingISO2022JPNoHalfwidthKatakana = 50220
msoEncodingISO2022JPJISX02021984 = 50221
msoEncodingISO2022JPJISX02011989 = 50222
msoEncodingISO2022KR = 50225
msoEncodingISO2022CNTraditionalChinese = 50227
msoEncodingISO2022CNSimplifiedChinese = 50229
msoEncodingMacRoman = 10000
msoEncodingMacJapanese = 10001
msoEncodingMacTraditionalChineseBig5 = 10002
msoEncodingMacKorean = 10003
msoEncodingMacArabic = 10004
msoEncodingMacHebrew = 10005
msoEncodingMacGreek1 = 10006
msoEncodingMacCyrillic = 10007
msoEncodingMacSimplifiedChineseGB2312 = 10008
msoEncodingMacRomania = 10010
msoEncodingMacUkraine = 10017
msoEncodingMacLatin2 = 10029
msoEncodingMacIcelandic = 10079
msoEncodingMacTurkish = 10081
msoEncodingMacCroatia = 10082
msoEncodingEBCDICUSCanada = 37
msoEncodingEBCDICInternational = 500
msoEncodingEBCDICMultilingualROECELatin2 = 870
msoEncodingEBCDICGreekModern = 875
msoEncodingEBCDICTurkishLatin5 = 1026
msoEncodingEBCDICGermany = 20273
msoEncodingEBCDICDenmarkNorway = 20277
msoEncodingEBCDICFinlandSweden = 20278
msoEncodingEBCDICItaly = 20280
msoEncodingEBCDICLatinAmericaSpain = 20284
msoEncodingEBCDICUnitedKingdom = 20285
msoEncodingEBCDICJapaneseKatakanaExtended = 20290
msoEncodingEBCDICFrance = 20297
msoEncodingEBCDICArabic = 20420
msoEncodingEBCDICGreek = 20423
msoEncodingEBCDICHebrew = 20424
msoEncodingEBCDICKoreanExtended = 20833
msoEncodingEBCDICThai = 20838
msoEncodingEBCDICIcelandic = 20871
msoEncodingEBCDICTurkish = 20905
msoEncodingEBCDICRussian = 20880
msoEncodingEBCDICSerbianBulgarian = 21025
msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese = 50930
msoEncodingEBCDICUSCanadaAndJapanese = 50931
msoEncodingEBCDICKoreanExtendedAndKorean = 50933
msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese = 50935
msoEncodingEBCDICUSCanadaAndTraditionalChinese = 50937
msoEncodingEBCDICJapaneseLatinExtendedAndJapanese = 50939
msoEncodingOEMUnitedStates = 437
msoEncodingOEMGreek437G = 737
msoEncodingOEMBaltic = 775
msoEncodingOEMMultilingualLatinI = 850
msoEncodingOEMMultilingualLatinII = 852
msoEncodingOEMCyrillic = 855
msoEncodingOEMTurkish = 857
msoEncodingOEMPortuguese = 860
msoEncodingOEMIcelandic = 861
msoEncodingOEMHebrew = 862
msoEncodingOEMCanadianFrench = 863
msoEncodingOEMArabic = 864
msoEncodingOEMNordic = 865
msoEncodingOEMCyrillicII = 866
msoEncodingOEMModernGreek = 869
msoEncodingEUCJapanese = 51932
msoEncodingEUCChineseSimplifiedChinese = 51936
msoEncodingEUCKorean = 51949
msoEncodingEUCTaiwaneseTraditionalChinese = 51950
msoEncodingISCIIDevanagari = 57002
msoEncodingISCIIBengali = 57003
msoEncodingISCIITamil = 57004
msoEncodingISCIITelugu = 57005
msoEncodingISCIIAssamese = 57006
msoEncodingISCIIOriya = 57007
msoEncodingISCIIKannada = 57008
msoEncodingISCIIMalayalam = 57009
msoEncodingISCIIGujarati = 57010
msoEncodingISCIIPunjabi = 57011
msoEncodingArabicASMO = 708
msoEncodingArabicTransparentASMO = 720
msoEncodingKoreanJohab = 1361
msoEncodingTaiwanCNS = 20000
msoEncodingTaiwanTCA = 20001
msoEncodingTaiwanEten = 20002
msoEncodingTaiwanIBM5550 = 20003
msoEncodingTaiwanTeleText = 20004
msoEncodingTaiwanWang = 20005
msoEncodingIA5IRV = 20105
msoEncodingIA5German = 20106
msoEncodingIA5Swedish = 20107
msoEncodingIA5Norwegian = 20108
msoEncodingUSASCII = 20127
msoEncodingT61 = 20261
msoEncodingISO6937NonSpacingAccent = 20269
msoEncodingKOI8R = 20866
msoEncodingExtAlphaLowercase = 21027
msoEncodingKOI8U = 21866
msoEncodingEuropa3 = 29001
msoEncodingHZGBSimplifiedChinese = 52936
msoEncodingSimplifiedChineseGB18030 = 54936
msoEncodingUTF7 = 65000
msoEncodingUTF8 = 65001
MsoEncoding = c_int  # enum

# values for enumeration 'MsoDateTimeFormat'
msoDateTimeFormatMixed = -2
msoDateTimeMdyy = 1
msoDateTimeddddMMMMddyyyy = 2
msoDateTimedMMMMyyyy = 3
msoDateTimeMMMMdyyyy = 4
msoDateTimedMMMyy = 5
msoDateTimeMMMMyy = 6
msoDateTimeMMyy = 7
msoDateTimeMMddyyHmm = 8
msoDateTimeMMddyyhmmAMPM = 9
msoDateTimeHmm = 10
msoDateTimeHmmss = 11
msoDateTimehmmAMPM = 12
msoDateTimehmmssAMPM = 13
msoDateTimeFigureOut = 14
MsoDateTimeFormat = c_int  # enum

# values for enumeration 'MsoHTMLProjectState'
msoHTMLProjectStateDocumentLocked = 1
msoHTMLProjectStateProjectLocked = 2
msoHTMLProjectStateDocumentProjectUnlocked = 3
MsoHTMLProjectState = c_int  # enum

# values for enumeration 'MsoAlertIconType'
msoAlertIconNoIcon = 0
msoAlertIconCritical = 1
msoAlertIconQuery = 2
msoAlertIconWarning = 3
msoAlertIconInfo = 4
MsoAlertIconType = c_int  # enum

# values for enumeration 'MsoMoveRow'
msoMoveRowFirst = -4
msoMoveRowPrev = -3
msoMoveRowNext = -2
msoMoveRowNbr = -1
MsoMoveRow = c_int  # enum

# values for enumeration 'EncryptionProviderDetail'
encprovdetUrl = 0
encprovdetAlgorithm = 1
encprovdetBlockCipher = 2
encprovdetCipherBlockSize = 3
encprovdetCipherMode = 4
EncryptionProviderDetail = c_int  # enum

# values for enumeration 'MsoAlertButtonType'
msoAlertButtonOK = 0
msoAlertButtonOKCancel = 1
msoAlertButtonAbortRetryIgnore = 2
msoAlertButtonYesNoCancel = 3
msoAlertButtonYesNo = 4
msoAlertButtonRetryCancel = 5
msoAlertButtonYesAllNoCancel = 6
MsoAlertButtonType = c_int  # enum

# values for enumeration 'MsoOrgChartOrientation'
msoOrgChartOrientationMixed = -2
msoOrgChartOrientationVertical = 1
MsoOrgChartOrientation = c_int  # enum

# values for enumeration 'MsoTargetBrowser'
msoTargetBrowserV3 = 0
msoTargetBrowserV4 = 1
msoTargetBrowserIE4 = 2
msoTargetBrowserIE5 = 3
msoTargetBrowserIE6 = 4
MsoTargetBrowser = c_int  # enum

# values for enumeration 'MsoMergeCmd'
msoMergeUnion = 1
msoMergeCombine = 2
msoMergeIntersect = 3
msoMergeSubtract = 4
msoMergeFragment = 5
MsoMergeCmd = c_int  # enum

# values for enumeration 'MsoAlertDefaultType'
msoAlertDefaultFirst = 0
msoAlertDefaultSecond = 1
msoAlertDefaultThird = 2
msoAlertDefaultFourth = 3
msoAlertDefaultFifth = 4
MsoAlertDefaultType = c_int  # enum

# values for enumeration 'XlConstants'
xlAutomatic = -4105
xlCombination = -4111
xlCustom = -4114
xlBar = 2
xlColumn = 3
xl3DBar = -4099
xl3DSurface = -4103
xlDefaultAutoFormat = -1
xlNone = -4142
xlAbove = 0
xlBelow = 1
xlBoth = 1
xlBottom = -4107
xlCenter = -4108
xlChecker = 9
xlCircle = 8
xlCorner = 2
xlCrissCross = 16
xlCross = 4
xlDiamond = 2
xlDistributed = -4117
xlFill = 5
xlFixedValue = 1
xlGeneral = 1
xlGray16 = 17
xlGray25 = -4124
xlGray50 = -4125
xlGray75 = -4126
xlGray8 = 18
xlGrid = 15
xlHigh = -4127
xlInside = 2
xlJustify = -4130
xlLeft = -4131
xlLightDown = 13
xlLightHorizontal = 11
xlLightUp = 14
xlLightVertical = 12
xlLow = -4134
xlMaximum = 2
xlMinimum = 4
xlMinusValues = 3
xlNextToAxis = 4
xlOpaque = 3
xlOutside = 3
xlPercent = 2
xlPlus = 9
xlPlusValues = 2
xlRight = -4152
xlScale = 3
xlSemiGray75 = 10
xlShowLabel = 4
xlShowLabelAndPercent = 5
xlShowPercent = 3
xlShowValue = 2
xlSingle = 2
xlSolid = 1
xlSquare = 1
xlStar = 5
xlStError = 4
xlTop = -4160
xlTransparent = 2
xlTriangle = 3
XlConstants = c_int  # enum

# values for enumeration 'SignatureDetail'
sigdetLocalSigningTime = 0
sigdetApplicationName = 1
sigdetApplicationVersion = 2
sigdetOfficeVersion = 3
sigdetWindowsVersion = 4
sigdetNumberOfMonitors = 5
sigdetHorizResolution = 6
sigdetVertResolution = 7
sigdetColorDepth = 8
sigdetSignedData = 9
sigdetDocPreviewImg = 10
sigdetIPFormHash = 11
sigdetIPCurrentView = 12
sigdetSignatureType = 13
sigdetHashAlgorithm = 14
sigdetShouldShowViewWarning = 15
sigdetDelSuggSigner = 16
sigdetDelSuggSignerSet = 17
sigdetDelSuggSignerLine2 = 18
sigdetDelSuggSignerLine2Set = 19
sigdetDelSuggSignerEmail = 20
sigdetDelSuggSignerEmailSet = 21
SignatureDetail = c_int  # enum

# values for enumeration 'CertificateDetail'
certdetAvailable = 0
certdetSubject = 1
certdetIssuer = 2
certdetExpirationDate = 3
certdetThumbprint = 4
CertificateDetail = c_int  # enum

# values for enumeration 'MsoSharedWorkspaceTaskStatus'
msoSharedWorkspaceTaskStatusNotStarted = 1
msoSharedWorkspaceTaskStatusInProgress = 2
msoSharedWorkspaceTaskStatusCompleted = 3
msoSharedWorkspaceTaskStatusDeferred = 4
msoSharedWorkspaceTaskStatusWaiting = 5
MsoSharedWorkspaceTaskStatus = c_int  # enum

# values for enumeration 'MsoAlertCancelType'
msoAlertCancelDefault = -1
msoAlertCancelFirst = 0
msoAlertCancelSecond = 1
msoAlertCancelThird = 2
msoAlertCancelFourth = 3
msoAlertCancelFifth = 4
MsoAlertCancelType = c_int  # enum

# values for enumeration 'MsoFontLanguageIndex'
msoThemeLatin = 1
msoThemeComplexScript = 2
msoThemeEastAsian = 3
MsoFontLanguageIndex = c_int  # enum

# values for enumeration 'MsoPermission'
msoPermissionView = 1
msoPermissionRead = 1
msoPermissionEdit = 2
msoPermissionSave = 4
msoPermissionExtract = 8
msoPermissionChange = 15
msoPermissionPrint = 16
msoPermissionObjModel = 32
msoPermissionFullControl = 64
msoPermissionAllCommon = 127
MsoPermission = c_int  # enum

# values for enumeration 'RibbonControlSize'
RibbonControlSizeRegular = 0
RibbonControlSizeLarge = 1
RibbonControlSize = c_int  # enum

# values for enumeration 'MsoFilterConjunction'
msoFilterConjunctionAnd = 0
msoFilterConjunctionOr = 1
MsoFilterConjunction = c_int  # enum

# values for enumeration 'MsoFileDialogView'
msoFileDialogViewList = 1
msoFileDialogViewDetails = 2
msoFileDialogViewProperties = 3
msoFileDialogViewPreview = 4
msoFileDialogViewThumbnail = 5
msoFileDialogViewLargeIcons = 6
msoFileDialogViewSmallIcons = 7
msoFileDialogViewWebView = 8
msoFileDialogViewTiles = 9
MsoFileDialogView = c_int  # enum

# values for enumeration 'MsoPathFormat'
msoPathTypeMixed = -2
msoPathTypeNone = 0
msoPathType1 = 1
msoPathType2 = 2
msoPathType3 = 3
msoPathType4 = 4
MsoPathFormat = c_int  # enum

# values for enumeration 'BackstageGroupStyle'
BackstageGroupStyleNormal = 0
BackstageGroupStyleWarning = 1
BackstageGroupStyleError = 2
BackstageGroupStyle = c_int  # enum

# values for enumeration 'MsoIodGroup'
msoIodGroupPIAs = 0
msoIodGroupVSTOR35Mgd = 1
msoIodGroupVSTOR40Mgd = 2
MsoIodGroup = c_int  # enum

# values for enumeration 'MsoBackgroundStyleIndex'
msoBackgroundStyleMixed = -2
msoBackgroundStyleNotAPreset = 0
msoBackgroundStylePreset1 = 1
msoBackgroundStylePreset2 = 2
msoBackgroundStylePreset3 = 3
msoBackgroundStylePreset4 = 4
msoBackgroundStylePreset5 = 5
msoBackgroundStylePreset6 = 6
msoBackgroundStylePreset7 = 7
msoBackgroundStylePreset8 = 8
msoBackgroundStylePreset9 = 9
msoBackgroundStylePreset10 = 10
msoBackgroundStylePreset11 = 11
msoBackgroundStylePreset12 = 12
MsoBackgroundStyleIndex = c_int  # enum

# values for enumeration 'MsoWarpFormat'
msoWarpFormatMixed = -2
msoWarpFormat1 = 0
msoWarpFormat2 = 1
msoWarpFormat3 = 2
msoWarpFormat4 = 3
msoWarpFormat5 = 4
msoWarpFormat6 = 5
msoWarpFormat7 = 6
msoWarpFormat8 = 7
msoWarpFormat9 = 8
msoWarpFormat10 = 9
msoWarpFormat11 = 10
msoWarpFormat12 = 11
msoWarpFormat13 = 12
msoWarpFormat14 = 13
msoWarpFormat15 = 14
msoWarpFormat16 = 15
msoWarpFormat17 = 16
msoWarpFormat18 = 17
msoWarpFormat19 = 18
msoWarpFormat20 = 19
msoWarpFormat21 = 20
msoWarpFormat22 = 21
msoWarpFormat23 = 22
msoWarpFormat24 = 23
msoWarpFormat25 = 24
msoWarpFormat26 = 25
msoWarpFormat27 = 26
msoWarpFormat28 = 27
msoWarpFormat29 = 28
msoWarpFormat30 = 29
msoWarpFormat31 = 30
msoWarpFormat32 = 31
msoWarpFormat33 = 32
msoWarpFormat34 = 33
msoWarpFormat35 = 34
msoWarpFormat36 = 35
msoWarpFormat37 = 36
MsoWarpFormat = c_int  # enum

# values for enumeration 'MsoFilterComparison'
msoFilterComparisonEqual = 0
msoFilterComparisonNotEqual = 1
msoFilterComparisonLessThan = 2
msoFilterComparisonGreaterThan = 3
msoFilterComparisonLessThanEqual = 4
msoFilterComparisonGreaterThanEqual = 5
msoFilterComparisonIsBlank = 6
msoFilterComparisonIsNotBlank = 7
msoFilterComparisonContains = 8
msoFilterComparisonNotContains = 9
MsoFilterComparison = c_int  # enum

# values for enumeration 'MsoFileValidationMode'
msoFileValidationDefault = 0
msoFileValidationSkip = 1
MsoFileValidationMode = c_int  # enum

# values for enumeration 'MsoFileDialogType'
msoFileDialogOpen = 1
msoFileDialogSaveAs = 2
msoFileDialogFilePicker = 3
msoFileDialogFolderPicker = 4
MsoFileDialogType = c_int  # enum

# values for enumeration 'MsoPictureEffectType'
msoEffectNone = 0
msoEffectBackgroundRemoval = 1
msoEffectBlur = 2
msoEffectBrightnessContrast = 3
msoEffectCement = 4
msoEffectCrisscrossEtching = 5
msoEffectChalkSketch = 6
msoEffectColorTemperature = 7
msoEffectCutout = 8
msoEffectFilmGrain = 9
msoEffectGlass = 10
msoEffectGlowDiffused = 11
msoEffectGlowEdges = 12
msoEffectLightScreen = 13
msoEffectLineDrawing = 14
msoEffectMarker = 15
msoEffectMosiaicBubbles = 16
msoEffectPaintBrush = 17
msoEffectPaintStrokes = 18
msoEffectPastelsSmooth = 19
msoEffectPencilGrayscale = 20
msoEffectPencilSketch = 21
msoEffectPhotocopy = 22
msoEffectPlasticWrap = 23
msoEffectSaturation = 24
msoEffectSharpenSoften = 25
msoEffectTexturizer = 26
msoEffectWatercolorSponge = 27
MsoPictureEffectType = c_int  # enum

# values for enumeration 'MsoLineJoinStyle'
msoLineJoinMixed = -2
msoLineJoinRound = 1
msoLineJoinBevel = 2
msoLineJoinMiter = 3
MsoLineJoinStyle = c_int  # enum

# values for enumeration 'MsoLineCapStyle'
msoLineCapMixed = -2
msoLineCapSquare = 1
msoLineCapRound = 2
msoLineCapFlat = 3
MsoLineCapStyle = c_int  # enum

# values for enumeration 'MsoLineFillType'
msoLineFillMixed = -2
msoLineFillNone = 0
msoLineFillSolid = 1
msoLineFillPatterned = 2
msoLineFillGradient = 3
msoLineFillTextured = 4
msoLineFillBackground = 5
msoLineFillPicture = 6
MsoLineFillType = c_int  # enum

# values for enumeration 'EncryptionCipherMode'
cipherModeECB = 0
cipherModeCBC = 1
EncryptionCipherMode = c_int  # enum

# values for enumeration 'MsoBroadcastState'
NoBroadcast = 0
BroadcastStarted = 1
BroadcastPaused = 2
MsoBroadcastState = c_int  # enum

# values for enumeration 'XlChartOrientation'
xlDownward = -4170
xlHorizontal = -4128
xlUpward = -4171
xlVertical = -4166
XlChartOrientation = c_int  # enum



class _IMsoDispObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0300-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


class PictureFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C031A-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def IncrementBrightness(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementContrast(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def _get_Brightness(self) -> hints.Incomplete: ...
        def _set_Brightness(self, Brightness: hints.Incomplete) -> hints.Hresult: ...
        Brightness = hints.normal_property(_get_Brightness, _set_Brightness)
        def _get_ColorType(self) -> hints.Incomplete: ...
        def _set_ColorType(self, ColorType: hints.Incomplete) -> hints.Hresult: ...
        ColorType = hints.normal_property(_get_ColorType, _set_ColorType)
        def _get_Contrast(self) -> hints.Incomplete: ...
        def _set_Contrast(self, Contrast: hints.Incomplete) -> hints.Hresult: ...
        Contrast = hints.normal_property(_get_Contrast, _set_Contrast)
        def _get_CropBottom(self) -> hints.Incomplete: ...
        def _set_CropBottom(self, CropBottom: hints.Incomplete) -> hints.Hresult: ...
        CropBottom = hints.normal_property(_get_CropBottom, _set_CropBottom)
        def _get_CropLeft(self) -> hints.Incomplete: ...
        def _set_CropLeft(self, CropLeft: hints.Incomplete) -> hints.Hresult: ...
        CropLeft = hints.normal_property(_get_CropLeft, _set_CropLeft)
        def _get_CropRight(self) -> hints.Incomplete: ...
        def _set_CropRight(self, CropRight: hints.Incomplete) -> hints.Hresult: ...
        CropRight = hints.normal_property(_get_CropRight, _set_CropRight)
        def _get_CropTop(self) -> hints.Incomplete: ...
        def _set_CropTop(self, CropTop: hints.Incomplete) -> hints.Hresult: ...
        CropTop = hints.normal_property(_get_CropTop, _set_CropTop)
        def _get_TransparencyColor(self) -> hints.Incomplete: ...
        def _set_TransparencyColor(self, TransparencyColor: hints.Incomplete) -> hints.Hresult: ...
        TransparencyColor = hints.normal_property(_get_TransparencyColor, _set_TransparencyColor)
        def _get_TransparentBackground(self) -> hints.Incomplete: ...
        def _set_TransparentBackground(self, TransparentBackground: hints.Incomplete) -> hints.Hresult: ...
        TransparentBackground = hints.normal_property(_get_TransparentBackground, _set_TransparentBackground)
        def _get_Crop(self) -> 'Crop': ...
        Crop = hints.normal_property(_get_Crop)


_IMsoDispObj._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
]

################################################################
# code template for _IMsoDispObj implementation
# class _IMsoDispObj_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#


class Crop(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03D3-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_PictureOffsetX(self) -> hints.Incomplete: ...
        def _set_PictureOffsetX(self, PictureOffsetX: hints.Incomplete) -> hints.Hresult: ...
        PictureOffsetX = hints.normal_property(_get_PictureOffsetX, _set_PictureOffsetX)
        def _get_PictureOffsetY(self) -> hints.Incomplete: ...
        def _set_PictureOffsetY(self, PictureOffsetY: hints.Incomplete) -> hints.Hresult: ...
        PictureOffsetY = hints.normal_property(_get_PictureOffsetY, _set_PictureOffsetY)
        def _get_PictureWidth(self) -> hints.Incomplete: ...
        def _set_PictureWidth(self, PictureWidth: hints.Incomplete) -> hints.Hresult: ...
        PictureWidth = hints.normal_property(_get_PictureWidth, _set_PictureWidth)
        def _get_PictureHeight(self) -> hints.Incomplete: ...
        def _set_PictureHeight(self, PictureHeight: hints.Incomplete) -> hints.Hresult: ...
        PictureHeight = hints.normal_property(_get_PictureHeight, _set_PictureHeight)
        def _get_ShapeLeft(self) -> hints.Incomplete: ...
        def _set_ShapeLeft(self, ShapeLeft: hints.Incomplete) -> hints.Hresult: ...
        ShapeLeft = hints.normal_property(_get_ShapeLeft, _set_ShapeLeft)
        def _get_ShapeTop(self) -> hints.Incomplete: ...
        def _set_ShapeTop(self, ShapeTop: hints.Incomplete) -> hints.Hresult: ...
        ShapeTop = hints.normal_property(_get_ShapeTop, _set_ShapeTop)
        def _get_ShapeWidth(self) -> hints.Incomplete: ...
        def _set_ShapeWidth(self, ShapeWidth: hints.Incomplete) -> hints.Hresult: ...
        ShapeWidth = hints.normal_property(_get_ShapeWidth, _set_ShapeWidth)
        def _get_ShapeHeight(self) -> hints.Incomplete: ...
        def _set_ShapeHeight(self, ShapeHeight: hints.Incomplete) -> hints.Hresult: ...
        ShapeHeight = hints.normal_property(_get_ShapeHeight, _set_ShapeHeight)


PictureFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'IncrementBrightness',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'IncrementContrast',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Brightness',
        (['out', 'retval'], POINTER(c_float), 'Brightness')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'Brightness',
        (['in'], c_float, 'Brightness')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'ColorType',
        (['out', 'retval'], POINTER(MsoPictureColorType), 'ColorType')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'ColorType',
        (['in'], MsoPictureColorType, 'ColorType')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'Contrast',
        (['out', 'retval'], POINTER(c_float), 'Contrast')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'Contrast',
        (['in'], c_float, 'Contrast')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'CropBottom',
        (['out', 'retval'], POINTER(c_float), 'CropBottom')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'CropBottom',
        (['in'], c_float, 'CropBottom')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'CropLeft',
        (['out', 'retval'], POINTER(c_float), 'CropLeft')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'CropLeft',
        (['in'], c_float, 'CropLeft')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'CropRight',
        (['out', 'retval'], POINTER(c_float), 'CropRight')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'CropRight',
        (['in'], c_float, 'CropRight')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'CropTop',
        (['out', 'retval'], POINTER(c_float), 'CropTop')
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'CropTop',
        (['in'], c_float, 'CropTop')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'TransparencyColor',
        (['out', 'retval'], POINTER(MsoRGBType), 'TransparencyColor')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'TransparencyColor',
        (['in'], MsoRGBType, 'TransparencyColor')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'TransparentBackground',
        (['out', 'retval'], POINTER(MsoTriState), 'TransparentBackground')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'TransparentBackground',
        (['in'], MsoTriState, 'TransparentBackground')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Crop',
        (['out', 'retval'], POINTER(POINTER(Crop)), 'Crop')
    ),
]

################################################################
# code template for PictureFormat implementation
# class PictureFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def IncrementBrightness(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementContrast(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Brightness
#     def _set(self, Brightness):
#         '-no docstring-'
#     Brightness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ColorType
#     def _set(self, ColorType):
#         '-no docstring-'
#     ColorType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Contrast
#     def _set(self, Contrast):
#         '-no docstring-'
#     Contrast = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CropBottom
#     def _set(self, CropBottom):
#         '-no docstring-'
#     CropBottom = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CropLeft
#     def _set(self, CropLeft):
#         '-no docstring-'
#     CropLeft = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CropRight
#     def _set(self, CropRight):
#         '-no docstring-'
#     CropRight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return CropTop
#     def _set(self, CropTop):
#         '-no docstring-'
#     CropTop = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TransparencyColor
#     def _set(self, TransparencyColor):
#         '-no docstring-'
#     TransparencyColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TransparentBackground
#     def _set(self, TransparentBackground):
#         '-no docstring-'
#     TransparentBackground = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Crop(self):
#         '-no docstring-'
#         #return Crop
#


class IDocumentInspector(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD706-0000-0000-C000-000000000046}')
    _idlflags_ = ['oleautomation']

    if TYPE_CHECKING:  # commembers
        def GetInfo(self) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        def Inspect(self, Doc: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete, hints.Incomplete]: ...
        def Fix(self, Doc: hints.Incomplete, hwnd: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...



IDocumentInspector._methods_ = [
    COMMETHOD(
        [],
        HRESULT,
        'GetInfo',
        (['out'], POINTER(BSTR), 'Name'),
        (['out'], POINTER(BSTR), 'Desc')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Inspect',
        (['in'], POINTER(IDispatch), 'Doc'),
        (['out'], POINTER(MsoDocInspectorStatus), 'Status'),
        (['out'], POINTER(BSTR), 'Result'),
        (['out'], POINTER(BSTR), 'Action')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Fix',
        (['in'], POINTER(IDispatch), 'Doc'),
        (['in'], c_int, 'hwnd'),
        (['out'], POINTER(MsoDocInspectorStatus), 'Status'),
        (['out'], POINTER(BSTR), 'Result')
    ),
]

################################################################
# code template for IDocumentInspector implementation
# class IDocumentInspector_Impl(object):
#     def GetInfo(self):
#         '-no docstring-'
#         #return Name, Desc
#
#     def Inspect(self, Doc):
#         '-no docstring-'
#         #return Status, Result, Action
#
#     def Fix(self, Doc, hwnd):
#         '-no docstring-'
#         #return Status, Result
#


class IMsoPlotArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1724-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, pd: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, pd: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, pd: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, pd: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_InsideLeft(self) -> hints.Incomplete: ...
        def _set_InsideLeft(self, pd: hints.Incomplete) -> hints.Hresult: ...
        InsideLeft = hints.normal_property(_get_InsideLeft, _set_InsideLeft)
        def _get_InsideTop(self) -> hints.Incomplete: ...
        def _set_InsideTop(self, pd: hints.Incomplete) -> hints.Hresult: ...
        InsideTop = hints.normal_property(_get_InsideTop, _set_InsideTop)
        def _get_InsideWidth(self) -> hints.Incomplete: ...
        def _set_InsideWidth(self, pd: hints.Incomplete) -> hints.Hresult: ...
        InsideWidth = hints.normal_property(_get_InsideWidth, _set_InsideWidth)
        def _get_InsideHeight(self) -> hints.Incomplete: ...
        def _set_InsideHeight(self, pd: hints.Incomplete) -> hints.Hresult: ...
        InsideHeight = hints.normal_property(_get_InsideHeight, _set_InsideHeight)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


class IMsoBorder(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1717-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Color(self) -> hints.Incomplete: ...
        def _set_Color(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Color = hints.normal_property(_get_Color, _set_Color)
        def _get_ColorIndex(self) -> hints.Incomplete: ...
        def _set_ColorIndex(self, pval: hints.Incomplete) -> hints.Hresult: ...
        ColorIndex = hints.normal_property(_get_ColorIndex, _set_ColorIndex)
        def _get_LineStyle(self) -> hints.Incomplete: ...
        def _set_LineStyle(self, pval: hints.Incomplete) -> hints.Hresult: ...
        LineStyle = hints.normal_property(_get_LineStyle, _set_LineStyle)
        def _get_Weight(self) -> hints.Incomplete: ...
        def _set_Weight(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Weight = hints.normal_property(_get_Weight, _set_Weight)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


class IMsoInterior(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C171B-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Color(self) -> hints.Incomplete: ...
        def _set_Color(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Color = hints.normal_property(_get_Color, _set_Color)
        def _get_ColorIndex(self) -> hints.Incomplete: ...
        def _set_ColorIndex(self, pval: hints.Incomplete) -> hints.Hresult: ...
        ColorIndex = hints.normal_property(_get_ColorIndex, _set_ColorIndex)
        def _get_InvertIfNegative(self) -> hints.Incomplete: ...
        def _set_InvertIfNegative(self, pval: hints.Incomplete) -> hints.Hresult: ...
        InvertIfNegative = hints.normal_property(_get_InvertIfNegative, _set_InvertIfNegative)
        def _get_Pattern(self) -> hints.Incomplete: ...
        def _set_Pattern(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Pattern = hints.normal_property(_get_Pattern, _set_Pattern)
        def _get_PatternColor(self) -> hints.Incomplete: ...
        def _set_PatternColor(self, pval: hints.Incomplete) -> hints.Hresult: ...
        PatternColor = hints.normal_property(_get_PatternColor, _set_PatternColor)
        def _get_PatternColorIndex(self) -> hints.Incomplete: ...
        def _set_PatternColorIndex(self, pval: hints.Incomplete) -> hints.Hresult: ...
        PatternColorIndex = hints.normal_property(_get_PatternColorIndex, _set_PatternColorIndex)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


class ChartFillFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C171C-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def OneColorGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete, Degree: hints.Incomplete) -> hints.Hresult: ...
        def TwoColorGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete) -> hints.Hresult: ...
        def PresetTextured(self, PresetTexture: hints.Incomplete) -> hints.Hresult: ...
        def Solid(self) -> hints.Hresult: ...
        def Patterned(self, Pattern: hints.Incomplete) -> hints.Hresult: ...
        def UserPicture(self, PictureFile: hints.Incomplete, PictureFormat: hints.Incomplete, PictureStackUnit: hints.Incomplete, PicturePlacement: hints.Incomplete) -> hints.Hresult: ...
        def UserTextured(self, TextureFile: hints.Incomplete) -> hints.Hresult: ...
        def PresetGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete, PresetGradientType: hints.Incomplete) -> hints.Hresult: ...
        def _get_BackColor(self) -> 'ChartColorFormat': ...
        BackColor = hints.normal_property(_get_BackColor)
        def _get_ForeColor(self) -> 'ChartColorFormat': ...
        ForeColor = hints.normal_property(_get_ForeColor)
        def _get_GradientColorType(self) -> hints.Incomplete: ...
        GradientColorType = hints.normal_property(_get_GradientColorType)
        def _get_GradientDegree(self) -> hints.Incomplete: ...
        GradientDegree = hints.normal_property(_get_GradientDegree)
        def _get_GradientStyle(self) -> hints.Incomplete: ...
        GradientStyle = hints.normal_property(_get_GradientStyle)
        def _get_GradientVariant(self) -> hints.Incomplete: ...
        GradientVariant = hints.normal_property(_get_GradientVariant)
        def _get_Pattern(self) -> hints.Incomplete: ...
        Pattern = hints.normal_property(_get_Pattern)
        def _get_PresetGradientType(self) -> hints.Incomplete: ...
        PresetGradientType = hints.normal_property(_get_PresetGradientType)
        def _get_PresetTexture(self) -> hints.Incomplete: ...
        PresetTexture = hints.normal_property(_get_PresetTexture)
        def _get_TextureName(self) -> hints.Incomplete: ...
        TextureName = hints.normal_property(_get_TextureName)
        def _get_TextureType(self) -> hints.Incomplete: ...
        TextureType = hints.normal_property(_get_TextureType)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)




class IMsoChartFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1730-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Fill(self) -> 'FillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Glow(self) -> 'GlowFormat': ...
        Glow = hints.normal_property(_get_Glow)
        def _get_Line(self) -> 'LineFormat': ...
        Line = hints.normal_property(_get_Line)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_PictureFormat(self) -> 'PictureFormat': ...
        PictureFormat = hints.normal_property(_get_PictureFormat)
        def _get_Shadow(self) -> 'ShadowFormat': ...
        Shadow = hints.normal_property(_get_Shadow)
        def _get_SoftEdge(self) -> 'SoftEdgeFormat': ...
        SoftEdge = hints.normal_property(_get_SoftEdge)
        def _get_TextFrame2(self) -> 'TextFrame2': ...
        TextFrame2 = hints.normal_property(_get_TextFrame2)
        def _get_ThreeD(self) -> 'ThreeDFormat': ...
        ThreeD = hints.normal_property(_get_ThreeD)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Adjustments(self) -> 'Adjustments': ...
        Adjustments = hints.normal_property(_get_Adjustments)
        def _get_AutoShapeType(self) -> hints.Incomplete: ...
        def _set_AutoShapeType(self, AutoShapeType: hints.Incomplete) -> hints.Hresult: ...
        AutoShapeType = hints.normal_property(_get_AutoShapeType, _set_AutoShapeType)


IMsoPlotArea._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppfill')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(126), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(122), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(1667), 'propget'],
        HRESULT,
        'InsideLeft',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(1667), 'propput'],
        HRESULT,
        'InsideLeft',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(1668), 'propget'],
        HRESULT,
        'InsideTop',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(1668), 'propput'],
        HRESULT,
        'InsideTop',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(1669), 'propget'],
        HRESULT,
        'InsideWidth',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(1669), 'propput'],
        HRESULT,
        'InsideWidth',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(1670), 'propget'],
        HRESULT,
        'InsideHeight',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(1670), 'propput'],
        HRESULT,
        'InsideHeight',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(1671), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlChartElementPosition), 'pval')
    ),
    COMMETHOD(
        [dispid(1671), 'propput'],
        HRESULT,
        'Position',
        (['in'], XlChartElementPosition, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743833), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(253)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(254)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoPlotArea implementation
# class IMsoPlotArea_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return pvar
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppfill
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     InsideLeft = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     InsideTop = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     InsideWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     InsideHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#


class Script(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0341-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Extended(self) -> hints.Incomplete: ...
        def _set_Extended(self, Extended: hints.Incomplete) -> hints.Hresult: ...
        Extended = hints.normal_property(_get_Extended, _set_Extended)
        def _get_Id(self) -> hints.Incomplete: ...
        def _set_Id(self, Id: hints.Incomplete) -> hints.Hresult: ...
        Id = hints.normal_property(_get_Id, _set_Id)
        def _get_Language(self) -> hints.Incomplete: ...
        def _set_Language(self, Language: hints.Incomplete) -> hints.Hresult: ...
        Language = hints.normal_property(_get_Language, _set_Language)
        def _get_Location(self) -> hints.Incomplete: ...
        Location = hints.normal_property(_get_Location)
        def Delete(self) -> hints.Hresult: ...
        def _get_Shape(self) -> hints.Incomplete: ...
        Shape = hints.normal_property(_get_Shape)
        def _get_ScriptText(self) -> hints.Incomplete: ...
        def _set_ScriptText(self, Script: hints.Incomplete) -> hints.Hresult: ...
        ScriptText = hints.normal_property(_get_ScriptText, _set_ScriptText)



Script._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Extended',
        (['out', 'retval'], POINTER(BSTR), 'Extended')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propput'],
        HRESULT,
        'Extended',
        (['in'], BSTR, 'Extended')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'Id')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'Id',
        (['in'], BSTR, 'Id')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'Language',
        (['out', 'retval'], POINTER(MsoScriptLanguage), 'Language')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propput'],
        HRESULT,
        'Language',
        (['in'], MsoScriptLanguage, 'Language')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propget'],
        HRESULT,
        'Location',
        (['out', 'retval'], POINTER(MsoScriptLocation), 'Location')
    ),
    COMMETHOD([dispid(1610809352)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(1610809353), 'propget'],
        HRESULT,
        'Shape',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Object')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'ScriptText',
        (['out', 'retval'], POINTER(BSTR), 'Script')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'ScriptText',
        (['in'], BSTR, 'Script')
    ),
]

################################################################
# code template for Script implementation
# class Script_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Extended
#     def _set(self, Extended):
#         '-no docstring-'
#     Extended = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Id
#     def _set(self, Id):
#         '-no docstring-'
#     Id = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Language
#     def _set(self, Language):
#         '-no docstring-'
#     Language = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Location(self):
#         '-no docstring-'
#         #return Location
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Shape(self):
#         '-no docstring-'
#         #return Object
#
#     def _get(self):
#         '-no docstring-'
#         #return Script
#     def _set(self, Script):
#         '-no docstring-'
#     ScriptText = property(_get, _set, doc = _set.__doc__)
#


class CanvasShapes(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0371-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'Shape': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def AddCallout(self, Type: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddConnector(self, Type: hints.Incomplete, BeginX: hints.Incomplete, BeginY: hints.Incomplete, EndX: hints.Incomplete, EndY: hints.Incomplete) -> 'Shape': ...
        def AddCurve(self, SafeArrayOfPoints: hints.Incomplete) -> 'Shape': ...
        def AddLabel(self, Orientation: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddLine(self, BeginX: hints.Incomplete, BeginY: hints.Incomplete, EndX: hints.Incomplete, EndY: hints.Incomplete) -> 'Shape': ...
        def AddPicture(self, FileName: hints.Incomplete, LinkToFile: hints.Incomplete, SaveWithDocument: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddPolyline(self, SafeArrayOfPoints: hints.Incomplete) -> 'Shape': ...
        def AddShape(self, Type: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddTextEffect(self, PresetTextEffect: hints.Incomplete, Text: hints.Incomplete, FontName: hints.Incomplete, FontSize: hints.Incomplete, FontBold: hints.Incomplete, FontItalic: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete) -> 'Shape': ...
        def AddTextbox(self, Orientation: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def BuildFreeform(self, EditingType: hints.Incomplete, X1: hints.Incomplete, Y1: hints.Incomplete) -> 'FreeformBuilder': ...
        def Range(self, Index: hints.Incomplete) -> 'ShapeRange': ...
        def SelectAll(self) -> hints.Hresult: ...
        def _get_Background(self) -> 'Shape': ...
        Background = hints.normal_property(_get_Background)


class Shape(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C031C-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Apply(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def Duplicate(self) -> 'Shape': ...
        def Flip(self, FlipCmd: hints.Incomplete) -> hints.Hresult: ...
        def IncrementLeft(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotation(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementTop(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def PickUp(self) -> hints.Hresult: ...
        def RerouteConnections(self) -> hints.Hresult: ...
        def ScaleHeight(self, Factor: hints.Incomplete, RelativeToOriginalSize: hints.Incomplete, fScale: hints.Incomplete = ...) -> hints.Hresult: ...
        def ScaleWidth(self, Factor: hints.Incomplete, RelativeToOriginalSize: hints.Incomplete, fScale: hints.Incomplete = ...) -> hints.Hresult: ...
        def Select(self, Replace: hints.Incomplete = ...) -> hints.Hresult: ...
        def SetShapesDefaultProperties(self) -> hints.Hresult: ...
        def Ungroup(self) -> 'ShapeRange': ...
        def ZOrder(self, ZOrderCmd: hints.Incomplete) -> hints.Hresult: ...
        def _get_Adjustments(self) -> 'Adjustments': ...
        Adjustments = hints.normal_property(_get_Adjustments)
        def _get_AutoShapeType(self) -> hints.Incomplete: ...
        def _set_AutoShapeType(self, AutoShapeType: hints.Incomplete) -> hints.Hresult: ...
        AutoShapeType = hints.normal_property(_get_AutoShapeType, _set_AutoShapeType)
        def _get_BlackWhiteMode(self) -> hints.Incomplete: ...
        def _set_BlackWhiteMode(self, BlackWhiteMode: hints.Incomplete) -> hints.Hresult: ...
        BlackWhiteMode = hints.normal_property(_get_BlackWhiteMode, _set_BlackWhiteMode)
        def _get_Callout(self) -> 'CalloutFormat': ...
        Callout = hints.normal_property(_get_Callout)
        def _get_ConnectionSiteCount(self) -> hints.Incomplete: ...
        ConnectionSiteCount = hints.normal_property(_get_ConnectionSiteCount)
        def _get_Connector(self) -> hints.Incomplete: ...
        Connector = hints.normal_property(_get_Connector)
        def _get_ConnectorFormat(self) -> 'ConnectorFormat': ...
        ConnectorFormat = hints.normal_property(_get_ConnectorFormat)
        def _get_Fill(self) -> 'FillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_GroupItems(self) -> 'GroupShapes': ...
        GroupItems = hints.normal_property(_get_GroupItems)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_HorizontalFlip(self) -> hints.Incomplete: ...
        HorizontalFlip = hints.normal_property(_get_HorizontalFlip)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, Left: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Line(self) -> 'LineFormat': ...
        Line = hints.normal_property(_get_Line)
        def _get_LockAspectRatio(self) -> hints.Incomplete: ...
        def _set_LockAspectRatio(self, LockAspectRatio: hints.Incomplete) -> hints.Hresult: ...
        LockAspectRatio = hints.normal_property(_get_LockAspectRatio, _set_LockAspectRatio)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Nodes(self) -> 'ShapeNodes': ...
        Nodes = hints.normal_property(_get_Nodes)
        def _get_Rotation(self) -> hints.Incomplete: ...
        def _set_Rotation(self, Rotation: hints.Incomplete) -> hints.Hresult: ...
        Rotation = hints.normal_property(_get_Rotation, _set_Rotation)
        def _get_PictureFormat(self) -> 'PictureFormat': ...
        PictureFormat = hints.normal_property(_get_PictureFormat)
        def _get_Shadow(self) -> 'ShadowFormat': ...
        Shadow = hints.normal_property(_get_Shadow)
        def _get_TextEffect(self) -> 'TextEffectFormat': ...
        TextEffect = hints.normal_property(_get_TextEffect)
        def _get_TextFrame(self) -> 'TextFrame': ...
        TextFrame = hints.normal_property(_get_TextFrame)
        def _get_ThreeD(self) -> 'ThreeDFormat': ...
        ThreeD = hints.normal_property(_get_ThreeD)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, Top: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_VerticalFlip(self) -> hints.Incomplete: ...
        VerticalFlip = hints.normal_property(_get_VerticalFlip)
        def _get_Vertices(self) -> hints.Incomplete: ...
        Vertices = hints.normal_property(_get_Vertices)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_ZOrderPosition(self) -> hints.Incomplete: ...
        ZOrderPosition = hints.normal_property(_get_ZOrderPosition)
        def _get_Script(self) -> 'Script': ...
        Script = hints.normal_property(_get_Script)
        def _get_AlternativeText(self) -> hints.Incomplete: ...
        def _set_AlternativeText(self, AlternativeText: hints.Incomplete) -> hints.Hresult: ...
        AlternativeText = hints.normal_property(_get_AlternativeText, _set_AlternativeText)
        def _get_HasDiagram(self) -> hints.Incomplete: ...
        HasDiagram = hints.normal_property(_get_HasDiagram)
        def _get_Diagram(self) -> 'IMsoDiagram': ...
        Diagram = hints.normal_property(_get_Diagram)
        def _get_HasDiagramNode(self) -> hints.Incomplete: ...
        HasDiagramNode = hints.normal_property(_get_HasDiagramNode)
        def _get_DiagramNode(self) -> 'DiagramNode': ...
        DiagramNode = hints.normal_property(_get_DiagramNode)
        def _get_Child(self) -> hints.Incomplete: ...
        Child = hints.normal_property(_get_Child)
        def _get_ParentGroup(self) -> 'Shape': ...
        ParentGroup = hints.normal_property(_get_ParentGroup)
        def _get_CanvasItems(self) -> 'CanvasShapes': ...
        CanvasItems = hints.normal_property(_get_CanvasItems)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def CanvasCropLeft(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropTop(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropRight(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropBottom(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def _set_RTF(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        RTF = hints.normal_property(fset=_set_RTF)
        def _get_TextFrame2(self) -> 'TextFrame2': ...
        TextFrame2 = hints.normal_property(_get_TextFrame2)
        def Cut(self) -> hints.Hresult: ...
        def Copy(self) -> hints.Hresult: ...
        def _get_HasChart(self) -> hints.Incomplete: ...
        HasChart = hints.normal_property(_get_HasChart)
        def _get_Chart(self) -> 'IMsoChart': ...
        Chart = hints.normal_property(_get_Chart)
        def _get_ShapeStyle(self) -> hints.Incomplete: ...
        def _set_ShapeStyle(self, ShapeStyle: hints.Incomplete) -> hints.Hresult: ...
        ShapeStyle = hints.normal_property(_get_ShapeStyle, _set_ShapeStyle)
        def _get_BackgroundStyle(self) -> hints.Incomplete: ...
        def _set_BackgroundStyle(self, BackgroundStyle: hints.Incomplete) -> hints.Hresult: ...
        BackgroundStyle = hints.normal_property(_get_BackgroundStyle, _set_BackgroundStyle)
        def _get_SoftEdge(self) -> 'SoftEdgeFormat': ...
        SoftEdge = hints.normal_property(_get_SoftEdge)
        def _get_Glow(self) -> 'GlowFormat': ...
        Glow = hints.normal_property(_get_Glow)
        def _get_Reflection(self) -> 'ReflectionFormat': ...
        Reflection = hints.normal_property(_get_Reflection)
        def _get_HasSmartArt(self) -> hints.Incomplete: ...
        HasSmartArt = hints.normal_property(_get_HasSmartArt)
        def _get_SmartArt(self) -> 'SmartArt': ...
        SmartArt = hints.normal_property(_get_SmartArt)
        def ConvertTextToSmartArt(self, Layout: hints.Incomplete) -> hints.Hresult: ...
        def _get_Title(self) -> hints.Incomplete: ...
        def _set_Title(self, Title: hints.Incomplete) -> hints.Hresult: ...
        Title = hints.normal_property(_get_Title, _set_Title)
        def _get_GraphicStyle(self) -> hints.Incomplete: ...
        def _set_GraphicStyle(self, GraphicStyle: hints.Incomplete) -> hints.Hresult: ...
        GraphicStyle = hints.normal_property(_get_GraphicStyle, _set_GraphicStyle)
        def SaveAsPicture(self, PictureType: hints.Incomplete, FileName: hints.Incomplete, FSaveShapesIndividually: hints.Incomplete) -> hints.Hresult: ...
        def _get_Model3D(self) -> 'Model3DFormat': ...
        Model3D = hints.normal_property(_get_Model3D)
        def _get_Decorative(self) -> hints.Incomplete: ...
        def _set_Decorative(self, fDecorative: hints.Incomplete) -> hints.Hresult: ...
        Decorative = hints.normal_property(_get_Decorative, _set_Decorative)
        def _get_Locked(self) -> hints.Incomplete: ...
        def _set_Locked(self, pLocked: hints.Incomplete) -> hints.Hresult: ...
        Locked = hints.normal_property(_get_Locked, _set_Locked)




class FreeformBuilder(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0315-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def AddNodes(self, SegmentType: hints.Incomplete, EditingType: hints.Incomplete, X1: hints.Incomplete, Y1: hints.Incomplete, X2: hints.Incomplete = ..., Y2: hints.Incomplete = ..., X3: hints.Incomplete = ..., Y3: hints.Incomplete = ...) -> hints.Hresult: ...
        def ConvertToShape(self) -> 'Shape': ...


class ShapeRange(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C031D-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'Shape': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Align(self, AlignCmd: hints.Incomplete, RelativeTo: hints.Incomplete) -> hints.Hresult: ...
        def Apply(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def Distribute(self, DistributeCmd: hints.Incomplete, RelativeTo: hints.Incomplete) -> hints.Hresult: ...
        def Duplicate(self) -> 'ShapeRange': ...
        def Flip(self, FlipCmd: hints.Incomplete) -> hints.Hresult: ...
        def IncrementLeft(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotation(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementTop(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def Group(self) -> 'Shape': ...
        def PickUp(self) -> hints.Hresult: ...
        def Regroup(self) -> 'Shape': ...
        def RerouteConnections(self) -> hints.Hresult: ...
        def ScaleHeight(self, Factor: hints.Incomplete, RelativeToOriginalSize: hints.Incomplete, fScale: hints.Incomplete = ...) -> hints.Hresult: ...
        def ScaleWidth(self, Factor: hints.Incomplete, RelativeToOriginalSize: hints.Incomplete, fScale: hints.Incomplete = ...) -> hints.Hresult: ...
        def Select(self, Replace: hints.Incomplete = ...) -> hints.Hresult: ...
        def SetShapesDefaultProperties(self) -> hints.Hresult: ...
        def Ungroup(self) -> 'ShapeRange': ...
        def ZOrder(self, ZOrderCmd: hints.Incomplete) -> hints.Hresult: ...
        def _get_Adjustments(self) -> 'Adjustments': ...
        Adjustments = hints.normal_property(_get_Adjustments)
        def _get_AutoShapeType(self) -> hints.Incomplete: ...
        def _set_AutoShapeType(self, AutoShapeType: hints.Incomplete) -> hints.Hresult: ...
        AutoShapeType = hints.normal_property(_get_AutoShapeType, _set_AutoShapeType)
        def _get_BlackWhiteMode(self) -> hints.Incomplete: ...
        def _set_BlackWhiteMode(self, BlackWhiteMode: hints.Incomplete) -> hints.Hresult: ...
        BlackWhiteMode = hints.normal_property(_get_BlackWhiteMode, _set_BlackWhiteMode)
        def _get_Callout(self) -> 'CalloutFormat': ...
        Callout = hints.normal_property(_get_Callout)
        def _get_ConnectionSiteCount(self) -> hints.Incomplete: ...
        ConnectionSiteCount = hints.normal_property(_get_ConnectionSiteCount)
        def _get_Connector(self) -> hints.Incomplete: ...
        Connector = hints.normal_property(_get_Connector)
        def _get_ConnectorFormat(self) -> 'ConnectorFormat': ...
        ConnectorFormat = hints.normal_property(_get_ConnectorFormat)
        def _get_Fill(self) -> 'FillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_GroupItems(self) -> 'GroupShapes': ...
        GroupItems = hints.normal_property(_get_GroupItems)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, Height: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_HorizontalFlip(self) -> hints.Incomplete: ...
        HorizontalFlip = hints.normal_property(_get_HorizontalFlip)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, Left: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Line(self) -> 'LineFormat': ...
        Line = hints.normal_property(_get_Line)
        def _get_LockAspectRatio(self) -> hints.Incomplete: ...
        def _set_LockAspectRatio(self, LockAspectRatio: hints.Incomplete) -> hints.Hresult: ...
        LockAspectRatio = hints.normal_property(_get_LockAspectRatio, _set_LockAspectRatio)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Nodes(self) -> 'ShapeNodes': ...
        Nodes = hints.normal_property(_get_Nodes)
        def _get_Rotation(self) -> hints.Incomplete: ...
        def _set_Rotation(self, Rotation: hints.Incomplete) -> hints.Hresult: ...
        Rotation = hints.normal_property(_get_Rotation, _set_Rotation)
        def _get_PictureFormat(self) -> 'PictureFormat': ...
        PictureFormat = hints.normal_property(_get_PictureFormat)
        def _get_Shadow(self) -> 'ShadowFormat': ...
        Shadow = hints.normal_property(_get_Shadow)
        def _get_TextEffect(self) -> 'TextEffectFormat': ...
        TextEffect = hints.normal_property(_get_TextEffect)
        def _get_TextFrame(self) -> 'TextFrame': ...
        TextFrame = hints.normal_property(_get_TextFrame)
        def _get_ThreeD(self) -> 'ThreeDFormat': ...
        ThreeD = hints.normal_property(_get_ThreeD)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, Top: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_VerticalFlip(self) -> hints.Incomplete: ...
        VerticalFlip = hints.normal_property(_get_VerticalFlip)
        def _get_Vertices(self) -> hints.Incomplete: ...
        Vertices = hints.normal_property(_get_Vertices)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, Width: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_ZOrderPosition(self) -> hints.Incomplete: ...
        ZOrderPosition = hints.normal_property(_get_ZOrderPosition)
        def _get_Script(self) -> 'Script': ...
        Script = hints.normal_property(_get_Script)
        def _get_AlternativeText(self) -> hints.Incomplete: ...
        def _set_AlternativeText(self, AlternativeText: hints.Incomplete) -> hints.Hresult: ...
        AlternativeText = hints.normal_property(_get_AlternativeText, _set_AlternativeText)
        def _get_HasDiagram(self) -> hints.Incomplete: ...
        HasDiagram = hints.normal_property(_get_HasDiagram)
        def _get_Diagram(self) -> 'IMsoDiagram': ...
        Diagram = hints.normal_property(_get_Diagram)
        def _get_HasDiagramNode(self) -> hints.Incomplete: ...
        HasDiagramNode = hints.normal_property(_get_HasDiagramNode)
        def _get_DiagramNode(self) -> 'DiagramNode': ...
        DiagramNode = hints.normal_property(_get_DiagramNode)
        def _get_Child(self) -> hints.Incomplete: ...
        Child = hints.normal_property(_get_Child)
        def _get_ParentGroup(self) -> 'Shape': ...
        ParentGroup = hints.normal_property(_get_ParentGroup)
        def _get_CanvasItems(self) -> 'CanvasShapes': ...
        CanvasItems = hints.normal_property(_get_CanvasItems)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def CanvasCropLeft(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropTop(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropRight(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def CanvasCropBottom(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def _set_RTF(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        RTF = hints.normal_property(fset=_set_RTF)
        def _get_TextFrame2(self) -> 'TextFrame2': ...
        TextFrame2 = hints.normal_property(_get_TextFrame2)
        def Cut(self) -> hints.Hresult: ...
        def Copy(self) -> hints.Hresult: ...
        def _get_HasChart(self) -> hints.Incomplete: ...
        HasChart = hints.normal_property(_get_HasChart)
        def _get_Chart(self) -> 'IMsoChart': ...
        Chart = hints.normal_property(_get_Chart)
        def _get_ShapeStyle(self) -> hints.Incomplete: ...
        def _set_ShapeStyle(self, ShapeStyle: hints.Incomplete) -> hints.Hresult: ...
        ShapeStyle = hints.normal_property(_get_ShapeStyle, _set_ShapeStyle)
        def _get_BackgroundStyle(self) -> hints.Incomplete: ...
        def _set_BackgroundStyle(self, BackgroundStyle: hints.Incomplete) -> hints.Hresult: ...
        BackgroundStyle = hints.normal_property(_get_BackgroundStyle, _set_BackgroundStyle)
        def _get_SoftEdge(self) -> 'SoftEdgeFormat': ...
        SoftEdge = hints.normal_property(_get_SoftEdge)
        def _get_Glow(self) -> 'GlowFormat': ...
        Glow = hints.normal_property(_get_Glow)
        def _get_Reflection(self) -> 'ReflectionFormat': ...
        Reflection = hints.normal_property(_get_Reflection)
        def _get_Title(self) -> hints.Incomplete: ...
        def _set_Title(self, Title: hints.Incomplete) -> hints.Hresult: ...
        Title = hints.normal_property(_get_Title, _set_Title)
        def MergeShapes(self, MergeCmd: hints.Incomplete, PrimaryShape: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_GraphicStyle(self) -> hints.Incomplete: ...
        def _set_GraphicStyle(self, GraphicStyle: hints.Incomplete) -> hints.Hresult: ...
        GraphicStyle = hints.normal_property(_get_GraphicStyle, _set_GraphicStyle)
        def SaveAsPicture(self, PictureType: hints.Incomplete, FileName: hints.Incomplete, FSaveShapesIndividually: hints.Incomplete) -> hints.Hresult: ...
        def _get_Model3D(self) -> 'Model3DFormat': ...
        Model3D = hints.normal_property(_get_Model3D)
        def _get_Decorative(self) -> hints.Incomplete: ...
        def _set_Decorative(self, fDecorative: hints.Incomplete) -> hints.Hresult: ...
        Decorative = hints.normal_property(_get_Decorative, _set_Decorative)
        def _get_Locked(self) -> hints.Incomplete: ...
        def _set_Locked(self, pLocked: hints.Incomplete) -> hints.Hresult: ...
        Locked = hints.normal_property(_get_Locked, _set_Locked)


CanvasShapes._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'AddCallout',
        (['in'], MsoCalloutType, 'Type'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Callout')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'AddConnector',
        (['in'], MsoConnectorType, 'Type'),
        (['in'], c_float, 'BeginX'),
        (['in'], c_float, 'BeginY'),
        (['in'], c_float, 'EndX'),
        (['in'], c_float, 'EndY'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Connector')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'AddCurve',
        (['in'], VARIANT, 'SafeArrayOfPoints'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Curve')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'AddLabel',
        (['in'], MsoTextOrientation, 'Orientation'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Label')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'AddLine',
        (['in'], c_float, 'BeginX'),
        (['in'], c_float, 'BeginY'),
        (['in'], c_float, 'EndX'),
        (['in'], c_float, 'EndY'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Line')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'AddPicture',
        (['in'], BSTR, 'FileName'),
        (['in'], MsoTriState, 'LinkToFile'),
        (['in'], MsoTriState, 'SaveWithDocument'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Picture')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'AddPolyline',
        (['in'], VARIANT, 'SafeArrayOfPoints'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Polyline')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'AddShape',
        (['in'], MsoAutoShapeType, 'Type'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'AddTextEffect',
        (['in'], MsoPresetTextEffect, 'PresetTextEffect'),
        (['in'], BSTR, 'Text'),
        (['in'], BSTR, 'FontName'),
        (['in'], c_float, 'FontSize'),
        (['in'], MsoTriState, 'FontBold'),
        (['in'], MsoTriState, 'FontItalic'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'TextEffect')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'AddTextbox',
        (['in'], MsoTextOrientation, 'Orientation'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Textbox')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'BuildFreeform',
        (['in'], MsoEditingType, 'EditingType'),
        (['in'], c_float, 'X1'),
        (['in'], c_float, 'Y1'),
        (
            ['out', 'retval'],
            POINTER(POINTER(FreeformBuilder)),
            'FreeformBuilder',
        )
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'Range',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Range')
    ),
    COMMETHOD([dispid(22)], HRESULT, 'SelectAll'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Background',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Background')
    ),
]

################################################################
# code template for CanvasShapes implementation
# class CanvasShapes_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def AddCallout(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Callout
#
#     def AddConnector(self, Type, BeginX, BeginY, EndX, EndY):
#         '-no docstring-'
#         #return Connector
#
#     def AddCurve(self, SafeArrayOfPoints):
#         '-no docstring-'
#         #return Curve
#
#     def AddLabel(self, Orientation, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Label
#
#     def AddLine(self, BeginX, BeginY, EndX, EndY):
#         '-no docstring-'
#         #return Line
#
#     def AddPicture(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Picture
#
#     def AddPolyline(self, SafeArrayOfPoints):
#         '-no docstring-'
#         #return Polyline
#
#     def AddShape(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Shape
#
#     def AddTextEffect(self, PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top):
#         '-no docstring-'
#         #return TextEffect
#
#     def AddTextbox(self, Orientation, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Textbox
#
#     def BuildFreeform(self, EditingType, X1, Y1):
#         '-no docstring-'
#         #return FreeformBuilder
#
#     def Range(self, Index):
#         '-no docstring-'
#         #return Range
#
#     def SelectAll(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Background(self):
#         '-no docstring-'
#         #return Background
#


class PropertyTests(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0334-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'PropertyTest': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, Name: hints.Incomplete, Condition: hints.Incomplete, Value: hints.Incomplete = ..., SecondValue: hints.Incomplete = ..., Connector: hints.Incomplete = ...) -> hints.Hresult: ...
        def Remove(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class PropertyTest(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0333-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Condition(self) -> hints.Incomplete: ...
        Condition = hints.normal_property(_get_Condition)
        def _get_Value(self) -> hints.Incomplete: ...
        Value = hints.normal_property(_get_Value)
        def _get_SecondValue(self) -> hints.Incomplete: ...
        SecondValue = hints.normal_property(_get_SecondValue)
        def _get_Connector(self) -> hints.Incomplete: ...
        Connector = hints.normal_property(_get_Connector)



PropertyTests._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(PropertyTest)), 'ppIDocProp')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pc')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['in'], MsoCondition, 'Condition'),
        (['in', 'optional'], VARIANT, 'Value'),
        (['in', 'optional'], VARIANT, 'SecondValue'),
        (['in', 'optional'], MsoConnector, 'Connector', 1)
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Remove',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for PropertyTests implementation
# class PropertyTests_Impl(object):
#     @property
#     def Item(self, Index, lcid):
#         '-no docstring-'
#         #return ppIDocProp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pc
#
#     def Add(self, Name, Condition, Value, SecondValue, Connector):
#         '-no docstring-'
#         #return 
#
#     def Remove(self, Index):
#         '-no docstring-'
#         #return 
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class WorkflowTemplates(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD903-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'WorkflowTemplate': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class WorkflowTemplate(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD902-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Description(self) -> hints.Incomplete: ...
        Description = hints.normal_property(_get_Description)
        def _get_DocumentLibraryName(self) -> hints.Incomplete: ...
        DocumentLibraryName = hints.normal_property(_get_DocumentLibraryName)
        def _get_DocumentLibraryURL(self) -> hints.Incomplete: ...
        DocumentLibraryURL = hints.normal_property(_get_DocumentLibraryURL)
        def Show(self) -> hints.Incomplete: ...


WorkflowTemplates._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(WorkflowTemplate)), 'ppret')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for WorkflowTemplates implementation
# class WorkflowTemplates_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppret
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class IAccessible(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{618736E0-3C3D-11CF-810C-00AA00389B71}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_accParent(self) -> hints.Incomplete: ...
        accParent = hints.normal_property(_get_accParent)
        def _get_accChildCount(self) -> hints.Incomplete: ...
        accChildCount = hints.normal_property(_get_accChildCount)
        def _get_accChild(self, varChild: hints.Incomplete) -> hints.Incomplete: ...
        accChild = hints.named_property('accChild', _get_accChild)
        def _get_accName(self, varChild: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _set_accName(self, varChild: hints.Incomplete = ..., **kwargs: hints.Any) -> hints.Hresult: ...
        accName = hints.named_property('accName', _get_accName, _set_accName)
        def _get_accValue(self, varChild: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _set_accValue(self, varChild: hints.Incomplete = ..., **kwargs: hints.Any) -> hints.Hresult: ...
        accValue = hints.named_property('accValue', _get_accValue, _set_accValue)
        def _get_accDescription(self, varChild: hints.Incomplete = ...) -> hints.Incomplete: ...
        accDescription = hints.named_property('accDescription', _get_accDescription)
        def _get_accRole(self, varChild: hints.Incomplete = ...) -> hints.Incomplete: ...
        accRole = hints.named_property('accRole', _get_accRole)
        def _get_accState(self, varChild: hints.Incomplete = ...) -> hints.Incomplete: ...
        accState = hints.named_property('accState', _get_accState)
        def _get_accHelp(self, varChild: hints.Incomplete = ...) -> hints.Incomplete: ...
        accHelp = hints.named_property('accHelp', _get_accHelp)
        def _get_accHelpTopic(self, varChild: hints.Incomplete = ...) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        accHelpTopic = hints.named_property('accHelpTopic', _get_accHelpTopic)
        def _get_accKeyboardShortcut(self, varChild: hints.Incomplete = ...) -> hints.Incomplete: ...
        accKeyboardShortcut = hints.named_property('accKeyboardShortcut', _get_accKeyboardShortcut)
        def _get_accFocus(self) -> hints.Incomplete: ...
        accFocus = hints.normal_property(_get_accFocus)
        def _get_accSelection(self) -> hints.Incomplete: ...
        accSelection = hints.normal_property(_get_accSelection)
        def _get_accDefaultAction(self, varChild: hints.Incomplete = ...) -> hints.Incomplete: ...
        accDefaultAction = hints.named_property('accDefaultAction', _get_accDefaultAction)
        def accSelect(self, flagsSelect: hints.Incomplete, varChild: hints.Incomplete = ...) -> hints.Hresult: ...
        def accLocation(self, varChild: hints.Incomplete = ...) -> hints.Tuple[hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete]: ...
        def accNavigate(self, navDir: hints.Incomplete, varStart: hints.Incomplete = ...) -> hints.Incomplete: ...
        def accHitTest(self, xLeft: hints.Incomplete, yTop: hints.Incomplete) -> hints.Incomplete: ...
        def accDoDefaultAction(self, varChild: hints.Incomplete = ...) -> hints.Hresult: ...


class _IMsoOleAccDispObj(IAccessible):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0301-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


class CommandBarControl(_IMsoOleAccDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0308-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_BeginGroup(self) -> hints.Incomplete: ...
        def _set_BeginGroup(self, pvarfBeginGroup: hints.Incomplete) -> hints.Hresult: ...
        BeginGroup = hints.normal_property(_get_BeginGroup, _set_BeginGroup)
        def _get_BuiltIn(self) -> hints.Incomplete: ...
        BuiltIn = hints.normal_property(_get_BuiltIn)
        def _get_Caption(self) -> hints.Incomplete: ...
        def _set_Caption(self, pbstrCaption: hints.Incomplete) -> hints.Hresult: ...
        Caption = hints.normal_property(_get_Caption, _set_Caption)
        def _get_Control(self) -> hints.Incomplete: ...
        Control = hints.normal_property(_get_Control)
        def Copy(self, Bar: hints.Incomplete = ..., Before: hints.Incomplete = ...) -> 'CommandBarControl': ...
        def Delete(self, Temporary: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_DescriptionText(self) -> hints.Incomplete: ...
        def _set_DescriptionText(self, pbstrText: hints.Incomplete) -> hints.Hresult: ...
        DescriptionText = hints.normal_property(_get_DescriptionText, _set_DescriptionText)
        def _get_Enabled(self) -> hints.Incomplete: ...
        def _set_Enabled(self, pvarfEnabled: hints.Incomplete) -> hints.Hresult: ...
        Enabled = hints.normal_property(_get_Enabled, _set_Enabled)
        def Execute(self) -> hints.Hresult: ...
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, pdy: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_HelpContextId(self) -> hints.Incomplete: ...
        def _set_HelpContextId(self, pid: hints.Incomplete) -> hints.Hresult: ...
        HelpContextId = hints.normal_property(_get_HelpContextId, _set_HelpContextId)
        def _get_HelpFile(self) -> hints.Incomplete: ...
        def _set_HelpFile(self, pbstrFilename: hints.Incomplete) -> hints.Hresult: ...
        HelpFile = hints.normal_property(_get_HelpFile, _set_HelpFile)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_InstanceId(self) -> hints.Incomplete: ...
        InstanceId = hints.normal_property(_get_InstanceId)
        def Move(self, Bar: hints.Incomplete = ..., Before: hints.Incomplete = ...) -> 'CommandBarControl': ...
        def _get_Left(self) -> hints.Incomplete: ...
        Left = hints.normal_property(_get_Left)
        def _get_OLEUsage(self) -> hints.Incomplete: ...
        def _set_OLEUsage(self, pcou: hints.Incomplete) -> hints.Hresult: ...
        OLEUsage = hints.normal_property(_get_OLEUsage, _set_OLEUsage)
        def _get_OnAction(self) -> hints.Incomplete: ...
        def _set_OnAction(self, pbstrOnAction: hints.Incomplete) -> hints.Hresult: ...
        OnAction = hints.normal_property(_get_OnAction, _set_OnAction)
        def _get_Parent(self) -> 'CommandBar': ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Parameter(self) -> hints.Incomplete: ...
        def _set_Parameter(self, pbstrParam: hints.Incomplete) -> hints.Hresult: ...
        Parameter = hints.normal_property(_get_Parameter, _set_Parameter)
        def _get_Priority(self) -> hints.Incomplete: ...
        def _set_Priority(self, pnPri: hints.Incomplete) -> hints.Hresult: ...
        Priority = hints.normal_property(_get_Priority, _set_Priority)
        def Reset(self) -> hints.Hresult: ...
        def SetFocus(self) -> hints.Hresult: ...
        def _get_Tag(self) -> hints.Incomplete: ...
        def _set_Tag(self, pbstrTag: hints.Incomplete) -> hints.Hresult: ...
        Tag = hints.normal_property(_get_Tag, _set_Tag)
        def _get_TooltipText(self) -> hints.Incomplete: ...
        def _set_TooltipText(self, pbstrTooltip: hints.Incomplete) -> hints.Hresult: ...
        TooltipText = hints.normal_property(_get_TooltipText, _set_TooltipText)
        def _get_Top(self) -> hints.Incomplete: ...
        Top = hints.normal_property(_get_Top)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, pvarfVisible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, pdx: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_IsPriorityDropped(self) -> hints.Incomplete: ...
        IsPriorityDropped = hints.normal_property(_get_IsPriorityDropped)
        def Reserved1(self) -> hints.Hresult: ...
        def Reserved2(self) -> hints.Hresult: ...
        def Reserved3(self) -> hints.Hresult: ...
        def Reserved4(self) -> hints.Hresult: ...
        def Reserved5(self) -> hints.Hresult: ...
        def Reserved6(self) -> hints.Hresult: ...
        def Reserved7(self) -> hints.Hresult: ...


class _CommandBarButton(CommandBarControl):
    _case_insensitive_ = True
    _iid_ = GUID('{000C030E-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_BuiltInFace(self) -> hints.Incomplete: ...
        def _set_BuiltInFace(self, pvarfBuiltIn: hints.Incomplete) -> hints.Hresult: ...
        BuiltInFace = hints.normal_property(_get_BuiltInFace, _set_BuiltInFace)
        def CopyFace(self) -> hints.Hresult: ...
        def _get_FaceId(self) -> hints.Incomplete: ...
        def _set_FaceId(self, pid: hints.Incomplete) -> hints.Hresult: ...
        FaceId = hints.normal_property(_get_FaceId, _set_FaceId)
        def PasteFace(self) -> hints.Hresult: ...
        def _get_ShortcutText(self) -> hints.Incomplete: ...
        def _set_ShortcutText(self, pbstrText: hints.Incomplete) -> hints.Hresult: ...
        ShortcutText = hints.normal_property(_get_ShortcutText, _set_ShortcutText)
        def _get_State(self) -> hints.Incomplete: ...
        def _set_State(self, pstate: hints.Incomplete) -> hints.Hresult: ...
        State = hints.normal_property(_get_State, _set_State)
        def _get_Style(self) -> hints.Incomplete: ...
        def _set_Style(self, pstyle: hints.Incomplete) -> hints.Hresult: ...
        Style = hints.normal_property(_get_Style, _set_Style)
        def _get_HyperlinkType(self) -> hints.Incomplete: ...
        def _set_HyperlinkType(self, phlType: hints.Incomplete) -> hints.Hresult: ...
        HyperlinkType = hints.normal_property(_get_HyperlinkType, _set_HyperlinkType)
        def _get_Picture(self) -> hints.Incomplete: ...
        def _set_Picture(self, ppdispPicture: hints.Incomplete) -> hints.Hresult: ...
        Picture = hints.normal_property(_get_Picture, _set_Picture)
        def _get_Mask(self) -> hints.Incomplete: ...
        def _set_Mask(self, ppipictdispMask: hints.Incomplete) -> hints.Hresult: ...
        Mask = hints.normal_property(_get_Mask, _set_Mask)
        def _get_InstanceIdPtr(self) -> hints.Incomplete: ...
        InstanceIdPtr = hints.normal_property(_get_InstanceIdPtr)


IAccessible._methods_ = [
    COMMETHOD(
        [dispid(-5000), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accParent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(-5001), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accChildCount',
        (['out', 'retval'], POINTER(c_int), 'pcountChildren')
    ),
    COMMETHOD(
        [dispid(-5002), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accChild',
        (['in'], VARIANT, 'varChild'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispChild')
    ),
    COMMETHOD(
        [dispid(-5003), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accName',
        (['in', 'optional'], VARIANT, 'varChild'),
        (['out', 'retval'], POINTER(BSTR), 'pszName')
    ),
    COMMETHOD(
        [dispid(-5004), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accValue',
        (['in', 'optional'], VARIANT, 'varChild'),
        (['out', 'retval'], POINTER(BSTR), 'pszValue')
    ),
    COMMETHOD(
        [dispid(-5005), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accDescription',
        (['in', 'optional'], VARIANT, 'varChild'),
        (['out', 'retval'], POINTER(BSTR), 'pszDescription')
    ),
    COMMETHOD(
        [dispid(-5006), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accRole',
        (['in', 'optional'], VARIANT, 'varChild'),
        (['out', 'retval'], POINTER(VARIANT), 'pvarRole')
    ),
    COMMETHOD(
        [dispid(-5007), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accState',
        (['in', 'optional'], VARIANT, 'varChild'),
        (['out', 'retval'], POINTER(VARIANT), 'pvarState')
    ),
    COMMETHOD(
        [dispid(-5008), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accHelp',
        (['in', 'optional'], VARIANT, 'varChild'),
        (['out', 'retval'], POINTER(BSTR), 'pszHelp')
    ),
    COMMETHOD(
        [dispid(-5009), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accHelpTopic',
        (['out'], POINTER(BSTR), 'pszHelpFile'),
        (['in', 'optional'], VARIANT, 'varChild'),
        (['out', 'retval'], POINTER(c_int), 'pidTopic')
    ),
    COMMETHOD(
        [dispid(-5010), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accKeyboardShortcut',
        (['in', 'optional'], VARIANT, 'varChild'),
        (['out', 'retval'], POINTER(BSTR), 'pszKeyboardShortcut')
    ),
    COMMETHOD(
        [dispid(-5011), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accFocus',
        (['out', 'retval'], POINTER(VARIANT), 'pvarChild')
    ),
    COMMETHOD(
        [dispid(-5012), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accSelection',
        (['out', 'retval'], POINTER(VARIANT), 'pvarChildren')
    ),
    COMMETHOD(
        [dispid(-5013), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'accDefaultAction',
        (['in', 'optional'], VARIANT, 'varChild'),
        (['out', 'retval'], POINTER(BSTR), 'pszDefaultAction')
    ),
    COMMETHOD(
        [dispid(-5014), 'hidden', 'nonbrowsable'],
        HRESULT,
        'accSelect',
        (['in'], c_int, 'flagsSelect'),
        (['in', 'optional'], VARIANT, 'varChild')
    ),
    COMMETHOD(
        [dispid(-5015), 'hidden', 'nonbrowsable'],
        HRESULT,
        'accLocation',
        (['out'], POINTER(c_int), 'pxLeft'),
        (['out'], POINTER(c_int), 'pyTop'),
        (['out'], POINTER(c_int), 'pcxWidth'),
        (['out'], POINTER(c_int), 'pcyHeight'),
        (['in', 'optional'], VARIANT, 'varChild')
    ),
    COMMETHOD(
        [dispid(-5016), 'hidden', 'nonbrowsable'],
        HRESULT,
        'accNavigate',
        (['in'], c_int, 'navDir'),
        (['in', 'optional'], VARIANT, 'varStart'),
        (['out', 'retval'], POINTER(VARIANT), 'pvarEndUpAt')
    ),
    COMMETHOD(
        [dispid(-5017), 'hidden', 'nonbrowsable'],
        HRESULT,
        'accHitTest',
        (['in'], c_int, 'xLeft'),
        (['in'], c_int, 'yTop'),
        (['out', 'retval'], POINTER(VARIANT), 'pvarChild')
    ),
    COMMETHOD(
        [dispid(-5018), 'hidden', 'nonbrowsable'],
        HRESULT,
        'accDoDefaultAction',
        (['in', 'optional'], VARIANT, 'varChild')
    ),
    COMMETHOD(
        [dispid(-5003), 'hidden', 'nonbrowsable', 'propput'],
        HRESULT,
        'accName',
        (['in', 'optional'], VARIANT, 'varChild'),
        (['in'], BSTR, 'pszName')
    ),
    COMMETHOD(
        [dispid(-5004), 'hidden', 'nonbrowsable', 'propput'],
        HRESULT,
        'accValue',
        (['in', 'optional'], VARIANT, 'varChild'),
        (['in'], BSTR, 'pszValue')
    ),
]

################################################################
# code template for IAccessible implementation
# class IAccessible_Impl(object):
#     @property
#     def accParent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def accChildCount(self):
#         '-no docstring-'
#         #return pcountChildren
#
#     @property
#     def accChild(self, varChild):
#         '-no docstring-'
#         #return ppdispChild
#
#     def _get(self, varChild):
#         '-no docstring-'
#         #return pszName
#     def _set(self, varChild, pszName):
#         '-no docstring-'
#     accName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, varChild):
#         '-no docstring-'
#         #return pszValue
#     def _set(self, varChild, pszValue):
#         '-no docstring-'
#     accValue = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def accDescription(self, varChild):
#         '-no docstring-'
#         #return pszDescription
#
#     @property
#     def accRole(self, varChild):
#         '-no docstring-'
#         #return pvarRole
#
#     @property
#     def accState(self, varChild):
#         '-no docstring-'
#         #return pvarState
#
#     @property
#     def accHelp(self, varChild):
#         '-no docstring-'
#         #return pszHelp
#
#     @property
#     def accHelpTopic(self, varChild):
#         '-no docstring-'
#         #return pszHelpFile, pidTopic
#
#     @property
#     def accKeyboardShortcut(self, varChild):
#         '-no docstring-'
#         #return pszKeyboardShortcut
#
#     @property
#     def accFocus(self):
#         '-no docstring-'
#         #return pvarChild
#
#     @property
#     def accSelection(self):
#         '-no docstring-'
#         #return pvarChildren
#
#     @property
#     def accDefaultAction(self, varChild):
#         '-no docstring-'
#         #return pszDefaultAction
#
#     def accSelect(self, flagsSelect, varChild):
#         '-no docstring-'
#         #return 
#
#     def accLocation(self, varChild):
#         '-no docstring-'
#         #return pxLeft, pyTop, pcxWidth, pcyHeight
#
#     def accNavigate(self, navDir, varStart):
#         '-no docstring-'
#         #return pvarEndUpAt
#
#     def accHitTest(self, xLeft, yTop):
#         '-no docstring-'
#         #return pvarChild
#
#     def accDoDefaultAction(self, varChild):
#         '-no docstring-'
#         #return 
#

_IMsoOleAccDispObj._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
]

################################################################
# code template for _IMsoOleAccDispObj implementation
# class _IMsoOleAccDispObj_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#


class CommandBar(_IMsoOleAccDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0304-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_BuiltIn(self) -> hints.Incomplete: ...
        BuiltIn = hints.normal_property(_get_BuiltIn)
        def _get_Context(self) -> hints.Incomplete: ...
        def _set_Context(self, pbstrContext: hints.Incomplete) -> hints.Hresult: ...
        Context = hints.normal_property(_get_Context, _set_Context)
        def _get_Controls(self) -> 'CommandBarControls': ...
        Controls = hints.normal_property(_get_Controls)
        def Delete(self) -> hints.Hresult: ...
        def _get_Enabled(self) -> hints.Incomplete: ...
        def _set_Enabled(self, pvarfEnabled: hints.Incomplete) -> hints.Hresult: ...
        Enabled = hints.normal_property(_get_Enabled, _set_Enabled)
        def FindControl(self, Type: hints.Incomplete = ..., Id: hints.Incomplete = ..., Tag: hints.Incomplete = ..., Visible: hints.Incomplete = ..., Recursive: hints.Incomplete = ...) -> 'CommandBarControl': ...
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, pdy: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_InstanceId(self) -> hints.Incomplete: ...
        InstanceId = hints.normal_property(_get_InstanceId)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, pxpLeft: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstrName: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_NameLocal(self) -> hints.Incomplete: ...
        def _set_NameLocal(self, pbstrNameLocal: hints.Incomplete) -> hints.Hresult: ...
        NameLocal = hints.normal_property(_get_NameLocal, _set_NameLocal)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, ppos: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_RowIndex(self) -> hints.Incomplete: ...
        def _set_RowIndex(self, piRow: hints.Incomplete) -> hints.Hresult: ...
        RowIndex = hints.normal_property(_get_RowIndex, _set_RowIndex)
        def _get_Protection(self) -> hints.Incomplete: ...
        def _set_Protection(self, pprot: hints.Incomplete) -> hints.Hresult: ...
        Protection = hints.normal_property(_get_Protection, _set_Protection)
        def Reset(self) -> hints.Hresult: ...
        def ShowPopup(self, x: hints.Incomplete = ..., y: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, pypTop: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, pvarfVisible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, pdx: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_AdaptiveMenu(self) -> hints.Incomplete: ...
        def _set_AdaptiveMenu(self, pvarfAdaptiveMenu: hints.Incomplete) -> hints.Hresult: ...
        AdaptiveMenu = hints.normal_property(_get_AdaptiveMenu, _set_AdaptiveMenu)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_InstanceIdPtr(self) -> hints.Incomplete: ...
        InstanceIdPtr = hints.normal_property(_get_InstanceIdPtr)



CommandBarControl._methods_ = [
    COMMETHOD(
        [dispid(1610874880), 'propget'],
        HRESULT,
        'BeginGroup',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfBeginGroup')
    ),
    COMMETHOD(
        [dispid(1610874880), 'propput'],
        HRESULT,
        'BeginGroup',
        (['in'], VARIANT_BOOL, 'pvarfBeginGroup')
    ),
    COMMETHOD(
        [dispid(1610874882), 'propget'],
        HRESULT,
        'BuiltIn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfBuiltIn')
    ),
    COMMETHOD(
        [dispid(1610874883), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'pbstrCaption')
    ),
    COMMETHOD(
        [dispid(1610874883), 'propput'],
        HRESULT,
        'Caption',
        (['in'], BSTR, 'pbstrCaption')
    ),
    COMMETHOD(
        [dispid(1610874885), 'hidden', 'propget'],
        HRESULT,
        'Control',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610874886)],
        HRESULT,
        'Copy',
        (['in', 'optional'], VARIANT, 'Bar'),
        (['in', 'optional'], VARIANT, 'Before'),
        (['out', 'retval'], POINTER(POINTER(CommandBarControl)), 'ppcbc')
    ),
    COMMETHOD(
        [dispid(1610874887)],
        HRESULT,
        'Delete',
        (['in', 'optional'], VARIANT, 'Temporary')
    ),
    COMMETHOD(
        [dispid(1610874888), 'propget'],
        HRESULT,
        'DescriptionText',
        (['out', 'retval'], POINTER(BSTR), 'pbstrText')
    ),
    COMMETHOD(
        [dispid(1610874888), 'propput'],
        HRESULT,
        'DescriptionText',
        (['in'], BSTR, 'pbstrText')
    ),
    COMMETHOD(
        [dispid(1610874890), 'propget'],
        HRESULT,
        'Enabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfEnabled')
    ),
    COMMETHOD(
        [dispid(1610874890), 'propput'],
        HRESULT,
        'Enabled',
        (['in'], VARIANT_BOOL, 'pvarfEnabled')
    ),
    COMMETHOD([dispid(1610874892)], HRESULT, 'Execute'),
    COMMETHOD(
        [dispid(1610874893), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_int), 'pdy')
    ),
    COMMETHOD(
        [dispid(1610874893), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_int, 'pdy')
    ),
    COMMETHOD(
        [dispid(1610874895), 'propget'],
        HRESULT,
        'HelpContextId',
        (['out', 'retval'], POINTER(c_int), 'pid')
    ),
    COMMETHOD(
        [dispid(1610874895), 'propput'],
        HRESULT,
        'HelpContextId',
        (['in'], c_int, 'pid')
    ),
    COMMETHOD(
        [dispid(1610874897), 'propget'],
        HRESULT,
        'HelpFile',
        (['out', 'retval'], POINTER(BSTR), 'pbstrFilename')
    ),
    COMMETHOD(
        [dispid(1610874897), 'propput'],
        HRESULT,
        'HelpFile',
        (['in'], BSTR, 'pbstrFilename')
    ),
    COMMETHOD(
        [dispid(1610874899), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(c_int), 'pid')
    ),
    COMMETHOD(
        [dispid(1610874900), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'pi')
    ),
    COMMETHOD(
        [dispid(1610874901), 'hidden', 'propget'],
        HRESULT,
        'InstanceId',
        (['out', 'retval'], POINTER(c_int), 'pid')
    ),
    COMMETHOD(
        [dispid(1610874902)],
        HRESULT,
        'Move',
        (['in', 'optional'], VARIANT, 'Bar'),
        (['in', 'optional'], VARIANT, 'Before'),
        (['out', 'retval'], POINTER(POINTER(CommandBarControl)), 'ppcbc')
    ),
    COMMETHOD(
        [dispid(1610874903), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_int), 'px')
    ),
    COMMETHOD(
        [dispid(1610874904), 'propget'],
        HRESULT,
        'OLEUsage',
        (['out', 'retval'], POINTER(MsoControlOLEUsage), 'pcou')
    ),
    COMMETHOD(
        [dispid(1610874904), 'propput'],
        HRESULT,
        'OLEUsage',
        (['in'], MsoControlOLEUsage, 'pcou')
    ),
    COMMETHOD(
        [dispid(1610874906), 'propget'],
        HRESULT,
        'OnAction',
        (['out', 'retval'], POINTER(BSTR), 'pbstrOnAction')
    ),
    COMMETHOD(
        [dispid(1610874906), 'propput'],
        HRESULT,
        'OnAction',
        (['in'], BSTR, 'pbstrOnAction')
    ),
    COMMETHOD(
        [dispid(1610874908), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(CommandBar)), 'ppcb')
    ),
    COMMETHOD(
        [dispid(1610874909), 'propget'],
        HRESULT,
        'Parameter',
        (['out', 'retval'], POINTER(BSTR), 'pbstrParam')
    ),
    COMMETHOD(
        [dispid(1610874909), 'propput'],
        HRESULT,
        'Parameter',
        (['in'], BSTR, 'pbstrParam')
    ),
    COMMETHOD(
        [dispid(1610874911), 'propget'],
        HRESULT,
        'Priority',
        (['out', 'retval'], POINTER(c_int), 'pnPri')
    ),
    COMMETHOD(
        [dispid(1610874911), 'propput'],
        HRESULT,
        'Priority',
        (['in'], c_int, 'pnPri')
    ),
    COMMETHOD([dispid(1610874913)], HRESULT, 'Reset'),
    COMMETHOD([dispid(1610874914)], HRESULT, 'SetFocus'),
    COMMETHOD(
        [dispid(1610874915), 'propget'],
        HRESULT,
        'Tag',
        (['out', 'retval'], POINTER(BSTR), 'pbstrTag')
    ),
    COMMETHOD(
        [dispid(1610874915), 'propput'],
        HRESULT,
        'Tag',
        (['in'], BSTR, 'pbstrTag')
    ),
    COMMETHOD(
        [dispid(1610874917), 'propget'],
        HRESULT,
        'TooltipText',
        (['out', 'retval'], POINTER(BSTR), 'pbstrTooltip')
    ),
    COMMETHOD(
        [dispid(1610874917), 'propput'],
        HRESULT,
        'TooltipText',
        (['in'], BSTR, 'pbstrTooltip')
    ),
    COMMETHOD(
        [dispid(1610874919), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_int), 'py')
    ),
    COMMETHOD(
        [dispid(1610874920), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoControlType), 'ptype')
    ),
    COMMETHOD(
        [dispid(1610874921), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfVisible')
    ),
    COMMETHOD(
        [dispid(1610874921), 'propput'],
        HRESULT,
        'Visible',
        (['in'], VARIANT_BOOL, 'pvarfVisible')
    ),
    COMMETHOD(
        [dispid(1610874923), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_int), 'pdx')
    ),
    COMMETHOD(
        [dispid(1610874923), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_int, 'pdx')
    ),
    COMMETHOD(
        [dispid(1610874925), 'propget'],
        HRESULT,
        'IsPriorityDropped',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfDropped')
    ),
    COMMETHOD([dispid(1610874926), 'hidden'], HRESULT, 'Reserved1'),
    COMMETHOD([dispid(1610874927), 'hidden'], HRESULT, 'Reserved2'),
    COMMETHOD([dispid(1610874928), 'hidden'], HRESULT, 'Reserved3'),
    COMMETHOD([dispid(1610874929), 'hidden'], HRESULT, 'Reserved4'),
    COMMETHOD([dispid(1610874930), 'hidden'], HRESULT, 'Reserved5'),
    COMMETHOD([dispid(1610874931), 'hidden'], HRESULT, 'Reserved6'),
    COMMETHOD([dispid(1610874932), 'hidden'], HRESULT, 'Reserved7'),
]

################################################################
# code template for CommandBarControl implementation
# class CommandBarControl_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pvarfBeginGroup
#     def _set(self, pvarfBeginGroup):
#         '-no docstring-'
#     BeginGroup = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def BuiltIn(self):
#         '-no docstring-'
#         #return pvarfBuiltIn
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrCaption
#     def _set(self, pbstrCaption):
#         '-no docstring-'
#     Caption = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Control(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def Copy(self, Bar, Before):
#         '-no docstring-'
#         #return ppcbc
#
#     def Delete(self, Temporary):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrText
#     def _set(self, pbstrText):
#         '-no docstring-'
#     DescriptionText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfEnabled
#     def _set(self, pvarfEnabled):
#         '-no docstring-'
#     Enabled = property(_get, _set, doc = _set.__doc__)
#
#     def Execute(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pdy
#     def _set(self, pdy):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pid
#     def _set(self, pid):
#         '-no docstring-'
#     HelpContextId = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrFilename
#     def _set(self, pbstrFilename):
#         '-no docstring-'
#     HelpFile = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pid
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return pi
#
#     @property
#     def InstanceId(self):
#         '-no docstring-'
#         #return pid
#
#     def Move(self, Bar, Before):
#         '-no docstring-'
#         #return ppcbc
#
#     @property
#     def Left(self):
#         '-no docstring-'
#         #return px
#
#     def _get(self):
#         '-no docstring-'
#         #return pcou
#     def _set(self, pcou):
#         '-no docstring-'
#     OLEUsage = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrOnAction
#     def _set(self, pbstrOnAction):
#         '-no docstring-'
#     OnAction = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppcb
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrParam
#     def _set(self, pbstrParam):
#         '-no docstring-'
#     Parameter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pnPri
#     def _set(self, pnPri):
#         '-no docstring-'
#     Priority = property(_get, _set, doc = _set.__doc__)
#
#     def Reset(self):
#         '-no docstring-'
#         #return 
#
#     def SetFocus(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrTag
#     def _set(self, pbstrTag):
#         '-no docstring-'
#     Tag = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrTooltip
#     def _set(self, pbstrTooltip):
#         '-no docstring-'
#     TooltipText = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Top(self):
#         '-no docstring-'
#         #return py
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return ptype
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfVisible
#     def _set(self, pvarfVisible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pdx
#     def _set(self, pdx):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def IsPriorityDropped(self):
#         '-no docstring-'
#         #return pvarfDropped
#
#     def Reserved1(self):
#         '-no docstring-'
#         #return 
#
#     def Reserved2(self):
#         '-no docstring-'
#         #return 
#
#     def Reserved3(self):
#         '-no docstring-'
#         #return 
#
#     def Reserved4(self):
#         '-no docstring-'
#         #return 
#
#     def Reserved5(self):
#         '-no docstring-'
#         #return 
#
#     def Reserved6(self):
#         '-no docstring-'
#         #return 
#
#     def Reserved7(self):
#         '-no docstring-'
#         #return 
#

_CommandBarButton._methods_ = [
    COMMETHOD(
        [dispid(1610940416), 'propget'],
        HRESULT,
        'BuiltInFace',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfBuiltIn')
    ),
    COMMETHOD(
        [dispid(1610940416), 'propput'],
        HRESULT,
        'BuiltInFace',
        (['in'], VARIANT_BOOL, 'pvarfBuiltIn')
    ),
    COMMETHOD([dispid(1610940418)], HRESULT, 'CopyFace'),
    COMMETHOD(
        [dispid(1610940419), 'propget'],
        HRESULT,
        'FaceId',
        (['out', 'retval'], POINTER(c_int), 'pid')
    ),
    COMMETHOD(
        [dispid(1610940419), 'propput'],
        HRESULT,
        'FaceId',
        (['in'], c_int, 'pid')
    ),
    COMMETHOD([dispid(1610940421)], HRESULT, 'PasteFace'),
    COMMETHOD(
        [dispid(1610940422), 'propget'],
        HRESULT,
        'ShortcutText',
        (['out', 'retval'], POINTER(BSTR), 'pbstrText')
    ),
    COMMETHOD(
        [dispid(1610940422), 'propput'],
        HRESULT,
        'ShortcutText',
        (['in'], BSTR, 'pbstrText')
    ),
    COMMETHOD(
        [dispid(1610940424), 'propget'],
        HRESULT,
        'State',
        (['out', 'retval'], POINTER(MsoButtonState), 'pstate')
    ),
    COMMETHOD(
        [dispid(1610940424), 'propput'],
        HRESULT,
        'State',
        (['in'], MsoButtonState, 'pstate')
    ),
    COMMETHOD(
        [dispid(1610940426), 'propget'],
        HRESULT,
        'Style',
        (['out', 'retval'], POINTER(MsoButtonStyle), 'pstyle')
    ),
    COMMETHOD(
        [dispid(1610940426), 'propput'],
        HRESULT,
        'Style',
        (['in'], MsoButtonStyle, 'pstyle')
    ),
    COMMETHOD(
        [dispid(1610940428), 'propget'],
        HRESULT,
        'HyperlinkType',
        (
            ['out', 'retval'],
            POINTER(MsoCommandBarButtonHyperlinkType),
            'phlType',
        )
    ),
    COMMETHOD(
        [dispid(1610940428), 'propput'],
        HRESULT,
        'HyperlinkType',
        (['in'], MsoCommandBarButtonHyperlinkType, 'phlType')
    ),
    COMMETHOD(
        [dispid(1610940430), 'propget'],
        HRESULT,
        'Picture',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)),
            'ppdispPicture',
        )
    ),
    COMMETHOD(
        [dispid(1610940430), 'propput'],
        HRESULT,
        'Picture',
        (
            ['in'],
            POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp),
            'ppdispPicture',
        )
    ),
    COMMETHOD(
        [dispid(1610940432), 'propget'],
        HRESULT,
        'Mask',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)),
            'ppipictdispMask',
        )
    ),
    COMMETHOD(
        [dispid(1610940432), 'propput'],
        HRESULT,
        'Mask',
        (
            ['in'],
            POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp),
            'ppipictdispMask',
        )
    ),
    COMMETHOD(
        [dispid(1610940434), 'hidden', 'propget'],
        HRESULT,
        'InstanceIdPtr',
        (['out', 'retval'], POINTER(VARIANT), 'pvarPic')
    ),
]

################################################################
# code template for _CommandBarButton implementation
# class _CommandBarButton_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pvarfBuiltIn
#     def _set(self, pvarfBuiltIn):
#         '-no docstring-'
#     BuiltInFace = property(_get, _set, doc = _set.__doc__)
#
#     def CopyFace(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pid
#     def _set(self, pid):
#         '-no docstring-'
#     FaceId = property(_get, _set, doc = _set.__doc__)
#
#     def PasteFace(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrText
#     def _set(self, pbstrText):
#         '-no docstring-'
#     ShortcutText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pstate
#     def _set(self, pstate):
#         '-no docstring-'
#     State = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pstyle
#     def _set(self, pstyle):
#         '-no docstring-'
#     Style = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return phlType
#     def _set(self, phlType):
#         '-no docstring-'
#     HyperlinkType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ppdispPicture
#     def _set(self, ppdispPicture):
#         '-no docstring-'
#     Picture = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ppipictdispMask
#     def _set(self, ppipictdispMask):
#         '-no docstring-'
#     Mask = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def InstanceIdPtr(self):
#         '-no docstring-'
#         #return pvarPic
#


class EffectParameter(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03CF-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Value(self) -> hints.Incomplete: ...
        def _set_Value(self, Value: hints.Incomplete) -> hints.Hresult: ...
        Value = hints.normal_property(_get_Value, _set_Value)


EffectParameter._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(VARIANT), 'Value')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'Value',
        (['in'], VARIANT, 'Value')
    ),
]

################################################################
# code template for EffectParameter implementation
# class EffectParameter_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     def _get(self):
#         '-no docstring-'
#         #return Value
#     def _set(self, Value):
#         '-no docstring-'
#     Value = property(_get, _set, doc = _set.__doc__)
#


class IMsoDownBars(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C172D-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


IMsoDownBars._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppfill')
    ),
    COMMETHOD(
        [dispid(1610743815), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(253)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(254)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoDownBars implementation
# class IMsoDownBars_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Delete(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppfill
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#


class IBlogPictureExtensibility(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03C5-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def BlogPictureProviderProperties(self) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        def CreatePictureAccount(self, Account: hints.Incomplete, BlogProvider: hints.Incomplete, ParentWindow: hints.Incomplete, Document: hints.Incomplete) -> hints.Hresult: ...
        def PublishPicture(self, Account: hints.Incomplete, ParentWindow: hints.Incomplete, Document: hints.Incomplete, Image: hints.Incomplete, ImageType: hints.Incomplete) -> hints.Incomplete: ...


IBlogPictureExtensibility._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'BlogPictureProviderProperties',
        (['out'], POINTER(BSTR), 'BlogPictureProvider'),
        (['out'], POINTER(BSTR), 'FriendlyName')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'CreatePictureAccount',
        (['in'], BSTR, 'Account'),
        (['in'], BSTR, 'BlogProvider'),
        (['in'], c_int, 'ParentWindow'),
        (['in'], POINTER(IDispatch), 'Document')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'PublishPicture',
        (['in'], BSTR, 'Account'),
        (['in'], c_int, 'ParentWindow'),
        (['in'], POINTER(IDispatch), 'Document'),
        (['in'], POINTER(IUnknown), 'Image'),
        (['out'], POINTER(BSTR), 'PictureURI'),
        (['in'], c_int, 'ImageType')
    ),
]

################################################################
# code template for IBlogPictureExtensibility implementation
# class IBlogPictureExtensibility_Impl(object):
#     def BlogPictureProviderProperties(self):
#         '-no docstring-'
#         #return BlogPictureProvider, FriendlyName
#
#     def CreatePictureAccount(self, Account, BlogProvider, ParentWindow, Document):
#         '-no docstring-'
#         #return 
#
#     def PublishPicture(self, Account, ParentWindow, Document, Image, ImageType):
#         '-no docstring-'
#         #return PictureURI
#


class IConverterPreferences(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03D4-0000-0000-C000-000000000046}')
    _idlflags_ = ['oleautomation']

    if TYPE_CHECKING:  # commembers
        def HrGetMacroEnabled(self) -> hints.Incomplete: ...
        def HrCheckFormat(self) -> hints.Incomplete: ...
        def HrGetLossySave(self) -> hints.Incomplete: ...


IConverterPreferences._methods_ = [
    COMMETHOD(
        [],
        HRESULT,
        'HrGetMacroEnabled',
        (['out'], POINTER(c_int), 'pfMacroEnabled')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrCheckFormat',
        (['out'], POINTER(c_int), 'pFormat')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrGetLossySave',
        (['out'], POINTER(c_int), 'pfLossySave')
    ),
]

################################################################
# code template for IConverterPreferences implementation
# class IConverterPreferences_Impl(object):
#     def HrGetMacroEnabled(self):
#         '-no docstring-'
#         #return pfMacroEnabled
#
#     def HrCheckFormat(self):
#         '-no docstring-'
#         #return pFormat
#
#     def HrGetLossySave(self):
#         '-no docstring-'
#         #return pfLossySave
#

IMsoBorder._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propput'],
        HRESULT,
        'Color',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propput'],
        HRESULT,
        'ColorIndex',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'ColorIndex',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'LineStyle',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'LineStyle',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'Weight',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'Weight',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
]

################################################################
# code template for IMsoBorder implementation
# class IMsoBorder_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Color = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     ColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     LineStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Weight = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#

Crop._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'PictureOffsetX',
        (['out', 'retval'], POINTER(c_float), 'PictureOffsetX')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'PictureOffsetX',
        (['in'], c_float, 'PictureOffsetX')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'PictureOffsetY',
        (['out', 'retval'], POINTER(c_float), 'PictureOffsetY')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'PictureOffsetY',
        (['in'], c_float, 'PictureOffsetY')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'PictureWidth',
        (['out', 'retval'], POINTER(c_float), 'PictureWidth')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'PictureWidth',
        (['in'], c_float, 'PictureWidth')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'PictureHeight',
        (['out', 'retval'], POINTER(c_float), 'PictureHeight')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'PictureHeight',
        (['in'], c_float, 'PictureHeight')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'ShapeLeft',
        (['out', 'retval'], POINTER(c_float), 'ShapeLeft')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'ShapeLeft',
        (['in'], c_float, 'ShapeLeft')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'ShapeTop',
        (['out', 'retval'], POINTER(c_float), 'ShapeTop')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'ShapeTop',
        (['in'], c_float, 'ShapeTop')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'ShapeWidth',
        (['out', 'retval'], POINTER(c_float), 'ShapeWidth')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'ShapeWidth',
        (['in'], c_float, 'ShapeWidth')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'ShapeHeight',
        (['out', 'retval'], POINTER(c_float), 'ShapeHeight')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'ShapeHeight',
        (['in'], c_float, 'ShapeHeight')
    ),
]

################################################################
# code template for Crop implementation
# class Crop_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return PictureOffsetX
#     def _set(self, PictureOffsetX):
#         '-no docstring-'
#     PictureOffsetX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PictureOffsetY
#     def _set(self, PictureOffsetY):
#         '-no docstring-'
#     PictureOffsetY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PictureWidth
#     def _set(self, PictureWidth):
#         '-no docstring-'
#     PictureWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PictureHeight
#     def _set(self, PictureHeight):
#         '-no docstring-'
#     PictureHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShapeLeft
#     def _set(self, ShapeLeft):
#         '-no docstring-'
#     ShapeLeft = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShapeTop
#     def _set(self, ShapeTop):
#         '-no docstring-'
#     ShapeTop = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShapeWidth
#     def _set(self, ShapeWidth):
#         '-no docstring-'
#     ShapeWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShapeHeight
#     def _set(self, ShapeHeight):
#         '-no docstring-'
#     ShapeHeight = property(_get, _set, doc = _set.__doc__)
#


class ShadowFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C031B-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def IncrementOffsetX(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementOffsetY(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def _get_ForeColor(self) -> 'ColorFormat': ...
        def _set_ForeColor(self, ForeColor: hints.Incomplete) -> hints.Hresult: ...
        ForeColor = hints.normal_property(_get_ForeColor, _set_ForeColor)
        def _get_Obscured(self) -> hints.Incomplete: ...
        def _set_Obscured(self, Obscured: hints.Incomplete) -> hints.Hresult: ...
        Obscured = hints.normal_property(_get_Obscured, _set_Obscured)
        def _get_OffsetX(self) -> hints.Incomplete: ...
        def _set_OffsetX(self, OffsetX: hints.Incomplete) -> hints.Hresult: ...
        OffsetX = hints.normal_property(_get_OffsetX, _set_OffsetX)
        def _get_OffsetY(self) -> hints.Incomplete: ...
        def _set_OffsetY(self, OffsetY: hints.Incomplete) -> hints.Hresult: ...
        OffsetY = hints.normal_property(_get_OffsetY, _set_OffsetY)
        def _get_Transparency(self) -> hints.Incomplete: ...
        def _set_Transparency(self, Transparency: hints.Incomplete) -> hints.Hresult: ...
        Transparency = hints.normal_property(_get_Transparency, _set_Transparency)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Style(self) -> hints.Incomplete: ...
        def _set_Style(self, ShadowStyle: hints.Incomplete) -> hints.Hresult: ...
        Style = hints.normal_property(_get_Style, _set_Style)
        def _get_Blur(self) -> hints.Incomplete: ...
        def _set_Blur(self, Blur: hints.Incomplete) -> hints.Hresult: ...
        Blur = hints.normal_property(_get_Blur, _set_Blur)
        def _get_Size(self) -> hints.Incomplete: ...
        def _set_Size(self, Size: hints.Incomplete) -> hints.Hresult: ...
        Size = hints.normal_property(_get_Size, _set_Size)
        def _get_RotateWithShape(self) -> hints.Incomplete: ...
        def _set_RotateWithShape(self, RotateWithShape: hints.Incomplete) -> hints.Hresult: ...
        RotateWithShape = hints.normal_property(_get_RotateWithShape, _set_RotateWithShape)


class ColorFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0312-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_RGB(self) -> hints.Incomplete: ...
        def _set_RGB(self, RGB: hints.Incomplete) -> hints.Hresult: ...
        RGB = hints.normal_property(_get_RGB, _set_RGB)
        def _get_SchemeColor(self) -> hints.Incomplete: ...
        def _set_SchemeColor(self, SchemeColor: hints.Incomplete) -> hints.Hresult: ...
        SchemeColor = hints.normal_property(_get_SchemeColor, _set_SchemeColor)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_TintAndShade(self) -> hints.Incomplete: ...
        def _set_TintAndShade(self, pValue: hints.Incomplete) -> hints.Hresult: ...
        TintAndShade = hints.normal_property(_get_TintAndShade, _set_TintAndShade)
        def _get_ObjectThemeColor(self) -> hints.Incomplete: ...
        def _set_ObjectThemeColor(self, ObjectThemeColor: hints.Incomplete) -> hints.Hresult: ...
        ObjectThemeColor = hints.normal_property(_get_ObjectThemeColor, _set_ObjectThemeColor)
        def _get_Brightness(self) -> hints.Incomplete: ...
        def _set_Brightness(self, Brightness: hints.Incomplete) -> hints.Hresult: ...
        Brightness = hints.normal_property(_get_Brightness, _set_Brightness)



ShadowFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'IncrementOffsetX',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'IncrementOffsetY',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'ForeColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'ForeColor',
        (['in'], POINTER(ColorFormat), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Obscured',
        (['out', 'retval'], POINTER(MsoTriState), 'Obscured')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'Obscured',
        (['in'], MsoTriState, 'Obscured')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'OffsetX',
        (['out', 'retval'], POINTER(c_float), 'OffsetX')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'OffsetX',
        (['in'], c_float, 'OffsetX')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'OffsetY',
        (['out', 'retval'], POINTER(c_float), 'OffsetY')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'OffsetY',
        (['in'], c_float, 'OffsetY')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Transparency',
        (['out', 'retval'], POINTER(c_float), 'Transparency')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'Transparency',
        (['in'], c_float, 'Transparency')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoShadowType), 'Type')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'Type',
        (['in'], MsoShadowType, 'Type')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(MsoTriState), 'Visible')
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'Visible',
        (['in'], MsoTriState, 'Visible')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'Style',
        (['out', 'retval'], POINTER(MsoShadowStyle), 'ShadowStyle')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'Style',
        (['in'], MsoShadowStyle, 'ShadowStyle')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'Blur',
        (['out', 'retval'], POINTER(c_float), 'Blur')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'Blur',
        (['in'], c_float, 'Blur')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Size',
        (['out', 'retval'], POINTER(c_float), 'Size')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'Size',
        (['in'], c_float, 'Size')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'RotateWithShape',
        (['out', 'retval'], POINTER(MsoTriState), 'RotateWithShape')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'RotateWithShape',
        (['in'], MsoTriState, 'RotateWithShape')
    ),
]

################################################################
# code template for ShadowFormat implementation
# class ShadowFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def IncrementOffsetX(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementOffsetY(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return ForeColor
#     def _set(self, ForeColor):
#         '-no docstring-'
#     ForeColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Obscured
#     def _set(self, Obscured):
#         '-no docstring-'
#     Obscured = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return OffsetX
#     def _set(self, OffsetX):
#         '-no docstring-'
#     OffsetX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return OffsetY
#     def _set(self, OffsetY):
#         '-no docstring-'
#     OffsetY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Transparency
#     def _set(self, Transparency):
#         '-no docstring-'
#     Transparency = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ShadowStyle
#     def _set(self, ShadowStyle):
#         '-no docstring-'
#     Style = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Blur
#     def _set(self, Blur):
#         '-no docstring-'
#     Blur = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Size
#     def _set(self, Size):
#         '-no docstring-'
#     Size = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotateWithShape
#     def _set(self, RotateWithShape):
#         '-no docstring-'
#     RotateWithShape = property(_get, _set, doc = _set.__doc__)
#


class CategoryCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1734-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'IMsoCategory': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__Default(self, Index: hints.Incomplete) -> 'IMsoCategory': ...
        _Default = hints.named_property('_Default', _get__Default)


class IMsoCategory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1733-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_IsFiltered(self) -> hints.Incomplete: ...
        def _set_IsFiltered(self, pfIsFiltered: hints.Incomplete) -> hints.Hresult: ...
        IsFiltered = hints.normal_property(_get_IsFiltered, _set_IsFiltered)


CategoryCollection._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'cCategory')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoCategory)), 'ppcategory')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['nonbrowsable', 'propget'],
        HRESULT,
        '_Default',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoCategory)), 'RHS')
    ),
]

################################################################
# code template for CategoryCollection implementation
# class CategoryCollection_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return cCategory
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppcategory
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#


class SmartArtLayouts(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03C9-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Item(self, Index: hints.Incomplete) -> 'SmartArtLayout': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)


class SmartArtLayout(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03CA-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Description(self) -> hints.Incomplete: ...
        Description = hints.normal_property(_get_Description)
        def _get_Category(self) -> hints.Incomplete: ...
        Category = hints.normal_property(_get_Category)


SmartArtLayouts._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SmartArtLayout)), 'SmartArtLayout')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
]

################################################################
# code template for SmartArtLayouts implementation
# class SmartArtLayouts_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return SmartArtLayout
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#


class Model3DFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03D8-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_AutoFit(self) -> hints.Incomplete: ...
        def _set_AutoFit(self, AutoFit: hints.Incomplete) -> hints.Hresult: ...
        AutoFit = hints.normal_property(_get_AutoFit, _set_AutoFit)
        def _get_RotationX(self) -> hints.Incomplete: ...
        def _set_RotationX(self, RotationX: hints.Incomplete) -> hints.Hresult: ...
        RotationX = hints.normal_property(_get_RotationX, _set_RotationX)
        def _get_RotationY(self) -> hints.Incomplete: ...
        def _set_RotationY(self, RotationY: hints.Incomplete) -> hints.Hresult: ...
        RotationY = hints.normal_property(_get_RotationY, _set_RotationY)
        def _get_RotationZ(self) -> hints.Incomplete: ...
        def _set_RotationZ(self, RotationZ: hints.Incomplete) -> hints.Hresult: ...
        RotationZ = hints.normal_property(_get_RotationZ, _set_RotationZ)
        def _get_FieldOfView(self) -> hints.Incomplete: ...
        def _set_FieldOfView(self, FOV: hints.Incomplete) -> hints.Hresult: ...
        FieldOfView = hints.normal_property(_get_FieldOfView, _set_FieldOfView)
        def _get_CameraPositionX(self) -> hints.Incomplete: ...
        def _set_CameraPositionX(self, PositionX: hints.Incomplete) -> hints.Hresult: ...
        CameraPositionX = hints.normal_property(_get_CameraPositionX, _set_CameraPositionX)
        def _get_CameraPositionY(self) -> hints.Incomplete: ...
        def _set_CameraPositionY(self, PositionY: hints.Incomplete) -> hints.Hresult: ...
        CameraPositionY = hints.normal_property(_get_CameraPositionY, _set_CameraPositionY)
        def _get_CameraPositionZ(self) -> hints.Incomplete: ...
        def _set_CameraPositionZ(self, PositionZ: hints.Incomplete) -> hints.Hresult: ...
        CameraPositionZ = hints.normal_property(_get_CameraPositionZ, _set_CameraPositionZ)
        def _get_LookAtPointX(self) -> hints.Incomplete: ...
        def _set_LookAtPointX(self, LookAtPointX: hints.Incomplete) -> hints.Hresult: ...
        LookAtPointX = hints.normal_property(_get_LookAtPointX, _set_LookAtPointX)
        def _get_LookAtPointY(self) -> hints.Incomplete: ...
        def _set_LookAtPointY(self, LookAtPointY: hints.Incomplete) -> hints.Hresult: ...
        LookAtPointY = hints.normal_property(_get_LookAtPointY, _set_LookAtPointY)
        def _get_LookAtPointZ(self) -> hints.Incomplete: ...
        def _set_LookAtPointZ(self, LookAtPointZ: hints.Incomplete) -> hints.Hresult: ...
        LookAtPointZ = hints.normal_property(_get_LookAtPointZ, _set_LookAtPointZ)
        def ResetModel(self, ResetSize: hints.Incomplete = ...) -> hints.Hresult: ...
        def IncrementRotationX(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationY(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationZ(self, Increment: hints.Incomplete) -> hints.Hresult: ...


Model3DFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'AutoFit',
        (['out', 'retval'], POINTER(MsoTriState), 'AutoFit')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'AutoFit',
        (['in'], MsoTriState, 'AutoFit')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'RotationX',
        (['out', 'retval'], POINTER(c_float), 'RotationX')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'RotationX',
        (['in'], c_float, 'RotationX')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'RotationY',
        (['out', 'retval'], POINTER(c_float), 'RotationY')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'RotationY',
        (['in'], c_float, 'RotationY')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'RotationZ',
        (['out', 'retval'], POINTER(c_float), 'RotationZ')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'RotationZ',
        (['in'], c_float, 'RotationZ')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'FieldOfView',
        (['out', 'retval'], POINTER(c_float), 'FOV')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'FieldOfView',
        (['in'], c_float, 'FOV')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'CameraPositionX',
        (['out', 'retval'], POINTER(c_float), 'PositionX')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'CameraPositionX',
        (['in'], c_float, 'PositionX')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'CameraPositionY',
        (['out', 'retval'], POINTER(c_float), 'PositionY')
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'CameraPositionY',
        (['in'], c_float, 'PositionY')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'CameraPositionZ',
        (['out', 'retval'], POINTER(c_float), 'PositionZ')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'CameraPositionZ',
        (['in'], c_float, 'PositionZ')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'LookAtPointX',
        (['out', 'retval'], POINTER(c_float), 'LookAtPointX')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'LookAtPointX',
        (['in'], c_float, 'LookAtPointX')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'LookAtPointY',
        (['out', 'retval'], POINTER(c_float), 'LookAtPointY')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'LookAtPointY',
        (['in'], c_float, 'LookAtPointY')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'LookAtPointZ',
        (['out', 'retval'], POINTER(c_float), 'LookAtPointZ')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'LookAtPointZ',
        (['in'], c_float, 'LookAtPointZ')
    ),
    COMMETHOD(
        [dispid(111)],
        HRESULT,
        'ResetModel',
        (['in', 'optional'], VARIANT_BOOL, 'ResetSize', False)
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'IncrementRotationX',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(113)],
        HRESULT,
        'IncrementRotationY',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(114)],
        HRESULT,
        'IncrementRotationZ',
        (['in'], c_float, 'Increment')
    ),
]

################################################################
# code template for Model3DFormat implementation
# class Model3DFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoFit
#     def _set(self, AutoFit):
#         '-no docstring-'
#     AutoFit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationX
#     def _set(self, RotationX):
#         '-no docstring-'
#     RotationX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationY
#     def _set(self, RotationY):
#         '-no docstring-'
#     RotationY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationZ
#     def _set(self, RotationZ):
#         '-no docstring-'
#     RotationZ = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FOV
#     def _set(self, FOV):
#         '-no docstring-'
#     FieldOfView = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PositionX
#     def _set(self, PositionX):
#         '-no docstring-'
#     CameraPositionX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PositionY
#     def _set(self, PositionY):
#         '-no docstring-'
#     CameraPositionY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PositionZ
#     def _set(self, PositionZ):
#         '-no docstring-'
#     CameraPositionZ = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LookAtPointX
#     def _set(self, LookAtPointX):
#         '-no docstring-'
#     LookAtPointX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LookAtPointY
#     def _set(self, LookAtPointY):
#         '-no docstring-'
#     LookAtPointY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LookAtPointZ
#     def _set(self, LookAtPointZ):
#         '-no docstring-'
#     LookAtPointZ = property(_get, _set, doc = _set.__doc__)
#
#     def ResetModel(self, ResetSize):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationX(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationY(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationZ(self, Increment):
#         '-no docstring-'
#         #return 
#


class ICommandBarButtonEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{55F88890-7708-11D1-ACEB-006008961DA5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Click(self, Ctrl: hints.Incomplete, CancelDefault: hints.Incomplete) -> hints.Incomplete: ...


class CommandBarButton(CoClass):
    _reg_clsid_ = GUID('{55F88891-7708-11D1-ACEB-006008961DA5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}', 2, 8)


class _CommandBarButtonEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0351-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        def Click(self, Ctrl: hints.Incomplete, CancelDefault: hints.Incomplete) -> hints.Incomplete: ...


CommandBarButton._com_interfaces_ = [_CommandBarButton]
CommandBarButton._outgoing_interfaces_ = [_CommandBarButtonEvents]

ICommandBarButtonEvents._methods_ = [
    COMMETHOD(
        [dispid(1)],
        None,
        'Click',
        (['in'], POINTER(CommandBarButton), 'Ctrl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'CancelDefault')
    ),
]

################################################################
# code template for ICommandBarButtonEvents implementation
# class ICommandBarButtonEvents_Impl(object):
#     def Click(self, Ctrl):
#         '-no docstring-'
#         #return CancelDefault
#


class IMsoDiagram(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C036D-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Nodes(self) -> 'DiagramNodes': ...
        Nodes = hints.normal_property(_get_Nodes)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_AutoLayout(self) -> hints.Incomplete: ...
        def _set_AutoLayout(self, AutoLayout: hints.Incomplete) -> hints.Hresult: ...
        AutoLayout = hints.normal_property(_get_AutoLayout, _set_AutoLayout)
        def _get_Reverse(self) -> hints.Incomplete: ...
        def _set_Reverse(self, Reverse: hints.Incomplete) -> hints.Hresult: ...
        Reverse = hints.normal_property(_get_Reverse, _set_Reverse)
        def _get_AutoFormat(self) -> hints.Incomplete: ...
        def _set_AutoFormat(self, AutoFormat: hints.Incomplete) -> hints.Hresult: ...
        AutoFormat = hints.normal_property(_get_AutoFormat, _set_AutoFormat)
        def Convert(self, Type: hints.Incomplete) -> hints.Hresult: ...
        def FitText(self) -> hints.Hresult: ...


class DiagramNodes(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C036E-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Item(self, Index: hints.Incomplete) -> 'DiagramNode': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def SelectAll(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)



IMsoDiagram._methods_ = [
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Nodes',
        (['out', 'retval'], POINTER(POINTER(DiagramNodes)), 'Nodes')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoDiagramType), 'Type')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'AutoLayout',
        (['out', 'retval'], POINTER(MsoTriState), 'AutoLayout')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'AutoLayout',
        (['in'], MsoTriState, 'AutoLayout')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Reverse',
        (['out', 'retval'], POINTER(MsoTriState), 'Reverse')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'Reverse',
        (['in'], MsoTriState, 'Reverse')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'AutoFormat',
        (['out', 'retval'], POINTER(MsoTriState), 'AutoFormat')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'AutoFormat',
        (['in'], MsoTriState, 'AutoFormat')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'Convert',
        (['in'], MsoDiagramType, 'Type')
    ),
    COMMETHOD([dispid(11)], HRESULT, 'FitText'),
]

################################################################
# code template for IMsoDiagram implementation
# class IMsoDiagram_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Nodes(self):
#         '-no docstring-'
#         #return Nodes
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoLayout
#     def _set(self, AutoLayout):
#         '-no docstring-'
#     AutoLayout = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Reverse
#     def _set(self, Reverse):
#         '-no docstring-'
#     Reverse = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoFormat
#     def _set(self, AutoFormat):
#         '-no docstring-'
#     AutoFormat = property(_get, _set, doc = _set.__doc__)
#
#     def Convert(self, Type):
#         '-no docstring-'
#         #return 
#
#     def FitText(self):
#         '-no docstring-'
#         #return 
#


class CommandBarComboBox(CoClass):
    _reg_clsid_ = GUID('{55F88897-7708-11D1-ACEB-006008961DA5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}', 2, 8)


class _CommandBarComboBox(CommandBarControl):
    _case_insensitive_ = True
    _iid_ = GUID('{000C030C-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def AddItem(self, Text: hints.Incomplete, Index: hints.Incomplete = ...) -> hints.Hresult: ...
        def Clear(self) -> hints.Hresult: ...
        def _get_DropDownLines(self) -> hints.Incomplete: ...
        def _set_DropDownLines(self, pcLines: hints.Incomplete) -> hints.Hresult: ...
        DropDownLines = hints.normal_property(_get_DropDownLines, _set_DropDownLines)
        def _get_DropDownWidth(self) -> hints.Incomplete: ...
        def _set_DropDownWidth(self, pdx: hints.Incomplete) -> hints.Hresult: ...
        DropDownWidth = hints.normal_property(_get_DropDownWidth, _set_DropDownWidth)
        def _get_List(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        def _set_List(self, Index: hints.Incomplete, pbstrItem: hints.Incomplete) -> hints.Hresult: ...
        List = hints.named_property('List', _get_List, _set_List)
        def _get_ListCount(self) -> hints.Incomplete: ...
        ListCount = hints.normal_property(_get_ListCount)
        def _get_ListHeaderCount(self) -> hints.Incomplete: ...
        def _set_ListHeaderCount(self, pcItems: hints.Incomplete) -> hints.Hresult: ...
        ListHeaderCount = hints.normal_property(_get_ListHeaderCount, _set_ListHeaderCount)
        def _get_ListIndex(self) -> hints.Incomplete: ...
        def _set_ListIndex(self, pi: hints.Incomplete) -> hints.Hresult: ...
        ListIndex = hints.normal_property(_get_ListIndex, _set_ListIndex)
        def RemoveItem(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def _get_Style(self) -> hints.Incomplete: ...
        def _set_Style(self, pstyle: hints.Incomplete) -> hints.Hresult: ...
        Style = hints.normal_property(_get_Style, _set_Style)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, pbstrText: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_InstanceIdPtr(self) -> hints.Incomplete: ...
        InstanceIdPtr = hints.normal_property(_get_InstanceIdPtr)


class _CommandBarComboBoxEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0354-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        def Change(self, Ctrl: hints.Incomplete) -> hints.Incomplete: ...


CommandBarComboBox._com_interfaces_ = [_CommandBarComboBox]
CommandBarComboBox._outgoing_interfaces_ = [_CommandBarComboBoxEvents]


class SignatureProvider(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD6A3-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def GenerateSignatureLineImage(self, siglnimg: hints.Incomplete, psigsetup: hints.Incomplete, psiginfo: hints.Incomplete, XmlDsigStream: hints.Incomplete) -> hints.Incomplete: ...
        def ShowSignatureSetup(self, ParentWindow: hints.Incomplete, psigsetup: hints.Incomplete) -> hints.Hresult: ...
        def ShowSigningCeremony(self, ParentWindow: hints.Incomplete, psigsetup: hints.Incomplete, psiginfo: hints.Incomplete) -> hints.Hresult: ...
        def SignXmlDsig(self, QueryContinue: hints.Incomplete, psigsetup: hints.Incomplete, psiginfo: hints.Incomplete, XmlDsigStream: hints.Incomplete) -> hints.Hresult: ...
        def NotifySignatureAdded(self, ParentWindow: hints.Incomplete, psigsetup: hints.Incomplete, psiginfo: hints.Incomplete) -> hints.Hresult: ...
        def VerifyXmlDsig(self, QueryContinue: hints.Incomplete, psigsetup: hints.Incomplete, psiginfo: hints.Incomplete, XmlDsigStream: hints.Incomplete, pcontverres: hints.Incomplete, pcertverres: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        def ShowSignatureDetails(self, ParentWindow: hints.Incomplete, psigsetup: hints.Incomplete, psiginfo: hints.Incomplete, XmlDsigStream: hints.Incomplete, pcontverres: hints.Incomplete, pcertverres: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        def GetProviderDetail(self, sigprovdet: hints.Incomplete) -> hints.Incomplete: ...
        def HashStream(self, QueryContinue: hints.Incomplete, Stream: hints.Incomplete) -> hints.Incomplete: ...




class SignatureSetup(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD6A1-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ReadOnly(self) -> hints.Incomplete: ...
        ReadOnly = hints.normal_property(_get_ReadOnly)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_SignatureProvider(self) -> hints.Incomplete: ...
        SignatureProvider = hints.normal_property(_get_SignatureProvider)
        def _get_SuggestedSigner(self) -> hints.Incomplete: ...
        def _set_SuggestedSigner(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SuggestedSigner = hints.normal_property(_get_SuggestedSigner, _set_SuggestedSigner)
        def _get_SuggestedSignerLine2(self) -> hints.Incomplete: ...
        def _set_SuggestedSignerLine2(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SuggestedSignerLine2 = hints.normal_property(_get_SuggestedSignerLine2, _set_SuggestedSignerLine2)
        def _get_SuggestedSignerEmail(self) -> hints.Incomplete: ...
        def _set_SuggestedSignerEmail(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SuggestedSignerEmail = hints.normal_property(_get_SuggestedSignerEmail, _set_SuggestedSignerEmail)
        def _get_SigningInstructions(self) -> hints.Incomplete: ...
        def _set_SigningInstructions(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SigningInstructions = hints.normal_property(_get_SigningInstructions, _set_SigningInstructions)
        def _get_AllowComments(self) -> hints.Incomplete: ...
        def _set_AllowComments(self, pvarf: hints.Incomplete) -> hints.Hresult: ...
        AllowComments = hints.normal_property(_get_AllowComments, _set_AllowComments)
        def _get_ShowSignDate(self) -> hints.Incomplete: ...
        def _set_ShowSignDate(self, pvarf: hints.Incomplete) -> hints.Hresult: ...
        ShowSignDate = hints.normal_property(_get_ShowSignDate, _set_ShowSignDate)
        def _get_AdditionalXml(self) -> hints.Incomplete: ...
        def _set_AdditionalXml(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        AdditionalXml = hints.normal_property(_get_AdditionalXml, _set_AdditionalXml)


class SignatureInfo(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD6A2-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ReadOnly(self) -> hints.Incomplete: ...
        ReadOnly = hints.normal_property(_get_ReadOnly)
        def _get_SignatureProvider(self) -> hints.Incomplete: ...
        SignatureProvider = hints.normal_property(_get_SignatureProvider)
        def _get_SignatureText(self) -> hints.Incomplete: ...
        def _set_SignatureText(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SignatureText = hints.normal_property(_get_SignatureText, _set_SignatureText)
        def _get_SignatureImage(self) -> hints.Incomplete: ...
        def _set_SignatureImage(self, ppipictdisp: hints.Incomplete) -> hints.Hresult: ...
        SignatureImage = hints.normal_property(_get_SignatureImage, _set_SignatureImage)
        def _get_SignatureComment(self) -> hints.Incomplete: ...
        def _set_SignatureComment(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SignatureComment = hints.normal_property(_get_SignatureComment, _set_SignatureComment)
        def GetSignatureDetail(self, sigdet: hints.Incomplete) -> hints.Incomplete: ...
        def GetCertificateDetail(self, certdet: hints.Incomplete) -> hints.Incomplete: ...
        def _get_ContentVerificationResults(self) -> hints.Incomplete: ...
        ContentVerificationResults = hints.normal_property(_get_ContentVerificationResults)
        def _get_CertificateVerificationResults(self) -> hints.Incomplete: ...
        CertificateVerificationResults = hints.normal_property(_get_CertificateVerificationResults)
        def _get_IsValid(self) -> hints.Incomplete: ...
        IsValid = hints.normal_property(_get_IsValid)
        def _get_IsCertificateExpired(self) -> hints.Incomplete: ...
        IsCertificateExpired = hints.normal_property(_get_IsCertificateExpired)
        def _get_IsCertificateRevoked(self) -> hints.Incomplete: ...
        IsCertificateRevoked = hints.normal_property(_get_IsCertificateRevoked)
        def _get_IsCertificateUntrusted(self) -> hints.Incomplete: ...
        IsCertificateUntrusted = hints.normal_property(_get_IsCertificateUntrusted)
        def ShowSignatureCertificate(self, ParentWindow: hints.Incomplete) -> hints.Hresult: ...
        def SelectSignatureCertificate(self, ParentWindow: hints.Incomplete) -> hints.Hresult: ...
        def SelectCertificateDetailByThumbprint(self, bstrThumbprint: hints.Incomplete) -> hints.Hresult: ...



SignatureProvider._methods_ = [
    COMMETHOD(
        [dispid(1610743808)],
        HRESULT,
        'GenerateSignatureLineImage',
        (['in'], SignatureLineImage, 'siglnimg'),
        (['in'], POINTER(SignatureSetup), 'psigsetup'),
        (['in'], POINTER(SignatureInfo), 'psiginfo'),
        (['in'], POINTER(IUnknown), 'XmlDsigStream'),
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)),
            'ppipictdisp',
        )
    ),
    COMMETHOD(
        [dispid(1610743809)],
        HRESULT,
        'ShowSignatureSetup',
        (['in'], POINTER(IUnknown), 'ParentWindow'),
        (['in'], POINTER(SignatureSetup), 'psigsetup')
    ),
    COMMETHOD(
        [dispid(1610743810)],
        HRESULT,
        'ShowSigningCeremony',
        (['in'], POINTER(IUnknown), 'ParentWindow'),
        (['in'], POINTER(SignatureSetup), 'psigsetup'),
        (['in'], POINTER(SignatureInfo), 'psiginfo')
    ),
    COMMETHOD(
        [dispid(1610743811)],
        HRESULT,
        'SignXmlDsig',
        (['in'], POINTER(IUnknown), 'QueryContinue'),
        (['in'], POINTER(SignatureSetup), 'psigsetup'),
        (['in'], POINTER(SignatureInfo), 'psiginfo'),
        (['in'], POINTER(IUnknown), 'XmlDsigStream')
    ),
    COMMETHOD(
        [dispid(1610743812)],
        HRESULT,
        'NotifySignatureAdded',
        (['in'], POINTER(IUnknown), 'ParentWindow'),
        (['in'], POINTER(SignatureSetup), 'psigsetup'),
        (['in'], POINTER(SignatureInfo), 'psiginfo')
    ),
    COMMETHOD(
        [dispid(1610743813)],
        HRESULT,
        'VerifyXmlDsig',
        (['in'], POINTER(IUnknown), 'QueryContinue'),
        (['in'], POINTER(SignatureSetup), 'psigsetup'),
        (['in'], POINTER(SignatureInfo), 'psiginfo'),
        (['in'], POINTER(IUnknown), 'XmlDsigStream'),
        (['in', 'out'], POINTER(ContentVerificationResults), 'pcontverres'),
        (['in', 'out'], POINTER(CertificateVerificationResults), 'pcertverres')
    ),
    COMMETHOD(
        [dispid(1610743814)],
        HRESULT,
        'ShowSignatureDetails',
        (['in'], POINTER(IUnknown), 'ParentWindow'),
        (['in'], POINTER(SignatureSetup), 'psigsetup'),
        (['in'], POINTER(SignatureInfo), 'psiginfo'),
        (['in'], POINTER(IUnknown), 'XmlDsigStream'),
        (['in', 'out'], POINTER(ContentVerificationResults), 'pcontverres'),
        (['in', 'out'], POINTER(CertificateVerificationResults), 'pcertverres')
    ),
    COMMETHOD(
        [dispid(1610743815)],
        HRESULT,
        'GetProviderDetail',
        (['in'], SignatureProviderDetail, 'sigprovdet'),
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610743816)],
        HRESULT,
        'HashStream',
        (['in'], POINTER(IUnknown), 'QueryContinue'),
        (['in'], POINTER(IUnknown), 'Stream'),
        (['out', 'retval'], POINTER(_midlSAFEARRAY(c_ubyte)), 'ppsargb')
    ),
]

################################################################
# code template for SignatureProvider implementation
# class SignatureProvider_Impl(object):
#     def GenerateSignatureLineImage(self, siglnimg, psigsetup, psiginfo, XmlDsigStream):
#         '-no docstring-'
#         #return ppipictdisp
#
#     def ShowSignatureSetup(self, ParentWindow, psigsetup):
#         '-no docstring-'
#         #return 
#
#     def ShowSigningCeremony(self, ParentWindow, psigsetup, psiginfo):
#         '-no docstring-'
#         #return 
#
#     def SignXmlDsig(self, QueryContinue, psigsetup, psiginfo, XmlDsigStream):
#         '-no docstring-'
#         #return 
#
#     def NotifySignatureAdded(self, ParentWindow, psigsetup, psiginfo):
#         '-no docstring-'
#         #return 
#
#     def VerifyXmlDsig(self, QueryContinue, psigsetup, psiginfo, XmlDsigStream):
#         '-no docstring-'
#         #return pcontverres, pcertverres
#
#     def ShowSignatureDetails(self, ParentWindow, psigsetup, psiginfo, XmlDsigStream):
#         '-no docstring-'
#         #return pcontverres, pcertverres
#
#     def GetProviderDetail(self, sigprovdet):
#         '-no docstring-'
#         #return pvar
#
#     def HashStream(self, QueryContinue, Stream):
#         '-no docstring-'
#         #return ppsargb
#


class SmartArt(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03C6-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_AllNodes(self) -> 'SmartArtNodes': ...
        AllNodes = hints.normal_property(_get_AllNodes)
        def _get_Nodes(self) -> 'SmartArtNodes': ...
        Nodes = hints.normal_property(_get_Nodes)
        def _get_Layout(self) -> 'SmartArtLayout': ...
        def _set_Layout(self, Layout: hints.Incomplete) -> hints.Hresult: ...
        Layout = hints.normal_property(_get_Layout, _set_Layout)
        def _get_QuickStyle(self) -> 'SmartArtQuickStyle': ...
        def _set_QuickStyle(self, Style: hints.Incomplete) -> hints.Hresult: ...
        QuickStyle = hints.normal_property(_get_QuickStyle, _set_QuickStyle)
        def _get_Color(self) -> 'SmartArtColor': ...
        def _set_Color(self, ColorStyle: hints.Incomplete) -> hints.Hresult: ...
        Color = hints.normal_property(_get_Color, _set_Color)
        def _get_Reverse(self) -> hints.Incomplete: ...
        def _set_Reverse(self, Reverse: hints.Incomplete) -> hints.Hresult: ...
        Reverse = hints.normal_property(_get_Reverse, _set_Reverse)
        def Reset(self) -> hints.Hresult: ...


class SmartArtNodes(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03C7-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Item(self, Index: hints.Incomplete) -> 'SmartArtNode': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self) -> 'SmartArtNode': ...


class SmartArtQuickStyle(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03CC-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Description(self) -> hints.Incomplete: ...
        Description = hints.normal_property(_get_Description)
        def _get_Category(self) -> hints.Incomplete: ...
        Category = hints.normal_property(_get_Category)


class SmartArtColor(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03CE-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Description(self) -> hints.Incomplete: ...
        Description = hints.normal_property(_get_Description)
        def _get_Category(self) -> hints.Incomplete: ...
        Category = hints.normal_property(_get_Category)


SmartArt._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'AllNodes',
        (['out', 'retval'], POINTER(POINTER(SmartArtNodes)), 'Nodes')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Nodes',
        (['out', 'retval'], POINTER(POINTER(SmartArtNodes)), 'Nodes')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Layout',
        (['out', 'retval'], POINTER(POINTER(SmartArtLayout)), 'Layout')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'Layout',
        (['in'], POINTER(SmartArtLayout), 'Layout')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'QuickStyle',
        (['out', 'retval'], POINTER(POINTER(SmartArtQuickStyle)), 'Style')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'QuickStyle',
        (['in'], POINTER(SmartArtQuickStyle), 'Style')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(POINTER(SmartArtColor)), 'ColorStyle')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'Color',
        (['in'], POINTER(SmartArtColor), 'ColorStyle')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'Reverse',
        (['out', 'retval'], POINTER(MsoTriState), 'Reverse')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'Reverse',
        (['in'], MsoTriState, 'Reverse')
    ),
    COMMETHOD([dispid(8)], HRESULT, 'Reset'),
]

################################################################
# code template for SmartArt implementation
# class SmartArt_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def AllNodes(self):
#         '-no docstring-'
#         #return Nodes
#
#     @property
#     def Nodes(self):
#         '-no docstring-'
#         #return Nodes
#
#     def _get(self):
#         '-no docstring-'
#         #return Layout
#     def _set(self, Layout):
#         '-no docstring-'
#     Layout = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Style
#     def _set(self, Style):
#         '-no docstring-'
#     QuickStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ColorStyle
#     def _set(self, ColorStyle):
#         '-no docstring-'
#     Color = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Reverse
#     def _set(self, Reverse):
#         '-no docstring-'
#     Reverse = property(_get, _set, doc = _set.__doc__)
#
#     def Reset(self):
#         '-no docstring-'
#         #return 
#


class TextColumn2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03B2-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Number(self) -> hints.Incomplete: ...
        def _set_Number(self, Number: hints.Incomplete) -> hints.Hresult: ...
        Number = hints.normal_property(_get_Number, _set_Number)
        def _get_Spacing(self) -> hints.Incomplete: ...
        def _set_Spacing(self, Spacing: hints.Incomplete) -> hints.Hresult: ...
        Spacing = hints.normal_property(_get_Spacing, _set_Spacing)
        def _get_TextDirection(self) -> hints.Incomplete: ...
        def _set_TextDirection(self, Direction: hints.Incomplete) -> hints.Hresult: ...
        TextDirection = hints.normal_property(_get_TextDirection, _set_TextDirection)



TextColumn2._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Number',
        (['out', 'retval'], POINTER(c_int), 'Number')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'Number',
        (['in'], c_int, 'Number')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Spacing',
        (['out', 'retval'], POINTER(c_float), 'Spacing')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Spacing',
        (['in'], c_float, 'Spacing')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'TextDirection',
        (['out', 'retval'], POINTER(MsoTextDirection), 'Direction')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'TextDirection',
        (['in'], MsoTextDirection, 'Direction')
    ),
]

################################################################
# code template for TextColumn2 implementation
# class TextColumn2_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return Number
#     def _set(self, Number):
#         '-no docstring-'
#     Number = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Spacing
#     def _set(self, Spacing):
#         '-no docstring-'
#     Spacing = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Direction
#     def _set(self, Direction):
#         '-no docstring-'
#     TextDirection = property(_get, _set, doc = _set.__doc__)
#


class COMAddIn(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C033A-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Description(self) -> hints.Incomplete: ...
        def _set_Description(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Description = hints.normal_property(_get_Description, _set_Description)
        def _get_ProgId(self) -> hints.Incomplete: ...
        ProgId = hints.normal_property(_get_ProgId)
        def _get_Guid(self) -> hints.Incomplete: ...
        Guid = hints.normal_property(_get_Guid)
        def _get_Connect(self) -> hints.Incomplete: ...
        def _set_Connect(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Connect = hints.normal_property(_get_Connect, _set_Connect)
        def _get_Object(self) -> hints.Incomplete: ...
        def _set_Object(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Object = hints.normal_property(_get_Object, _set_Object)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


COMAddIn._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Description',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'ProgId',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Guid',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'Connect',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RetValue')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'Connect',
        (['in'], VARIANT_BOOL, 'RetValue')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'Object',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RetValue')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'Object',
        (['in'], POINTER(IDispatch), 'RetValue')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'retval')
    ),
]

################################################################
# code template for COMAddIn implementation
# class COMAddIn_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Description = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ProgId(self):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def Guid(self):
#         '-no docstring-'
#         #return RetValue
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Connect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Object = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return retval
#


class DiagramNode(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0370-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def AddNode(self, Pos: hints.Incomplete = ..., NodeType: hints.Incomplete = ...) -> 'DiagramNode': ...
        def Delete(self) -> hints.Hresult: ...
        def MoveNode(self, TargetNode: hints.Incomplete, Pos: hints.Incomplete) -> hints.Hresult: ...
        def ReplaceNode(self, TargetNode: hints.Incomplete) -> hints.Hresult: ...
        def SwapNode(self, TargetNode: hints.Incomplete, SwapChildren: hints.Incomplete = ...) -> hints.Hresult: ...
        def CloneNode(self, CopyChildren: hints.Incomplete, TargetNode: hints.Incomplete, Pos: hints.Incomplete = ...) -> 'DiagramNode': ...
        def TransferChildren(self, ReceivingNode: hints.Incomplete) -> hints.Hresult: ...
        def NextNode(self) -> 'DiagramNode': ...
        def PrevNode(self) -> 'DiagramNode': ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Children(self) -> 'DiagramNodeChildren': ...
        Children = hints.normal_property(_get_Children)
        def _get_Shape(self) -> 'Shape': ...
        Shape = hints.normal_property(_get_Shape)
        def _get_Root(self) -> 'DiagramNode': ...
        Root = hints.normal_property(_get_Root)
        def _get_Diagram(self) -> 'IMsoDiagram': ...
        Diagram = hints.normal_property(_get_Diagram)
        def _get_Layout(self) -> hints.Incomplete: ...
        def _set_Layout(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Layout = hints.normal_property(_get_Layout, _set_Layout)
        def _get_TextShape(self) -> 'Shape': ...
        TextShape = hints.normal_property(_get_TextShape)


DiagramNodes._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'ppdn')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'SelectAll'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'iDiagramNodes')
    ),
]

################################################################
# code template for DiagramNodes implementation
# class DiagramNodes_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppdn
#
#     def SelectAll(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return iDiagramNodes
#


class DiagramNodeChildren(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C036F-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Item(self, Index: hints.Incomplete) -> 'DiagramNode': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def AddNode(self, Index: hints.Incomplete = ..., NodeType: hints.Incomplete = ...) -> 'DiagramNode': ...
        def SelectAll(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_FirstChild(self) -> 'DiagramNode': ...
        FirstChild = hints.normal_property(_get_FirstChild)
        def _get_LastChild(self) -> 'DiagramNode': ...
        LastChild = hints.normal_property(_get_LastChild)



DiagramNode._methods_ = [
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'AddNode',
        (['in', 'optional'], MsoRelativeNodePosition, 'Pos', 2),
        (['in', 'optional'], MsoDiagramNodeType, 'NodeType', 1),
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'NewNode')
    ),
    COMMETHOD([dispid(11)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'MoveNode',
        (['in'], POINTER(DiagramNode), 'TargetNode'),
        (['in'], MsoRelativeNodePosition, 'Pos')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'ReplaceNode',
        (['in'], POINTER(DiagramNode), 'TargetNode')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SwapNode',
        (['in'], POINTER(DiagramNode), 'TargetNode'),
        (['in', 'optional'], VARIANT_BOOL, 'SwapChildren', True)
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'CloneNode',
        (['in'], VARIANT_BOOL, 'CopyChildren'),
        (['in'], POINTER(DiagramNode), 'TargetNode'),
        (['in', 'optional'], MsoRelativeNodePosition, 'Pos', 2),
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'Node')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'TransferChildren',
        (['in'], POINTER(DiagramNode), 'ReceivingNode')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'NextNode',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'NextNode')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'PrevNode',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'PrevNode')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Children',
        (['out', 'retval'], POINTER(POINTER(DiagramNodeChildren)), 'Children')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'Shape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Root',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'Root')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Diagram',
        (['out', 'retval'], POINTER(POINTER(IMsoDiagram)), 'Diagram')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Layout',
        (['out', 'retval'], POINTER(MsoOrgChartLayoutType), 'Type')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'Layout',
        (['in'], MsoOrgChartLayoutType, 'Type')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'TextShape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
]

################################################################
# code template for DiagramNode implementation
# class DiagramNode_Impl(object):
#     def AddNode(self, Pos, NodeType):
#         '-no docstring-'
#         #return NewNode
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def MoveNode(self, TargetNode, Pos):
#         '-no docstring-'
#         #return 
#
#     def ReplaceNode(self, TargetNode):
#         '-no docstring-'
#         #return 
#
#     def SwapNode(self, TargetNode, SwapChildren):
#         '-no docstring-'
#         #return 
#
#     def CloneNode(self, CopyChildren, TargetNode, Pos):
#         '-no docstring-'
#         #return Node
#
#     def TransferChildren(self, ReceivingNode):
#         '-no docstring-'
#         #return 
#
#     def NextNode(self):
#         '-no docstring-'
#         #return NextNode
#
#     def PrevNode(self):
#         '-no docstring-'
#         #return PrevNode
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Children(self):
#         '-no docstring-'
#         #return Children
#
#     @property
#     def Shape(self):
#         '-no docstring-'
#         #return Shape
#
#     @property
#     def Root(self):
#         '-no docstring-'
#         #return Root
#
#     @property
#     def Diagram(self):
#         '-no docstring-'
#         #return Diagram
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Layout = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def TextShape(self):
#         '-no docstring-'
#         #return Shape
#


class SmartArtNode(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03C8-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def AddNode(self, Position: hints.Incomplete = ..., Type: hints.Incomplete = ...) -> 'SmartArtNode': ...
        def Delete(self) -> hints.Hresult: ...
        def Promote(self) -> hints.Hresult: ...
        def Demote(self) -> hints.Hresult: ...
        def _get_OrgChartLayout(self) -> hints.Incomplete: ...
        def _set_OrgChartLayout(self, Type: hints.Incomplete) -> hints.Hresult: ...
        OrgChartLayout = hints.normal_property(_get_OrgChartLayout, _set_OrgChartLayout)
        def _get_Shapes(self) -> 'ShapeRange': ...
        Shapes = hints.normal_property(_get_Shapes)
        def _get_TextFrame2(self) -> 'TextFrame2': ...
        TextFrame2 = hints.normal_property(_get_TextFrame2)
        def Larger(self) -> hints.Hresult: ...
        def Smaller(self) -> hints.Hresult: ...
        def _get_Level(self) -> hints.Incomplete: ...
        Level = hints.normal_property(_get_Level)
        def _get_Hidden(self) -> hints.Incomplete: ...
        Hidden = hints.normal_property(_get_Hidden)
        def _get_Nodes(self) -> 'SmartArtNodes': ...
        Nodes = hints.normal_property(_get_Nodes)
        def _get_ParentNode(self) -> 'SmartArtNode': ...
        ParentNode = hints.normal_property(_get_ParentNode)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def ReorderUp(self) -> hints.Hresult: ...
        def ReorderDown(self) -> hints.Hresult: ...


SmartArtNodes._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SmartArtNode)), 'SmartArtNode')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Add',
        (['out', 'retval'], POINTER(POINTER(SmartArtNode)), 'NewNode')
    ),
]

################################################################
# code template for SmartArtNodes implementation
# class SmartArtNodes_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return SmartArtNode
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Add(self):
#         '-no docstring-'
#         #return NewNode
#


class TextFrame2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0398-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_MarginBottom(self) -> hints.Incomplete: ...
        def _set_MarginBottom(self, MarginBottom: hints.Incomplete) -> hints.Hresult: ...
        MarginBottom = hints.normal_property(_get_MarginBottom, _set_MarginBottom)
        def _get_MarginLeft(self) -> hints.Incomplete: ...
        def _set_MarginLeft(self, MarginLeft: hints.Incomplete) -> hints.Hresult: ...
        MarginLeft = hints.normal_property(_get_MarginLeft, _set_MarginLeft)
        def _get_MarginRight(self) -> hints.Incomplete: ...
        def _set_MarginRight(self, MarginRight: hints.Incomplete) -> hints.Hresult: ...
        MarginRight = hints.normal_property(_get_MarginRight, _set_MarginRight)
        def _get_MarginTop(self) -> hints.Incomplete: ...
        def _set_MarginTop(self, MarginTop: hints.Incomplete) -> hints.Hresult: ...
        MarginTop = hints.normal_property(_get_MarginTop, _set_MarginTop)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, Orientation: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_HorizontalAnchor(self) -> hints.Incomplete: ...
        def _set_HorizontalAnchor(self, HorizontalAnchor: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAnchor = hints.normal_property(_get_HorizontalAnchor, _set_HorizontalAnchor)
        def _get_VerticalAnchor(self) -> hints.Incomplete: ...
        def _set_VerticalAnchor(self, VerticalAnchor: hints.Incomplete) -> hints.Hresult: ...
        VerticalAnchor = hints.normal_property(_get_VerticalAnchor, _set_VerticalAnchor)
        def _get_PathFormat(self) -> hints.Incomplete: ...
        def _set_PathFormat(self, PathFormat: hints.Incomplete) -> hints.Hresult: ...
        PathFormat = hints.normal_property(_get_PathFormat, _set_PathFormat)
        def _get_WarpFormat(self) -> hints.Incomplete: ...
        def _set_WarpFormat(self, WarpFormat: hints.Incomplete) -> hints.Hresult: ...
        WarpFormat = hints.normal_property(_get_WarpFormat, _set_WarpFormat)
        def _get_WordArtformat(self) -> hints.Incomplete: ...
        def _set_WordArtformat(self, WordArtformat: hints.Incomplete) -> hints.Hresult: ...
        WordArtformat = hints.normal_property(_get_WordArtformat, _set_WordArtformat)
        def _get_WordWrap(self) -> hints.Incomplete: ...
        def _set_WordWrap(self, WordWrap: hints.Incomplete) -> hints.Hresult: ...
        WordWrap = hints.normal_property(_get_WordWrap, _set_WordWrap)
        def _get_AutoSize(self) -> hints.Incomplete: ...
        def _set_AutoSize(self, AutoSize: hints.Incomplete) -> hints.Hresult: ...
        AutoSize = hints.normal_property(_get_AutoSize, _set_AutoSize)
        def _get_ThreeD(self) -> 'ThreeDFormat': ...
        ThreeD = hints.normal_property(_get_ThreeD)
        def _get_HasText(self) -> hints.Incomplete: ...
        HasText = hints.normal_property(_get_HasText)
        def _get_TextRange(self) -> 'TextRange2': ...
        TextRange = hints.normal_property(_get_TextRange)
        def _get_Column(self) -> 'TextColumn2': ...
        Column = hints.normal_property(_get_Column)
        def _get_Ruler(self) -> 'Ruler2': ...
        Ruler = hints.normal_property(_get_Ruler)
        def DeleteText(self) -> hints.Hresult: ...
        def _get_NoTextRotation(self) -> hints.Incomplete: ...
        def _set_NoTextRotation(self, NoTextRotation: hints.Incomplete) -> hints.Hresult: ...
        NoTextRotation = hints.normal_property(_get_NoTextRotation, _set_NoTextRotation)


SmartArtNode._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'AddNode',
        (['in', 'optional'], MsoSmartArtNodePosition, 'Position', 1),
        (['in', 'optional'], MsoSmartArtNodeType, 'Type', 1),
        (['out', 'retval'], POINTER(POINTER(SmartArtNode)), 'NewNode')
    ),
    COMMETHOD([dispid(3)], HRESULT, 'Delete'),
    COMMETHOD([dispid(4)], HRESULT, 'Promote'),
    COMMETHOD([dispid(5)], HRESULT, 'Demote'),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'OrgChartLayout',
        (['out', 'retval'], POINTER(MsoOrgChartLayoutType), 'Type')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'OrgChartLayout',
        (['in'], MsoOrgChartLayoutType, 'Type')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'Shapes',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Shape')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'TextFrame2',
        (['out', 'retval'], POINTER(POINTER(TextFrame2)), 'Frame')
    ),
    COMMETHOD([dispid(9)], HRESULT, 'Larger'),
    COMMETHOD([dispid(10)], HRESULT, 'Smaller'),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'Level',
        (['out', 'retval'], POINTER(c_int), 'Level')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'Hidden',
        (['out', 'retval'], POINTER(MsoTriState), 'Hidden')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'Nodes',
        (['out', 'retval'], POINTER(POINTER(SmartArtNodes)), 'Nodes')
    ),
    COMMETHOD(
        [dispid(14), 'propget'],
        HRESULT,
        'ParentNode',
        (['out', 'retval'], POINTER(POINTER(SmartArtNode)), 'Node')
    ),
    COMMETHOD(
        [dispid(15), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoSmartArtNodeType), 'Type')
    ),
    COMMETHOD([dispid(16)], HRESULT, 'ReorderUp'),
    COMMETHOD([dispid(17)], HRESULT, 'ReorderDown'),
]

################################################################
# code template for SmartArtNode implementation
# class SmartArtNode_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def AddNode(self, Position, Type):
#         '-no docstring-'
#         #return NewNode
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Promote(self):
#         '-no docstring-'
#         #return 
#
#     def Demote(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     OrgChartLayout = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Shapes(self):
#         '-no docstring-'
#         #return Shape
#
#     @property
#     def TextFrame2(self):
#         '-no docstring-'
#         #return Frame
#
#     def Larger(self):
#         '-no docstring-'
#         #return 
#
#     def Smaller(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Level(self):
#         '-no docstring-'
#         #return Level
#
#     @property
#     def Hidden(self):
#         '-no docstring-'
#         #return Hidden
#
#     @property
#     def Nodes(self):
#         '-no docstring-'
#         #return Nodes
#
#     @property
#     def ParentNode(self):
#         '-no docstring-'
#         #return Node
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     def ReorderUp(self):
#         '-no docstring-'
#         #return 
#
#     def ReorderDown(self):
#         '-no docstring-'
#         #return 
#


class ParagraphFormat2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0399-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Alignment(self) -> hints.Incomplete: ...
        def _set_Alignment(self, Alignment: hints.Incomplete) -> hints.Hresult: ...
        Alignment = hints.normal_property(_get_Alignment, _set_Alignment)
        def _get_BaselineAlignment(self) -> hints.Incomplete: ...
        def _set_BaselineAlignment(self, BaselineAlignment: hints.Incomplete) -> hints.Hresult: ...
        BaselineAlignment = hints.normal_property(_get_BaselineAlignment, _set_BaselineAlignment)
        def _get_Bullet(self) -> 'BulletFormat2': ...
        Bullet = hints.normal_property(_get_Bullet)
        def _get_FarEastLineBreakLevel(self) -> hints.Incomplete: ...
        def _set_FarEastLineBreakLevel(self, Break: hints.Incomplete) -> hints.Hresult: ...
        FarEastLineBreakLevel = hints.normal_property(_get_FarEastLineBreakLevel, _set_FarEastLineBreakLevel)
        def _get_FirstLineIndent(self) -> hints.Incomplete: ...
        def _set_FirstLineIndent(self, Indent: hints.Incomplete) -> hints.Hresult: ...
        FirstLineIndent = hints.normal_property(_get_FirstLineIndent, _set_FirstLineIndent)
        def _get_HangingPunctuation(self) -> hints.Incomplete: ...
        def _set_HangingPunctuation(self, Hanging: hints.Incomplete) -> hints.Hresult: ...
        HangingPunctuation = hints.normal_property(_get_HangingPunctuation, _set_HangingPunctuation)
        def _get_IndentLevel(self) -> hints.Incomplete: ...
        def _set_IndentLevel(self, Level: hints.Incomplete) -> hints.Hresult: ...
        IndentLevel = hints.normal_property(_get_IndentLevel, _set_IndentLevel)
        def _get_LeftIndent(self) -> hints.Incomplete: ...
        def _set_LeftIndent(self, Indent: hints.Incomplete) -> hints.Hresult: ...
        LeftIndent = hints.normal_property(_get_LeftIndent, _set_LeftIndent)
        def _get_LineRuleAfter(self) -> hints.Incomplete: ...
        def _set_LineRuleAfter(self, LineRule: hints.Incomplete) -> hints.Hresult: ...
        LineRuleAfter = hints.normal_property(_get_LineRuleAfter, _set_LineRuleAfter)
        def _get_LineRuleBefore(self) -> hints.Incomplete: ...
        def _set_LineRuleBefore(self, LineRule: hints.Incomplete) -> hints.Hresult: ...
        LineRuleBefore = hints.normal_property(_get_LineRuleBefore, _set_LineRuleBefore)
        def _get_LineRuleWithin(self) -> hints.Incomplete: ...
        def _set_LineRuleWithin(self, LineRule: hints.Incomplete) -> hints.Hresult: ...
        LineRuleWithin = hints.normal_property(_get_LineRuleWithin, _set_LineRuleWithin)
        def _get_RightIndent(self) -> hints.Incomplete: ...
        def _set_RightIndent(self, Indent: hints.Incomplete) -> hints.Hresult: ...
        RightIndent = hints.normal_property(_get_RightIndent, _set_RightIndent)
        def _get_SpaceAfter(self) -> hints.Incomplete: ...
        def _set_SpaceAfter(self, Space: hints.Incomplete) -> hints.Hresult: ...
        SpaceAfter = hints.normal_property(_get_SpaceAfter, _set_SpaceAfter)
        def _get_SpaceBefore(self) -> hints.Incomplete: ...
        def _set_SpaceBefore(self, Space: hints.Incomplete) -> hints.Hresult: ...
        SpaceBefore = hints.normal_property(_get_SpaceBefore, _set_SpaceBefore)
        def _get_SpaceWithin(self) -> hints.Incomplete: ...
        def _set_SpaceWithin(self, Space: hints.Incomplete) -> hints.Hresult: ...
        SpaceWithin = hints.normal_property(_get_SpaceWithin, _set_SpaceWithin)
        def _get_TabStops(self) -> 'TabStops2': ...
        TabStops = hints.normal_property(_get_TabStops)
        def _get_TextDirection(self) -> hints.Incomplete: ...
        def _set_TextDirection(self, Direction: hints.Incomplete) -> hints.Hresult: ...
        TextDirection = hints.normal_property(_get_TextDirection, _set_TextDirection)
        def _get_WordWrap(self) -> hints.Incomplete: ...
        def _set_WordWrap(self, WordWrap: hints.Incomplete) -> hints.Hresult: ...
        WordWrap = hints.normal_property(_get_WordWrap, _set_WordWrap)




class BulletFormat2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03B9-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Character(self) -> hints.Incomplete: ...
        def _set_Character(self, Character: hints.Incomplete) -> hints.Hresult: ...
        Character = hints.normal_property(_get_Character, _set_Character)
        def _get_Font(self) -> 'Font2': ...
        Font = hints.normal_property(_get_Font)
        def _get_Number(self) -> hints.Incomplete: ...
        Number = hints.normal_property(_get_Number)
        def Picture(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_RelativeSize(self) -> hints.Incomplete: ...
        def _set_RelativeSize(self, Size: hints.Incomplete) -> hints.Hresult: ...
        RelativeSize = hints.normal_property(_get_RelativeSize, _set_RelativeSize)
        def _get_StartValue(self) -> hints.Incomplete: ...
        def _set_StartValue(self, Start: hints.Incomplete) -> hints.Hresult: ...
        StartValue = hints.normal_property(_get_StartValue, _set_StartValue)
        def _get_Style(self) -> hints.Incomplete: ...
        def _set_Style(self, Style: hints.Incomplete) -> hints.Hresult: ...
        Style = hints.normal_property(_get_Style, _set_Style)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_UseTextColor(self) -> hints.Incomplete: ...
        def _set_UseTextColor(self, UseTextColor: hints.Incomplete) -> hints.Hresult: ...
        UseTextColor = hints.normal_property(_get_UseTextColor, _set_UseTextColor)
        def _get_UseTextFont(self) -> hints.Incomplete: ...
        def _set_UseTextFont(self, UseTextFont: hints.Incomplete) -> hints.Hresult: ...
        UseTextFont = hints.normal_property(_get_UseTextFont, _set_UseTextFont)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)


class TabStops2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03BA-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Item(self, Index: hints.Incomplete) -> 'TabStop2': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Add(self, Type: hints.Incomplete, Position: hints.Incomplete) -> 'TabStop2': ...
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_DefaultSpacing(self) -> hints.Incomplete: ...
        def _set_DefaultSpacing(self, Spacing: hints.Incomplete) -> hints.Hresult: ...
        DefaultSpacing = hints.normal_property(_get_DefaultSpacing, _set_DefaultSpacing)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


ParagraphFormat2._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Alignment',
        (['out', 'retval'], POINTER(MsoParagraphAlignment), 'Alignment')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Alignment',
        (['in'], MsoParagraphAlignment, 'Alignment')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'BaselineAlignment',
        (['out', 'retval'], POINTER(MsoBaselineAlignment), 'BaselineAlignment')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'BaselineAlignment',
        (['in'], MsoBaselineAlignment, 'BaselineAlignment')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Bullet',
        (['out', 'retval'], POINTER(POINTER(BulletFormat2)), 'Bullet')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'FarEastLineBreakLevel',
        (['out', 'retval'], POINTER(MsoTriState), 'Break')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'FarEastLineBreakLevel',
        (['in'], MsoTriState, 'Break')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'FirstLineIndent',
        (['out', 'retval'], POINTER(c_float), 'Indent')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'FirstLineIndent',
        (['in'], c_float, 'Indent')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'HangingPunctuation',
        (['out', 'retval'], POINTER(MsoTriState), 'Hanging')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'HangingPunctuation',
        (['in'], MsoTriState, 'Hanging')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'IndentLevel',
        (['out', 'retval'], POINTER(c_int), 'Level')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'IndentLevel',
        (['in'], c_int, 'Level')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'LeftIndent',
        (['out', 'retval'], POINTER(c_float), 'Indent')
    ),
    COMMETHOD(
        [dispid(9), 'propput'],
        HRESULT,
        'LeftIndent',
        (['in'], c_float, 'Indent')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'LineRuleAfter',
        (['out', 'retval'], POINTER(MsoTriState), 'LineRule')
    ),
    COMMETHOD(
        [dispid(10), 'propput'],
        HRESULT,
        'LineRuleAfter',
        (['in'], MsoTriState, 'LineRule')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'LineRuleBefore',
        (['out', 'retval'], POINTER(MsoTriState), 'LineRule')
    ),
    COMMETHOD(
        [dispid(11), 'propput'],
        HRESULT,
        'LineRuleBefore',
        (['in'], MsoTriState, 'LineRule')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'LineRuleWithin',
        (['out', 'retval'], POINTER(MsoTriState), 'LineRule')
    ),
    COMMETHOD(
        [dispid(12), 'propput'],
        HRESULT,
        'LineRuleWithin',
        (['in'], MsoTriState, 'LineRule')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'RightIndent',
        (['out', 'retval'], POINTER(c_float), 'Indent')
    ),
    COMMETHOD(
        [dispid(13), 'propput'],
        HRESULT,
        'RightIndent',
        (['in'], c_float, 'Indent')
    ),
    COMMETHOD(
        [dispid(14), 'propget'],
        HRESULT,
        'SpaceAfter',
        (['out', 'retval'], POINTER(c_float), 'Space')
    ),
    COMMETHOD(
        [dispid(14), 'propput'],
        HRESULT,
        'SpaceAfter',
        (['in'], c_float, 'Space')
    ),
    COMMETHOD(
        [dispid(15), 'propget'],
        HRESULT,
        'SpaceBefore',
        (['out', 'retval'], POINTER(c_float), 'Space')
    ),
    COMMETHOD(
        [dispid(15), 'propput'],
        HRESULT,
        'SpaceBefore',
        (['in'], c_float, 'Space')
    ),
    COMMETHOD(
        [dispid(16), 'propget'],
        HRESULT,
        'SpaceWithin',
        (['out', 'retval'], POINTER(c_float), 'Space')
    ),
    COMMETHOD(
        [dispid(16), 'propput'],
        HRESULT,
        'SpaceWithin',
        (['in'], c_float, 'Space')
    ),
    COMMETHOD(
        [dispid(17), 'propget'],
        HRESULT,
        'TabStops',
        (['out', 'retval'], POINTER(POINTER(TabStops2)), 'TabStops')
    ),
    COMMETHOD(
        [dispid(18), 'propget'],
        HRESULT,
        'TextDirection',
        (['out', 'retval'], POINTER(MsoTextDirection), 'Direction')
    ),
    COMMETHOD(
        [dispid(18), 'propput'],
        HRESULT,
        'TextDirection',
        (['in'], MsoTextDirection, 'Direction')
    ),
    COMMETHOD(
        [dispid(19), 'propget'],
        HRESULT,
        'WordWrap',
        (['out', 'retval'], POINTER(MsoTriState), 'WordWrap')
    ),
    COMMETHOD(
        [dispid(19), 'propput'],
        HRESULT,
        'WordWrap',
        (['in'], MsoTriState, 'WordWrap')
    ),
]

################################################################
# code template for ParagraphFormat2 implementation
# class ParagraphFormat2_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Alignment
#     def _set(self, Alignment):
#         '-no docstring-'
#     Alignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BaselineAlignment
#     def _set(self, BaselineAlignment):
#         '-no docstring-'
#     BaselineAlignment = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Bullet(self):
#         '-no docstring-'
#         #return Bullet
#
#     def _get(self):
#         '-no docstring-'
#         #return Break
#     def _set(self, Break):
#         '-no docstring-'
#     FarEastLineBreakLevel = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Indent
#     def _set(self, Indent):
#         '-no docstring-'
#     FirstLineIndent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Hanging
#     def _set(self, Hanging):
#         '-no docstring-'
#     HangingPunctuation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Level
#     def _set(self, Level):
#         '-no docstring-'
#     IndentLevel = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Indent
#     def _set(self, Indent):
#         '-no docstring-'
#     LeftIndent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LineRule
#     def _set(self, LineRule):
#         '-no docstring-'
#     LineRuleAfter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LineRule
#     def _set(self, LineRule):
#         '-no docstring-'
#     LineRuleBefore = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LineRule
#     def _set(self, LineRule):
#         '-no docstring-'
#     LineRuleWithin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Indent
#     def _set(self, Indent):
#         '-no docstring-'
#     RightIndent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Space
#     def _set(self, Space):
#         '-no docstring-'
#     SpaceAfter = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Space
#     def _set(self, Space):
#         '-no docstring-'
#     SpaceBefore = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Space
#     def _set(self, Space):
#         '-no docstring-'
#     SpaceWithin = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def TabStops(self):
#         '-no docstring-'
#         #return TabStops
#
#     def _get(self):
#         '-no docstring-'
#         #return Direction
#     def _set(self, Direction):
#         '-no docstring-'
#     TextDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WordWrap
#     def _set(self, WordWrap):
#         '-no docstring-'
#     WordWrap = property(_get, _set, doc = _set.__doc__)
#


class TextEffectFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C031F-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def ToggleVerticalText(self) -> hints.Hresult: ...
        def _get_Alignment(self) -> hints.Incomplete: ...
        def _set_Alignment(self, Alignment: hints.Incomplete) -> hints.Hresult: ...
        Alignment = hints.normal_property(_get_Alignment, _set_Alignment)
        def _get_FontBold(self) -> hints.Incomplete: ...
        def _set_FontBold(self, FontBold: hints.Incomplete) -> hints.Hresult: ...
        FontBold = hints.normal_property(_get_FontBold, _set_FontBold)
        def _get_FontItalic(self) -> hints.Incomplete: ...
        def _set_FontItalic(self, FontItalic: hints.Incomplete) -> hints.Hresult: ...
        FontItalic = hints.normal_property(_get_FontItalic, _set_FontItalic)
        def _get_FontName(self) -> hints.Incomplete: ...
        def _set_FontName(self, FontName: hints.Incomplete) -> hints.Hresult: ...
        FontName = hints.normal_property(_get_FontName, _set_FontName)
        def _get_FontSize(self) -> hints.Incomplete: ...
        def _set_FontSize(self, FontSize: hints.Incomplete) -> hints.Hresult: ...
        FontSize = hints.normal_property(_get_FontSize, _set_FontSize)
        def _get_KernedPairs(self) -> hints.Incomplete: ...
        def _set_KernedPairs(self, KernedPairs: hints.Incomplete) -> hints.Hresult: ...
        KernedPairs = hints.normal_property(_get_KernedPairs, _set_KernedPairs)
        def _get_NormalizedHeight(self) -> hints.Incomplete: ...
        def _set_NormalizedHeight(self, NormalizedHeight: hints.Incomplete) -> hints.Hresult: ...
        NormalizedHeight = hints.normal_property(_get_NormalizedHeight, _set_NormalizedHeight)
        def _get_PresetShape(self) -> hints.Incomplete: ...
        def _set_PresetShape(self, PresetShape: hints.Incomplete) -> hints.Hresult: ...
        PresetShape = hints.normal_property(_get_PresetShape, _set_PresetShape)
        def _get_PresetTextEffect(self) -> hints.Incomplete: ...
        def _set_PresetTextEffect(self, Preset: hints.Incomplete) -> hints.Hresult: ...
        PresetTextEffect = hints.normal_property(_get_PresetTextEffect, _set_PresetTextEffect)
        def _get_RotatedChars(self) -> hints.Incomplete: ...
        def _set_RotatedChars(self, RotatedChars: hints.Incomplete) -> hints.Hresult: ...
        RotatedChars = hints.normal_property(_get_RotatedChars, _set_RotatedChars)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, Text: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Tracking(self) -> hints.Incomplete: ...
        def _set_Tracking(self, Tracking: hints.Incomplete) -> hints.Hresult: ...
        Tracking = hints.normal_property(_get_Tracking, _set_Tracking)



TextEffectFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'ToggleVerticalText'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Alignment',
        (['out', 'retval'], POINTER(MsoTextEffectAlignment), 'Alignment')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'Alignment',
        (['in'], MsoTextEffectAlignment, 'Alignment')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'FontBold',
        (['out', 'retval'], POINTER(MsoTriState), 'FontBold')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'FontBold',
        (['in'], MsoTriState, 'FontBold')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'FontItalic',
        (['out', 'retval'], POINTER(MsoTriState), 'FontItalic')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'FontItalic',
        (['in'], MsoTriState, 'FontItalic')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'FontName',
        (['out', 'retval'], POINTER(BSTR), 'FontName')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'FontName',
        (['in'], BSTR, 'FontName')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'FontSize',
        (['out', 'retval'], POINTER(c_float), 'FontSize')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'FontSize',
        (['in'], c_float, 'FontSize')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'KernedPairs',
        (['out', 'retval'], POINTER(MsoTriState), 'KernedPairs')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'KernedPairs',
        (['in'], MsoTriState, 'KernedPairs')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'NormalizedHeight',
        (['out', 'retval'], POINTER(MsoTriState), 'NormalizedHeight')
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'NormalizedHeight',
        (['in'], MsoTriState, 'NormalizedHeight')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'PresetShape',
        (['out', 'retval'], POINTER(MsoPresetTextEffectShape), 'PresetShape')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'PresetShape',
        (['in'], MsoPresetTextEffectShape, 'PresetShape')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'PresetTextEffect',
        (['out', 'retval'], POINTER(MsoPresetTextEffect), 'Preset')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'PresetTextEffect',
        (['in'], MsoPresetTextEffect, 'Preset')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'RotatedChars',
        (['out', 'retval'], POINTER(MsoTriState), 'RotatedChars')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'RotatedChars',
        (['in'], MsoTriState, 'RotatedChars')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'Text')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'Text')
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Tracking',
        (['out', 'retval'], POINTER(c_float), 'Tracking')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Tracking',
        (['in'], c_float, 'Tracking')
    ),
]

################################################################
# code template for TextEffectFormat implementation
# class TextEffectFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def ToggleVerticalText(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Alignment
#     def _set(self, Alignment):
#         '-no docstring-'
#     Alignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FontBold
#     def _set(self, FontBold):
#         '-no docstring-'
#     FontBold = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FontItalic
#     def _set(self, FontItalic):
#         '-no docstring-'
#     FontItalic = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FontName
#     def _set(self, FontName):
#         '-no docstring-'
#     FontName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FontSize
#     def _set(self, FontSize):
#         '-no docstring-'
#     FontSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return KernedPairs
#     def _set(self, KernedPairs):
#         '-no docstring-'
#     KernedPairs = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NormalizedHeight
#     def _set(self, NormalizedHeight):
#         '-no docstring-'
#     NormalizedHeight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PresetShape
#     def _set(self, PresetShape):
#         '-no docstring-'
#     PresetShape = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Preset
#     def _set(self, Preset):
#         '-no docstring-'
#     PresetTextEffect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotatedChars
#     def _set(self, RotatedChars):
#         '-no docstring-'
#     RotatedChars = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Text
#     def _set(self, Text):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Tracking
#     def _set(self, Tracking):
#         '-no docstring-'
#     Tracking = property(_get, _set, doc = _set.__doc__)
#


class Ruler2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03C1-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Levels(self) -> 'RulerLevels2': ...
        Levels = hints.normal_property(_get_Levels)
        def _get_TabStops(self) -> 'TabStops2': ...
        TabStops = hints.normal_property(_get_TabStops)


class RulerLevels2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03C2-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'RulerLevel2': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


Ruler2._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Levels',
        (['out', 'retval'], POINTER(POINTER(RulerLevels2)), 'RulerLevels')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'TabStops',
        (['out', 'retval'], POINTER(POINTER(TabStops2)), 'TabStops')
    ),
]

################################################################
# code template for Ruler2 implementation
# class Ruler2_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Levels(self):
#         '-no docstring-'
#         #return RulerLevels
#
#     @property
#     def TabStops(self):
#         '-no docstring-'
#         #return TabStops
#


class LanguageSettings(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0353-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_LanguageID(self, Id: hints.Incomplete) -> hints.Incomplete: ...
        LanguageID = hints.named_property('LanguageID', _get_LanguageID)
        def _get_LanguagePreferredForEditing(self, lid: hints.Incomplete) -> hints.Incomplete: ...
        LanguagePreferredForEditing = hints.named_property('LanguagePreferredForEditing', _get_LanguagePreferredForEditing)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)



LanguageSettings._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'LanguageID',
        (['in'], MsoAppLanguageID, 'Id'),
        (['out', 'retval'], POINTER(c_int), 'plid')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'LanguagePreferredForEditing',
        (['in'], MsoLanguageID, 'lid'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pf')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for LanguageSettings implementation
# class LanguageSettings_Impl(object):
#     @property
#     def LanguageID(self, Id):
#         '-no docstring-'
#         #return plid
#
#     @property
#     def LanguagePreferredForEditing(self, lid):
#         '-no docstring-'
#         #return pf
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class IMsoSeries(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C170B-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _ApplyDataLabels(self, Type: hints.Incomplete = ..., IMsoLegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_AxisGroup(self) -> hints.Incomplete: ...
        def _set_AxisGroup(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AxisGroup = hints.normal_property(_get_AxisGroup, _set_AxisGroup)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def Copy(self) -> hints.Incomplete: ...
        def DataLabels(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Delete(self) -> hints.Incomplete: ...
        def ErrorBar(self, Direction: hints.Incomplete, Include: hints.Incomplete, Type: hints.Incomplete, Amount: hints.Incomplete = ..., MinusValues: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_ErrorBars(self) -> 'IMsoErrorBars': ...
        ErrorBars = hints.normal_property(_get_ErrorBars)
        def _get_Explosion(self) -> hints.Incomplete: ...
        def _set_Explosion(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Explosion = hints.normal_property(_get_Explosion, _set_Explosion)
        def _get_Formula(self) -> hints.Incomplete: ...
        def _set_Formula(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Formula = hints.normal_property(_get_Formula, _set_Formula)
        def _get_FormulaLocal(self) -> hints.Incomplete: ...
        def _set_FormulaLocal(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        FormulaLocal = hints.normal_property(_get_FormulaLocal, _set_FormulaLocal)
        def _get_FormulaR1C1(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1 = hints.normal_property(_get_FormulaR1C1, _set_FormulaR1C1)
        def _get_FormulaR1C1Local(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1Local(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1Local = hints.normal_property(_get_FormulaR1C1Local, _set_FormulaR1C1Local)
        def _get_HasDataLabels(self) -> hints.Incomplete: ...
        def _set_HasDataLabels(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasDataLabels = hints.normal_property(_get_HasDataLabels, _set_HasDataLabels)
        def _get_HasErrorBars(self) -> hints.Incomplete: ...
        def _set_HasErrorBars(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasErrorBars = hints.normal_property(_get_HasErrorBars, _set_HasErrorBars)
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_InvertIfNegative(self) -> hints.Incomplete: ...
        def _set_InvertIfNegative(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertIfNegative = hints.normal_property(_get_InvertIfNegative, _set_InvertIfNegative)
        def _get_MarkerBackgroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColor = hints.normal_property(_get_MarkerBackgroundColor, _set_MarkerBackgroundColor)
        def _get_MarkerBackgroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColorIndex = hints.normal_property(_get_MarkerBackgroundColorIndex, _set_MarkerBackgroundColorIndex)
        def _get_MarkerForegroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColor = hints.normal_property(_get_MarkerForegroundColor, _set_MarkerForegroundColor)
        def _get_MarkerForegroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColorIndex = hints.normal_property(_get_MarkerForegroundColorIndex, _set_MarkerForegroundColorIndex)
        def _get_MarkerSize(self) -> hints.Incomplete: ...
        def _set_MarkerSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerSize = hints.normal_property(_get_MarkerSize, _set_MarkerSize)
        def _get_MarkerStyle(self) -> hints.Incomplete: ...
        def _set_MarkerStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerStyle = hints.normal_property(_get_MarkerStyle, _set_MarkerStyle)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def Paste(self) -> hints.Incomplete: ...
        def _get_PictureType(self) -> hints.Incomplete: ...
        def _set_PictureType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureType = hints.normal_property(_get_PictureType, _set_PictureType)
        def _get_PictureUnit(self) -> hints.Incomplete: ...
        def _set_PictureUnit(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit = hints.normal_property(_get_PictureUnit, _set_PictureUnit)
        def _get_PlotOrder(self) -> hints.Incomplete: ...
        def _set_PlotOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PlotOrder = hints.normal_property(_get_PlotOrder, _set_PlotOrder)
        def Points(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Select(self) -> hints.Incomplete: ...
        def _get_Smooth(self) -> hints.Incomplete: ...
        def _set_Smooth(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Smooth = hints.normal_property(_get_Smooth, _set_Smooth)
        def Trendlines(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_ChartType(self) -> hints.Incomplete: ...
        def _set_ChartType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ChartType = hints.normal_property(_get_ChartType, _set_ChartType)
        def ApplyCustomType(self, ChartType: hints.Incomplete) -> hints.Hresult: ...
        def _get_Values(self) -> hints.Incomplete: ...
        def _set_Values(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Values = hints.normal_property(_get_Values, _set_Values)
        def _get_XValues(self) -> hints.Incomplete: ...
        def _set_XValues(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        XValues = hints.normal_property(_get_XValues, _set_XValues)
        def _get_BubbleSizes(self) -> hints.Incomplete: ...
        def _set_BubbleSizes(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        BubbleSizes = hints.normal_property(_get_BubbleSizes, _set_BubbleSizes)
        def _get_BarShape(self) -> hints.Incomplete: ...
        def _set_BarShape(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        BarShape = hints.normal_property(_get_BarShape, _set_BarShape)
        def _get_ApplyPictToSides(self) -> hints.Incomplete: ...
        def _set_ApplyPictToSides(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToSides = hints.normal_property(_get_ApplyPictToSides, _set_ApplyPictToSides)
        def _get_ApplyPictToFront(self) -> hints.Incomplete: ...
        def _set_ApplyPictToFront(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToFront = hints.normal_property(_get_ApplyPictToFront, _set_ApplyPictToFront)
        def _get_ApplyPictToEnd(self) -> hints.Incomplete: ...
        def _set_ApplyPictToEnd(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToEnd = hints.normal_property(_get_ApplyPictToEnd, _set_ApplyPictToEnd)
        def _get_Has3DEffect(self) -> hints.Incomplete: ...
        def _set_Has3DEffect(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Has3DEffect = hints.normal_property(_get_Has3DEffect, _set_Has3DEffect)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_HasLeaderLines(self) -> hints.Incomplete: ...
        def _set_HasLeaderLines(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasLeaderLines = hints.normal_property(_get_HasLeaderLines, _set_HasLeaderLines)
        def _get_LeaderLines(self) -> 'IMsoLeaderLines': ...
        LeaderLines = hints.normal_property(_get_LeaderLines)
        def ApplyDataLabels(self, Type: hints.Incomplete = ..., IMsoLegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ..., ShowSeriesName: hints.Incomplete = ..., ShowCategoryName: hints.Incomplete = ..., ShowValue: hints.Incomplete = ..., ShowPercentage: hints.Incomplete = ..., ShowBubbleSize: hints.Incomplete = ..., Separator: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_PictureUnit2(self) -> hints.Incomplete: ...
        def _set_PictureUnit2(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit2 = hints.normal_property(_get_PictureUnit2, _set_PictureUnit2)
        def _get_PlotColorIndex(self) -> hints.Incomplete: ...
        PlotColorIndex = hints.normal_property(_get_PlotColorIndex)
        def _get_InvertColor(self) -> hints.Incomplete: ...
        def _set_InvertColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertColor = hints.normal_property(_get_InvertColor, _set_InvertColor)
        def _get_InvertColorIndex(self) -> hints.Incomplete: ...
        def _set_InvertColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertColorIndex = hints.normal_property(_get_InvertColorIndex, _set_InvertColorIndex)
        def _get_IsFiltered(self) -> hints.Incomplete: ...
        def _set_IsFiltered(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        IsFiltered = hints.normal_property(_get_IsFiltered, _set_IsFiltered)
        def _get_ParentDataLabelOption(self) -> hints.Incomplete: ...
        def _set_ParentDataLabelOption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ParentDataLabelOption = hints.normal_property(_get_ParentDataLabelOption, _set_ParentDataLabelOption)
        def _get_QuartileCalculationInclusiveMedian(self) -> hints.Incomplete: ...
        def _set_QuartileCalculationInclusiveMedian(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        QuartileCalculationInclusiveMedian = hints.normal_property(_get_QuartileCalculationInclusiveMedian, _set_QuartileCalculationInclusiveMedian)
        def _get_ValueSortOrder(self) -> hints.Incomplete: ...
        def _set_ValueSortOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ValueSortOrder = hints.normal_property(_get_ValueSortOrder, _set_ValueSortOrder)
        def _get_GeoProjectionType(self) -> hints.Incomplete: ...
        def _set_GeoProjectionType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        GeoProjectionType = hints.normal_property(_get_GeoProjectionType, _set_GeoProjectionType)
        def _get_GeoMappingLevel(self) -> hints.Incomplete: ...
        def _set_GeoMappingLevel(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        GeoMappingLevel = hints.normal_property(_get_GeoMappingLevel, _set_GeoMappingLevel)
        def _get_RegionLabelOption(self) -> hints.Incomplete: ...
        def _set_RegionLabelOption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        RegionLabelOption = hints.normal_property(_get_RegionLabelOption, _set_RegionLabelOption)
        def _get_SeriesColorGradientStyle(self) -> hints.Incomplete: ...
        def _set_SeriesColorGradientStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SeriesColorGradientStyle = hints.normal_property(_get_SeriesColorGradientStyle, _set_SeriesColorGradientStyle)
        def _get_SeriesColorMinGradientStop(self) -> 'SeriesGradientStopData': ...
        SeriesColorMinGradientStop = hints.normal_property(_get_SeriesColorMinGradientStop)
        def _get_SeriesColorMidGradientStop(self) -> 'SeriesGradientStopData': ...
        SeriesColorMidGradientStop = hints.normal_property(_get_SeriesColorMidGradientStop)
        def _get_SeriesColorMaxGradientStop(self) -> 'SeriesGradientStopData': ...
        SeriesColorMaxGradientStop = hints.normal_property(_get_SeriesColorMaxGradientStop)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...




class IMsoErrorBars(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1721-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_EndStyle(self) -> hints.Incomplete: ...
        def _set_EndStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        EndStyle = hints.normal_property(_get_EndStyle, _set_EndStyle)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...




class IMsoLeaderLines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1723-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Select(self) -> hints.Hresult: ...
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Hresult: ...
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)




class SeriesGradientStopData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{847EA60C-C1E6-4DC1-9847-78BC03A80AF0}')
    _idlflags_ = ['hidden', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_StopColor(self) -> 'SeriesGradientStopColorFormat': ...
        StopColor = hints.normal_property(_get_StopColor)
        def _get_StopPositionType(self) -> hints.Incomplete: ...
        def _set_StopPositionType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        StopPositionType = hints.normal_property(_get_StopPositionType, _set_StopPositionType)
        def _get_StopValue(self) -> hints.Incomplete: ...
        def _set_StopValue(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        StopValue = hints.normal_property(_get_StopValue, _set_StopValue)


IMsoSeries._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['hidden', 'nonbrowsable'],
        HRESULT,
        '_ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'IMsoLegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'AxisGroup',
        (['out', 'retval'], POINTER(XlAxisGroup), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'AxisGroup',
        (['in'], XlAxisGroup, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Copy',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'DataLabels',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ErrorBar',
        (['in'], XlErrorBarDirection, 'Direction'),
        (['in'], XlErrorBarInclude, 'Include'),
        (['in'], XlErrorBarType, 'Type'),
        (['in', 'optional'], VARIANT, 'Amount'),
        (['in', 'optional'], VARIANT, 'MinusValues'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ErrorBars',
        (['out', 'retval'], POINTER(POINTER(IMsoErrorBars)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Explosion',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Explosion',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Formula',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Formula',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'FormulaLocal',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'FormulaLocal',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'FormulaR1C1',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'FormulaR1C1',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'FormulaR1C1Local',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'FormulaR1C1Local',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'HasDataLabels',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'HasDataLabels',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'HasErrorBars',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'HasErrorBars',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'InvertIfNegative',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'InvertIfNegative',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerBackgroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerBackgroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerForegroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerForegroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerSize',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerSize',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerStyle',
        (['out', 'retval'], POINTER(XlMarkerStyle), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerStyle',
        (['in'], XlMarkerStyle, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Paste',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PictureType',
        (['out', 'retval'], POINTER(XlChartPictureType), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'PictureType',
        (['in'], XlChartPictureType, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PictureUnit',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'PictureUnit',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PlotOrder',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'PlotOrder',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Points',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Smooth',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Smooth',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Trendlines',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Type',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ChartType',
        (['out', 'retval'], POINTER(XlChartType), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ChartType',
        (['in'], XlChartType, 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ApplyCustomType',
        (['in'], XlChartType, 'ChartType')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Values',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Values',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'XValues',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'XValues',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'BubbleSizes',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'BubbleSizes',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'BarShape',
        (['out', 'retval'], POINTER(XlBarShape), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'BarShape',
        (['in'], XlBarShape, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ApplyPictToSides',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ApplyPictToSides',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ApplyPictToFront',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ApplyPictToFront',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ApplyPictToEnd',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ApplyPictToEnd',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Has3DEffect',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Has3DEffect',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'HasLeaderLines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'HasLeaderLines',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'LeaderLines',
        (['out', 'retval'], POINTER(POINTER(IMsoLeaderLines)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'IMsoLegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['in', 'optional'], VARIANT, 'ShowSeriesName'),
        (['in', 'optional'], VARIANT, 'ShowCategoryName'),
        (['in', 'optional'], VARIANT, 'ShowValue'),
        (['in', 'optional'], VARIANT, 'ShowPercentage'),
        (['in', 'optional'], VARIANT, 'ShowBubbleSize'),
        (['in', 'optional'], VARIANT, 'Separator'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PictureUnit2',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'PictureUnit2',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PlotColorIndex',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'InvertColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'InvertColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'InvertColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'InvertColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'IsFiltered',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'IsFiltered',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ParentDataLabelOption',
        (['out', 'retval'], POINTER(XlParentDataLabelOptions), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ParentDataLabelOption',
        (['in'], XlParentDataLabelOptions, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'QuartileCalculationInclusiveMedian',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'QuartileCalculationInclusiveMedian',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ValueSortOrder',
        (['out', 'retval'], POINTER(XlValueSortOrder), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ValueSortOrder',
        (['in'], XlValueSortOrder, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'GeoProjectionType',
        (['out', 'retval'], POINTER(XlGeoProjectionType), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'GeoProjectionType',
        (['in'], XlGeoProjectionType, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'GeoMappingLevel',
        (['out', 'retval'], POINTER(XlGeoMappingLevel), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'GeoMappingLevel',
        (['in'], XlGeoMappingLevel, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'RegionLabelOption',
        (['out', 'retval'], POINTER(XlRegionLabelOptions), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'RegionLabelOption',
        (['in'], XlRegionLabelOptions, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'SeriesColorGradientStyle',
        (['out', 'retval'], POINTER(XlSeriesColorGradientStyle), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'SeriesColorGradientStyle',
        (['in'], XlSeriesColorGradientStyle, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'SeriesColorMinGradientStop',
        (['out', 'retval'], POINTER(POINTER(SeriesGradientStopData)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'SeriesColorMidGradientStop',
        (['out', 'retval'], POINTER(POINTER(SeriesGradientStopData)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'SeriesColorMaxGradientStop',
        (['out', 'retval'], POINTER(POINTER(SeriesGradientStopData)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoSeries implementation
# class IMsoSeries_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _ApplyDataLabels(self, Type, IMsoLegendKey, AutoText, HasLeaderLines):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AxisGroup = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     def Copy(self):
#         '-no docstring-'
#         #return RHS
#
#     def DataLabels(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def ErrorBar(self, Direction, Include, Type, Amount, MinusValues):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def ErrorBars(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Explosion = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Formula = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     FormulaLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     FormulaR1C1 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     FormulaR1C1Local = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasDataLabels = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasErrorBars = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertIfNegative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def Paste(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PlotOrder = property(_get, _set, doc = _set.__doc__)
#
#     def Points(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Smooth = property(_get, _set, doc = _set.__doc__)
#
#     def Trendlines(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ChartType = property(_get, _set, doc = _set.__doc__)
#
#     def ApplyCustomType(self, ChartType):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Values = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     XValues = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     BubbleSizes = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     BarShape = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToSides = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToFront = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToEnd = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Has3DEffect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasLeaderLines = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def LeaderLines(self):
#         '-no docstring-'
#         #return RHS
#
#     def ApplyDataLabels(self, Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit2 = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PlotColorIndex(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     IsFiltered = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ParentDataLabelOption = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     QuartileCalculationInclusiveMedian = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ValueSortOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     GeoProjectionType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     GeoMappingLevel = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     RegionLabelOption = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SeriesColorGradientStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SeriesColorMinGradientStop(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def SeriesColorMidGradientStop(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def SeriesColorMaxGradientStop(self):
#         '-no docstring-'
#         #return RHS
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#


class IMsoDropLines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C172C-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Hresult: ...
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


IMsoDropLines._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD([dispid(1610743809)], HRESULT, 'Select'),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743811), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'RHS')
    ),
    COMMETHOD([dispid(1610743812)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(1610743813), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for IMsoDropLines implementation
# class IMsoDropLines_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#


class BalloonCheckboxes(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0326-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        def _set_Count(self, pccbx: hints.Incomplete) -> hints.Hresult: ...
        Count = hints.normal_property(_get_Count, _set_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


BalloonCheckboxes._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pccbx')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'Count',
        (['in'], c_int, 'pccbx')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
]

################################################################
# code template for BalloonCheckboxes implementation
# class BalloonCheckboxes_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppidisp
#
#     def _get(self):
#         '-no docstring-'
#         #return pccbx
#     def _set(self, pccbx):
#         '-no docstring-'
#     Count = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#


class Trendlines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1722-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Add(self, Type: hints.Incomplete = ..., Order: hints.Incomplete = ..., Period: hints.Incomplete = ..., Forward: hints.Incomplete = ..., Backward: hints.Incomplete = ..., Intercept: hints.Incomplete = ..., DisplayEquation: hints.Incomplete = ..., DisplayRSquared: hints.Incomplete = ..., Name: hints.Incomplete = ...) -> 'IMsoTrendline': ...
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete = ...) -> 'IMsoTrendline': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__Default(self, Index: hints.Incomplete = ...) -> 'IMsoTrendline': ...
        _Default = hints.named_property('_Default', _get__Default)




class IMsoTrendline(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C170E-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Backward(self) -> hints.Incomplete: ...
        def _set_Backward(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Backward = hints.normal_property(_get_Backward, _set_Backward)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_DataLabel(self) -> 'IMsoDataLabel': ...
        DataLabel = hints.normal_property(_get_DataLabel)
        def Delete(self) -> hints.Incomplete: ...
        def _get_DisplayEquation(self) -> hints.Incomplete: ...
        def _set_DisplayEquation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        DisplayEquation = hints.normal_property(_get_DisplayEquation, _set_DisplayEquation)
        def _get_DisplayRSquared(self) -> hints.Incomplete: ...
        def _set_DisplayRSquared(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        DisplayRSquared = hints.normal_property(_get_DisplayRSquared, _set_DisplayRSquared)
        def _get_Forward(self) -> hints.Incomplete: ...
        def _set_Forward(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Forward = hints.normal_property(_get_Forward, _set_Forward)
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_Intercept(self) -> hints.Incomplete: ...
        def _set_Intercept(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Intercept = hints.normal_property(_get_Intercept, _set_Intercept)
        def _get_InterceptIsAuto(self) -> hints.Incomplete: ...
        def _set_InterceptIsAuto(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InterceptIsAuto = hints.normal_property(_get_InterceptIsAuto, _set_InterceptIsAuto)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_NameIsAuto(self) -> hints.Incomplete: ...
        def _set_NameIsAuto(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NameIsAuto = hints.normal_property(_get_NameIsAuto, _set_NameIsAuto)
        def _get_Order(self) -> hints.Incomplete: ...
        def _set_Order(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Order = hints.normal_property(_get_Order, _set_Order)
        def _get_Period(self) -> hints.Incomplete: ...
        def _set_Period(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Period = hints.normal_property(_get_Period, _set_Period)
        def Select(self) -> hints.Incomplete: ...
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Backward2(self) -> hints.Incomplete: ...
        def _set_Backward2(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Backward2 = hints.normal_property(_get_Backward2, _set_Backward2)
        def _get_Forward2(self) -> hints.Incomplete: ...
        def _set_Forward2(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Forward2 = hints.normal_property(_get_Forward2, _set_Forward2)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


Trendlines._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Add',
        (['in', 'optional'], XlTrendlineType, 'Type', -4132),
        (['in', 'optional'], VARIANT, 'Order'),
        (['in', 'optional'], VARIANT, 'Period'),
        (['in', 'optional'], VARIANT, 'Forward'),
        (['in', 'optional'], VARIANT, 'Backward'),
        (['in', 'optional'], VARIANT, 'Intercept'),
        (['in', 'optional'], VARIANT, 'DisplayEquation'),
        (['in', 'optional'], VARIANT, 'DisplayRSquared'),
        (['in', 'optional'], VARIANT, 'Name'),
        (['out', 'retval'], POINTER(POINTER(IMsoTrendline)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Item',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoTrendline)), 'RHS')
    ),
    COMMETHOD(
        ['nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['nonbrowsable', 'propget'],
        HRESULT,
        '_Default',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoTrendline)), 'RHS')
    ),
]

################################################################
# code template for Trendlines implementation
# class Trendlines_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def Add(self, Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#


class ContactCard(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03F1-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Close(self) -> hints.Hresult: ...
        def Show(self, CardStyle: hints.Incomplete, RectangleLeft: hints.Incomplete, RectangleRight: hints.Incomplete, RectangleTop: hints.Incomplete, RectangleBottom: hints.Incomplete, HorizontalPosition: hints.Incomplete, ShowWithDelay: hints.Incomplete = ...) -> hints.Hresult: ...



ContactCard._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Close'),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Show',
        (['in'], MsoContactCardStyle, 'CardStyle'),
        (['in'], c_int, 'RectangleLeft'),
        (['in'], c_int, 'RectangleRight'),
        (['in'], c_int, 'RectangleTop'),
        (['in'], c_int, 'RectangleBottom'),
        (['in'], c_int, 'HorizontalPosition'),
        (['in', 'optional'], VARIANT_BOOL, 'ShowWithDelay', False)
    ),
]

################################################################
# code template for ContactCard implementation
# class ContactCard_Impl(object):
#     def Close(self):
#         '-no docstring-'
#         #return 
#
#     def Show(self, CardStyle, RectangleLeft, RectangleRight, RectangleTop, RectangleBottom, HorizontalPosition, ShowWithDelay):
#         '-no docstring-'
#         #return 
#


class IConverterApplicationPreferences(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03D5-0000-0000-C000-000000000046}')
    _idlflags_ = ['oleautomation']

    if TYPE_CHECKING:  # commembers
        def HrGetLcid(self) -> hints.Incomplete: ...
        def HrGetHwnd(self) -> hints.Incomplete: ...
        def HrGetApplication(self) -> hints.Incomplete: ...
        def HrCheckFormat(self) -> hints.Incomplete: ...


IConverterApplicationPreferences._methods_ = [
    COMMETHOD(
        [],
        HRESULT,
        'HrGetLcid',
        (['out'], POINTER(c_ulong), 'plcid')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrGetHwnd',
        (['out'], POINTER(c_int), 'phwnd')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrGetApplication',
        (['out'], POINTER(BSTR), 'pbstrApplication')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrCheckFormat',
        (['out'], POINTER(c_int), 'pFormat')
    ),
]

################################################################
# code template for IConverterApplicationPreferences implementation
# class IConverterApplicationPreferences_Impl(object):
#     def HrGetLcid(self):
#         '-no docstring-'
#         #return plcid
#
#     def HrGetHwnd(self):
#         '-no docstring-'
#         #return phwnd
#
#     def HrGetApplication(self):
#         '-no docstring-'
#         #return pbstrApplication
#
#     def HrCheckFormat(self):
#         '-no docstring-'
#         #return pFormat
#


class IMsoDataLabel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1720-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Caption(self) -> hints.Incomplete: ...
        def _set_Caption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Caption = hints.normal_property(_get_Caption, _set_Caption)
        def _get_Characters(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'IMsoCharacters': ...
        Characters = hints.named_property('Characters', _get_Characters)
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_HorizontalAlignment(self) -> hints.Incomplete: ...
        def _set_HorizontalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAlignment = hints.normal_property(_get_HorizontalAlignment, _set_HorizontalAlignment)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_VerticalAlignment(self) -> hints.Incomplete: ...
        def _set_VerticalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        VerticalAlignment = hints.normal_property(_get_VerticalAlignment, _set_VerticalAlignment)
        def _get_ReadingOrder(self) -> hints.Incomplete: ...
        def _set_ReadingOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ReadingOrder = hints.normal_property(_get_ReadingOrder, _set_ReadingOrder)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_AutoText(self) -> hints.Incomplete: ...
        def _set_AutoText(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoText = hints.normal_property(_get_AutoText, _set_AutoText)
        def _get_NumberFormat(self) -> hints.Incomplete: ...
        def _set_NumberFormat(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormat = hints.normal_property(_get_NumberFormat, _set_NumberFormat)
        def _get_NumberFormatLinked(self) -> hints.Incomplete: ...
        def _set_NumberFormatLinked(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLinked = hints.normal_property(_get_NumberFormatLinked, _set_NumberFormatLinked)
        def _get_NumberFormatLocal(self) -> hints.Incomplete: ...
        def _set_NumberFormatLocal(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLocal = hints.normal_property(_get_NumberFormatLocal, _set_NumberFormatLocal)
        def _get_ShowLegendKey(self) -> hints.Incomplete: ...
        def _set_ShowLegendKey(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowLegendKey = hints.normal_property(_get_ShowLegendKey, _set_ShowLegendKey)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_ShowSeriesName(self) -> hints.Incomplete: ...
        def _set_ShowSeriesName(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowSeriesName = hints.normal_property(_get_ShowSeriesName, _set_ShowSeriesName)
        def _get_ShowCategoryName(self) -> hints.Incomplete: ...
        def _set_ShowCategoryName(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowCategoryName = hints.normal_property(_get_ShowCategoryName, _set_ShowCategoryName)
        def _get_ShowValue(self) -> hints.Incomplete: ...
        def _set_ShowValue(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowValue = hints.normal_property(_get_ShowValue, _set_ShowValue)
        def _get_ShowPercentage(self) -> hints.Incomplete: ...
        def _set_ShowPercentage(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowPercentage = hints.normal_property(_get_ShowPercentage, _set_ShowPercentage)
        def _get_ShowBubbleSize(self) -> hints.Incomplete: ...
        def _set_ShowBubbleSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowBubbleSize = hints.normal_property(_get_ShowBubbleSize, _set_ShowBubbleSize)
        def _get_Separator(self) -> hints.Incomplete: ...
        def _set_Separator(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Separator = hints.normal_property(_get_Separator, _set_Separator)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get__Height(self) -> hints.Incomplete: ...
        _Height = hints.normal_property(_get__Height)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__Width(self) -> hints.Incomplete: ...
        _Width = hints.normal_property(_get__Width)
        def _get_Formula(self) -> hints.Incomplete: ...
        def _set_Formula(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Formula = hints.normal_property(_get_Formula, _set_Formula)
        def _get_FormulaR1C1(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1 = hints.normal_property(_get_FormulaR1C1, _set_FormulaR1C1)
        def _get_FormulaLocal(self) -> hints.Incomplete: ...
        def _set_FormulaLocal(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaLocal = hints.normal_property(_get_FormulaLocal, _set_FormulaLocal)
        def _get_FormulaR1C1Local(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1Local(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1Local = hints.normal_property(_get_FormulaR1C1Local, _set_FormulaR1C1Local)
        def _get_ShowRange(self) -> hints.Incomplete: ...
        def _set_ShowRange(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowRange = hints.normal_property(_get_ShowRange, _set_ShowRange)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, pHeight: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, pWidth: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


IMsoTrendline._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Backward',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Backward',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'DataLabel',
        (['out', 'retval'], POINTER(POINTER(IMsoDataLabel)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'DisplayEquation',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'DisplayEquation',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'DisplayRSquared',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'DisplayRSquared',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Forward',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Forward',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Intercept',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Intercept',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'InterceptIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'InterceptIsAuto',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'NameIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'NameIsAuto',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Order',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Order',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Period',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Period',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(XlTrendlineType), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Type',
        (['in'], XlTrendlineType, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Backward2',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Backward2',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Forward2',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Forward2',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoTrendline implementation
# class IMsoTrendline_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Backward = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def DataLabel(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     DisplayEquation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     DisplayRSquared = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Forward = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Intercept = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InterceptIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NameIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Order = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Period = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Backward2 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Forward2 = property(_get, _set, doc = _set.__doc__)
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#


class PickerDialog(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03E6-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_DataHandlerId(self) -> hints.Incomplete: ...
        def _set_DataHandlerId(self, Id: hints.Incomplete) -> hints.Hresult: ...
        DataHandlerId = hints.normal_property(_get_DataHandlerId, _set_DataHandlerId)
        def _get_Title(self) -> hints.Incomplete: ...
        def _set_Title(self, Title: hints.Incomplete) -> hints.Hresult: ...
        Title = hints.normal_property(_get_Title, _set_Title)
        def _get_Properties(self) -> 'PickerProperties': ...
        Properties = hints.normal_property(_get_Properties)
        def CreatePickerResults(self) -> 'PickerResults': ...
        def Show(self, IsMultiSelect: hints.Incomplete = ..., ExistingResults: hints.Incomplete = ...) -> 'PickerResults': ...
        def Resolve(self, TokenText: hints.Incomplete, duplicateDlgMode: hints.Incomplete) -> 'PickerResults': ...


class PickerProperties(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03E3-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'PickerProperty': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, Id: hints.Incomplete, Value: hints.Incomplete, Type: hints.Incomplete) -> 'PickerProperty': ...
        def Remove(self, Id: hints.Incomplete) -> hints.Hresult: ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class PickerResults(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03E5-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'PickerResult': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, Id: hints.Incomplete, DisplayName: hints.Incomplete, Type: hints.Incomplete, SIPId: hints.Incomplete = ..., ItemData: hints.Incomplete = ..., SubItems: hints.Incomplete = ...) -> 'PickerResult': ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


PickerDialog._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'DataHandlerId',
        (['out', 'retval'], POINTER(BSTR), 'Id')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'DataHandlerId',
        (['in'], BSTR, 'Id')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'Title')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'Title')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Properties',
        (['out', 'retval'], POINTER(POINTER(PickerProperties)), 'Props')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'CreatePickerResults',
        (['out', 'retval'], POINTER(POINTER(PickerResults)), 'Results')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Show',
        (['in', 'optional'], VARIANT_BOOL, 'IsMultiSelect', True),
        (['in', 'optional'], POINTER(PickerResults), 'ExistingResults', 0),
        (['out', 'retval'], POINTER(POINTER(PickerResults)), 'Results')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Resolve',
        (['in'], BSTR, 'TokenText'),
        (['in'], c_int, 'duplicateDlgMode'),
        (['out', 'retval'], POINTER(POINTER(PickerResults)), 'Results')
    ),
]

################################################################
# code template for PickerDialog implementation
# class PickerDialog_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return Id
#     def _set(self, Id):
#         '-no docstring-'
#     DataHandlerId = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Title
#     def _set(self, Title):
#         '-no docstring-'
#     Title = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Properties(self):
#         '-no docstring-'
#         #return Props
#
#     def CreatePickerResults(self):
#         '-no docstring-'
#         #return Results
#
#     def Show(self, IsMultiSelect, ExistingResults):
#         '-no docstring-'
#         #return Results
#
#     def Resolve(self, TokenText, duplicateDlgMode):
#         '-no docstring-'
#         #return Results
#


class IMsoContactCard(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03F0-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Address(self) -> hints.Incomplete: ...
        Address = hints.normal_property(_get_Address)
        def _get_AddressType(self) -> hints.Incomplete: ...
        AddressType = hints.normal_property(_get_AddressType)
        def _get_CardType(self) -> hints.Incomplete: ...
        CardType = hints.normal_property(_get_CardType)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)



IMsoContactCard._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Address',
        (['out', 'retval'], POINTER(BSTR), 'pAddress')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'AddressType',
        (['out', 'retval'], POINTER(MsoContactCardAddressType), 'pAddressType')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'CardType',
        (['out', 'retval'], POINTER(MsoContactCardType), 'pCardType')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
]

################################################################
# code template for IMsoContactCard implementation
# class IMsoContactCard_Impl(object):
#     @property
#     def Address(self):
#         '-no docstring-'
#         #return pAddress
#
#     @property
#     def AddressType(self):
#         '-no docstring-'
#         #return pAddressType
#
#     @property
#     def CardType(self):
#         '-no docstring-'
#         #return pCardType
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#


class IMsoAxis(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1713-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_AxisBetweenCategories(self) -> hints.Incomplete: ...
        def _set_AxisBetweenCategories(self, pval: hints.Incomplete) -> hints.Hresult: ...
        AxisBetweenCategories = hints.normal_property(_get_AxisBetweenCategories, _set_AxisBetweenCategories)
        def _get_AxisGroup(self) -> hints.Incomplete: ...
        AxisGroup = hints.normal_property(_get_AxisGroup)
        def _get_AxisTitle(self) -> 'IMsoAxisTitle': ...
        AxisTitle = hints.normal_property(_get_AxisTitle)
        def _get_CategoryNames(self) -> hints.Incomplete: ...
        def _set_CategoryNames(self, pval: hints.Incomplete) -> hints.Hresult: ...
        CategoryNames = hints.normal_property(_get_CategoryNames, _set_CategoryNames)
        def _get_Crosses(self) -> hints.Incomplete: ...
        def _set_Crosses(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Crosses = hints.normal_property(_get_Crosses, _set_Crosses)
        def _get_CrossesAt(self) -> hints.Incomplete: ...
        def _set_CrossesAt(self, pval: hints.Incomplete) -> hints.Hresult: ...
        CrossesAt = hints.normal_property(_get_CrossesAt, _set_CrossesAt)
        def Delete(self) -> hints.Incomplete: ...
        def _get_HasMajorGridlines(self) -> hints.Incomplete: ...
        def _set_HasMajorGridlines(self, pval: hints.Incomplete) -> hints.Hresult: ...
        HasMajorGridlines = hints.normal_property(_get_HasMajorGridlines, _set_HasMajorGridlines)
        def _get_HasMinorGridlines(self) -> hints.Incomplete: ...
        def _set_HasMinorGridlines(self, pval: hints.Incomplete) -> hints.Hresult: ...
        HasMinorGridlines = hints.normal_property(_get_HasMinorGridlines, _set_HasMinorGridlines)
        def _get_HasTitle(self) -> hints.Incomplete: ...
        def _set_HasTitle(self, pval: hints.Incomplete) -> hints.Hresult: ...
        HasTitle = hints.normal_property(_get_HasTitle, _set_HasTitle)
        def _get_MajorGridlines(self) -> 'GridLines': ...
        MajorGridlines = hints.normal_property(_get_MajorGridlines)
        def _get_MajorTickMark(self) -> hints.Incomplete: ...
        def _set_MajorTickMark(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MajorTickMark = hints.normal_property(_get_MajorTickMark, _set_MajorTickMark)
        def _get_MajorUnit(self) -> hints.Incomplete: ...
        def _set_MajorUnit(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MajorUnit = hints.normal_property(_get_MajorUnit, _set_MajorUnit)
        def _get_LogBase(self) -> hints.Incomplete: ...
        def _set_LogBase(self, pval: hints.Incomplete) -> hints.Hresult: ...
        LogBase = hints.normal_property(_get_LogBase, _set_LogBase)
        def _get_TickLabelSpacingIsAuto(self) -> hints.Incomplete: ...
        def _set_TickLabelSpacingIsAuto(self, pval: hints.Incomplete) -> hints.Hresult: ...
        TickLabelSpacingIsAuto = hints.normal_property(_get_TickLabelSpacingIsAuto, _set_TickLabelSpacingIsAuto)
        def _get_MajorUnitIsAuto(self) -> hints.Incomplete: ...
        def _set_MajorUnitIsAuto(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MajorUnitIsAuto = hints.normal_property(_get_MajorUnitIsAuto, _set_MajorUnitIsAuto)
        def _get_MaximumScale(self) -> hints.Incomplete: ...
        def _set_MaximumScale(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MaximumScale = hints.normal_property(_get_MaximumScale, _set_MaximumScale)
        def _get_MaximumScaleIsAuto(self) -> hints.Incomplete: ...
        def _set_MaximumScaleIsAuto(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MaximumScaleIsAuto = hints.normal_property(_get_MaximumScaleIsAuto, _set_MaximumScaleIsAuto)
        def _get_MinimumScale(self) -> hints.Incomplete: ...
        def _set_MinimumScale(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MinimumScale = hints.normal_property(_get_MinimumScale, _set_MinimumScale)
        def _get_MinimumScaleIsAuto(self) -> hints.Incomplete: ...
        def _set_MinimumScaleIsAuto(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MinimumScaleIsAuto = hints.normal_property(_get_MinimumScaleIsAuto, _set_MinimumScaleIsAuto)
        def _get_MinorGridlines(self) -> 'GridLines': ...
        MinorGridlines = hints.normal_property(_get_MinorGridlines)
        def _get_MinorTickMark(self) -> hints.Incomplete: ...
        def _set_MinorTickMark(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MinorTickMark = hints.normal_property(_get_MinorTickMark, _set_MinorTickMark)
        def _get_MinorUnit(self) -> hints.Incomplete: ...
        def _set_MinorUnit(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MinorUnit = hints.normal_property(_get_MinorUnit, _set_MinorUnit)
        def _get_MinorUnitIsAuto(self) -> hints.Incomplete: ...
        def _set_MinorUnitIsAuto(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MinorUnitIsAuto = hints.normal_property(_get_MinorUnitIsAuto, _set_MinorUnitIsAuto)
        def _get_ReversePlotOrder(self) -> hints.Incomplete: ...
        def _set_ReversePlotOrder(self, pval: hints.Incomplete) -> hints.Hresult: ...
        ReversePlotOrder = hints.normal_property(_get_ReversePlotOrder, _set_ReversePlotOrder)
        def _get_ScaleType(self) -> hints.Incomplete: ...
        def _set_ScaleType(self, pval: hints.Incomplete) -> hints.Hresult: ...
        ScaleType = hints.normal_property(_get_ScaleType, _set_ScaleType)
        def Select(self) -> hints.Incomplete: ...
        def _get_TickLabelPosition(self) -> hints.Incomplete: ...
        def _set_TickLabelPosition(self, pval: hints.Incomplete) -> hints.Hresult: ...
        TickLabelPosition = hints.normal_property(_get_TickLabelPosition, _set_TickLabelPosition)
        def _get_TickLabels(self) -> 'IMsoTickLabels': ...
        TickLabels = hints.normal_property(_get_TickLabels)
        def _get_TickLabelSpacing(self) -> hints.Incomplete: ...
        def _set_TickLabelSpacing(self, pval: hints.Incomplete) -> hints.Hresult: ...
        TickLabelSpacing = hints.normal_property(_get_TickLabelSpacing, _set_TickLabelSpacing)
        def _get_TickMarkSpacing(self) -> hints.Incomplete: ...
        def _set_TickMarkSpacing(self, pval: hints.Incomplete) -> hints.Hresult: ...
        TickMarkSpacing = hints.normal_property(_get_TickMarkSpacing, _set_TickMarkSpacing)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_BaseUnit(self) -> hints.Incomplete: ...
        def _set_BaseUnit(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BaseUnit = hints.normal_property(_get_BaseUnit, _set_BaseUnit)
        def _get_BaseUnitIsAuto(self) -> hints.Incomplete: ...
        def _set_BaseUnitIsAuto(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BaseUnitIsAuto = hints.normal_property(_get_BaseUnitIsAuto, _set_BaseUnitIsAuto)
        def _get_MajorUnitScale(self) -> hints.Incomplete: ...
        def _set_MajorUnitScale(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MajorUnitScale = hints.normal_property(_get_MajorUnitScale, _set_MajorUnitScale)
        def _get_MinorUnitScale(self) -> hints.Incomplete: ...
        def _set_MinorUnitScale(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MinorUnitScale = hints.normal_property(_get_MinorUnitScale, _set_MinorUnitScale)
        def _get_CategoryType(self) -> hints.Incomplete: ...
        def _set_CategoryType(self, pval: hints.Incomplete) -> hints.Hresult: ...
        CategoryType = hints.normal_property(_get_CategoryType, _set_CategoryType)
        def _get_Left(self) -> hints.Incomplete: ...
        Left = hints.normal_property(_get_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        Top = hints.normal_property(_get_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_DisplayUnit(self) -> hints.Incomplete: ...
        def _set_DisplayUnit(self, pval: hints.Incomplete) -> hints.Hresult: ...
        DisplayUnit = hints.normal_property(_get_DisplayUnit, _set_DisplayUnit)
        def _get_DisplayUnitCustom(self) -> hints.Incomplete: ...
        def _set_DisplayUnitCustom(self, pval: hints.Incomplete) -> hints.Hresult: ...
        DisplayUnitCustom = hints.normal_property(_get_DisplayUnitCustom, _set_DisplayUnitCustom)
        def _get_HasDisplayUnitLabel(self) -> hints.Incomplete: ...
        def _set_HasDisplayUnitLabel(self, pval: hints.Incomplete) -> hints.Hresult: ...
        HasDisplayUnitLabel = hints.normal_property(_get_HasDisplayUnitLabel, _set_HasDisplayUnitLabel)
        def _get_DisplayUnitLabel(self) -> 'IMsoDisplayUnitLabel': ...
        DisplayUnitLabel = hints.normal_property(_get_DisplayUnitLabel)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_CategorySortOrder(self) -> hints.Incomplete: ...
        def _set_CategorySortOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        CategorySortOrder = hints.normal_property(_get_CategorySortOrder, _set_CategorySortOrder)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


class IMsoChartTitle(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C170F-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Caption(self) -> hints.Incomplete: ...
        def _set_Caption(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Caption = hints.normal_property(_get_Caption, _set_Caption)
        def _get_Characters(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'IMsoCharacters': ...
        Characters = hints.named_property('Characters', _get_Characters)
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_HorizontalAlignment(self) -> hints.Incomplete: ...
        def _set_HorizontalAlignment(self, Val: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAlignment = hints.normal_property(_get_HorizontalAlignment, _set_HorizontalAlignment)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, Val: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_VerticalAlignment(self) -> hints.Incomplete: ...
        def _set_VerticalAlignment(self, Val: hints.Incomplete) -> hints.Hresult: ...
        VerticalAlignment = hints.normal_property(_get_VerticalAlignment, _set_VerticalAlignment)
        def _get_ReadingOrder(self) -> hints.Incomplete: ...
        def _set_ReadingOrder(self, pval: hints.Incomplete) -> hints.Hresult: ...
        ReadingOrder = hints.normal_property(_get_ReadingOrder, _set_ReadingOrder)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, Val: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Select(self) -> hints.Incomplete: ...
        def _get_IncludeInLayout(self) -> hints.Incomplete: ...
        def _set_IncludeInLayout(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        IncludeInLayout = hints.normal_property(_get_IncludeInLayout, _set_IncludeInLayout)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Formula(self) -> hints.Incomplete: ...
        def _set_Formula(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Formula = hints.normal_property(_get_Formula, _set_Formula)
        def _get_FormulaR1C1(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1 = hints.normal_property(_get_FormulaR1C1, _set_FormulaR1C1)
        def _get_FormulaLocal(self) -> hints.Incomplete: ...
        def _set_FormulaLocal(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaLocal = hints.normal_property(_get_FormulaLocal, _set_FormulaLocal)
        def _get_FormulaR1C1Local(self) -> hints.Incomplete: ...
        def _set_FormulaR1C1Local(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FormulaR1C1Local = hints.normal_property(_get_FormulaR1C1Local, _set_FormulaR1C1Local)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


class IMsoAxisTitle(IMsoChartTitle):
    _case_insensitive_ = True
    _iid_ = GUID('{ABFA087C-F703-4D53-946E-37FF82B2C994}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']




class GridLines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1725-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...




class IMsoTickLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1726-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_NumberFormat(self) -> hints.Incomplete: ...
        def _set_NumberFormat(self, pval: hints.Incomplete) -> hints.Hresult: ...
        NumberFormat = hints.normal_property(_get_NumberFormat, _set_NumberFormat)
        def _get_NumberFormatLinked(self) -> hints.Incomplete: ...
        def _set_NumberFormatLinked(self, pval: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLinked = hints.normal_property(_get_NumberFormatLinked, _set_NumberFormatLinked)
        def _get_NumberFormatLocal(self) -> hints.Incomplete: ...
        def _set_NumberFormatLocal(self, pval: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLocal = hints.normal_property(_get_NumberFormatLocal, _set_NumberFormatLocal)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def Select(self) -> hints.Incomplete: ...
        def _get_ReadingOrder(self) -> hints.Incomplete: ...
        def _set_ReadingOrder(self, pval: hints.Incomplete) -> hints.Hresult: ...
        ReadingOrder = hints.normal_property(_get_ReadingOrder, _set_ReadingOrder)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, pval: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Depth(self) -> hints.Incomplete: ...
        Depth = hints.normal_property(_get_Depth)
        def _get_Offset(self) -> hints.Incomplete: ...
        def _set_Offset(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Offset = hints.normal_property(_get_Offset, _set_Offset)
        def _get_Alignment(self) -> hints.Incomplete: ...
        def _set_Alignment(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Alignment = hints.normal_property(_get_Alignment, _set_Alignment)
        def _get_MultiLevel(self) -> hints.Incomplete: ...
        def _set_MultiLevel(self, pval: hints.Incomplete) -> hints.Hresult: ...
        MultiLevel = hints.normal_property(_get_MultiLevel, _set_MultiLevel)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)




class IMsoDisplayUnitLabel(IMsoChartTitle):
    _case_insensitive_ = True
    _iid_ = GUID('{6EA00553-9439-4D5A-B1E6-DC15A54DA8B2}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']



IMsoAxis._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'AxisBetweenCategories',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743808), 'propput'],
        HRESULT,
        'AxisBetweenCategories',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'AxisGroup',
        (['out', 'retval'], POINTER(XlAxisGroup), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743811), 'propget'],
        HRESULT,
        'AxisTitle',
        (['out', 'retval'], POINTER(POINTER(IMsoAxisTitle)), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'CategoryNames',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'CategoryNames',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'Crosses',
        (['out', 'retval'], POINTER(XlAxisCrosses), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'Crosses',
        (['in'], XlAxisCrosses, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'CrossesAt',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propput'],
        HRESULT,
        'CrossesAt',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743818)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743819), 'propget'],
        HRESULT,
        'HasMajorGridlines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743819), 'propput'],
        HRESULT,
        'HasMajorGridlines',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743821), 'propget'],
        HRESULT,
        'HasMinorGridlines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743821), 'propput'],
        HRESULT,
        'HasMinorGridlines',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743823), 'propget'],
        HRESULT,
        'HasTitle',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743823), 'propput'],
        HRESULT,
        'HasTitle',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743825), 'propget'],
        HRESULT,
        'MajorGridlines',
        (['out', 'retval'], POINTER(POINTER(GridLines)), 'ppval')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propget'],
        HRESULT,
        'MajorTickMark',
        (['out', 'retval'], POINTER(XlTickMark), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propput'],
        HRESULT,
        'MajorTickMark',
        (['in'], XlTickMark, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propget'],
        HRESULT,
        'MajorUnit',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propput'],
        HRESULT,
        'MajorUnit',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743830), 'propget'],
        HRESULT,
        'LogBase',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743830), 'propput'],
        HRESULT,
        'LogBase',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743832), 'propget'],
        HRESULT,
        'TickLabelSpacingIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743832), 'propput'],
        HRESULT,
        'TickLabelSpacingIsAuto',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743834), 'propget'],
        HRESULT,
        'MajorUnitIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743834), 'propput'],
        HRESULT,
        'MajorUnitIsAuto',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743836), 'propget'],
        HRESULT,
        'MaximumScale',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743836), 'propput'],
        HRESULT,
        'MaximumScale',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743838), 'propget'],
        HRESULT,
        'MaximumScaleIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743838), 'propput'],
        HRESULT,
        'MaximumScaleIsAuto',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743840), 'propget'],
        HRESULT,
        'MinimumScale',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743840), 'propput'],
        HRESULT,
        'MinimumScale',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743842), 'propget'],
        HRESULT,
        'MinimumScaleIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743842), 'propput'],
        HRESULT,
        'MinimumScaleIsAuto',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743844), 'propget'],
        HRESULT,
        'MinorGridlines',
        (['out', 'retval'], POINTER(POINTER(GridLines)), 'ppval')
    ),
    COMMETHOD(
        [dispid(1610743845), 'propget'],
        HRESULT,
        'MinorTickMark',
        (['out', 'retval'], POINTER(XlTickMark), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743845), 'propput'],
        HRESULT,
        'MinorTickMark',
        (['in'], XlTickMark, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743847), 'propget'],
        HRESULT,
        'MinorUnit',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743847), 'propput'],
        HRESULT,
        'MinorUnit',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743849), 'propget'],
        HRESULT,
        'MinorUnitIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743849), 'propput'],
        HRESULT,
        'MinorUnitIsAuto',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743851), 'propget'],
        HRESULT,
        'ReversePlotOrder',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743851), 'propput'],
        HRESULT,
        'ReversePlotOrder',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743853), 'propget'],
        HRESULT,
        'ScaleType',
        (['out', 'retval'], POINTER(XlScaleType), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743853), 'propput'],
        HRESULT,
        'ScaleType',
        (['in'], XlScaleType, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743855)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743856), 'propget'],
        HRESULT,
        'TickLabelPosition',
        (['out', 'retval'], POINTER(XlTickLabelPosition), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743856), 'propput'],
        HRESULT,
        'TickLabelPosition',
        (['in'], XlTickLabelPosition, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743858), 'propget'],
        HRESULT,
        'TickLabels',
        (['out', 'retval'], POINTER(POINTER(IMsoTickLabels)), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743859), 'propget'],
        HRESULT,
        'TickLabelSpacing',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743859), 'propput'],
        HRESULT,
        'TickLabelSpacing',
        (['in'], c_int, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743861), 'propget'],
        HRESULT,
        'TickMarkSpacing',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743861), 'propput'],
        HRESULT,
        'TickMarkSpacing',
        (['in'], c_int, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743863), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(XlAxisType), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743863), 'propput'],
        HRESULT,
        'Type',
        (['in'], XlAxisType, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743865), 'propget'],
        HRESULT,
        'BaseUnit',
        (['out', 'retval'], POINTER(XlTimeUnit), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743865), 'propput'],
        HRESULT,
        'BaseUnit',
        (['in'], XlTimeUnit, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743867), 'propget'],
        HRESULT,
        'BaseUnitIsAuto',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743867), 'propput'],
        HRESULT,
        'BaseUnitIsAuto',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743869), 'propget'],
        HRESULT,
        'MajorUnitScale',
        (['out', 'retval'], POINTER(XlTimeUnit), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743869), 'propput'],
        HRESULT,
        'MajorUnitScale',
        (['in'], XlTimeUnit, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743871), 'propget'],
        HRESULT,
        'MinorUnitScale',
        (['out', 'retval'], POINTER(XlTimeUnit), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743871), 'propput'],
        HRESULT,
        'MinorUnitScale',
        (['in'], XlTimeUnit, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743873), 'propget'],
        HRESULT,
        'CategoryType',
        (['out', 'retval'], POINTER(XlCategoryType), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743873), 'propput'],
        HRESULT,
        'CategoryType',
        (['in'], XlCategoryType, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743875), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743876), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743877), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743878), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743879), 'propget'],
        HRESULT,
        'DisplayUnit',
        (['out', 'retval'], POINTER(XlDisplayUnit), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743879), 'propput'],
        HRESULT,
        'DisplayUnit',
        (['in'], XlDisplayUnit, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743881), 'propget'],
        HRESULT,
        'DisplayUnitCustom',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743881), 'propput'],
        HRESULT,
        'DisplayUnitCustom',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743883), 'propget'],
        HRESULT,
        'HasDisplayUnitLabel',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743883), 'propput'],
        HRESULT,
        'HasDisplayUnitLabel',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743885), 'propget'],
        HRESULT,
        'DisplayUnitLabel',
        (['out', 'retval'], POINTER(POINTER(IMsoDisplayUnitLabel)), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743886), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(1610743887), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743888), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743892), 'propput'],
        HRESULT,
        'CategorySortOrder',
        (['in'], XlCategorySortOrder, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743892), 'propget'],
        HRESULT,
        'CategorySortOrder',
        (['out', 'retval'], POINTER(XlCategorySortOrder), 'RHS')
    ),
    COMMETHOD(
        [dispid(253)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(254)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoAxis implementation
# class IMsoAxis_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     AxisBetweenCategories = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def AxisGroup(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def AxisTitle(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     CategoryNames = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Crosses = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     CrossesAt = property(_get, _set, doc = _set.__doc__)
#
#     def Delete(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     HasMajorGridlines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     HasMinorGridlines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     HasTitle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MajorGridlines(self):
#         '-no docstring-'
#         #return ppval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MajorTickMark = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MajorUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     LogBase = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     TickLabelSpacingIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MajorUnitIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MaximumScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MaximumScaleIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MinimumScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MinimumScaleIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def MinorGridlines(self):
#         '-no docstring-'
#         #return ppval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MinorTickMark = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MinorUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MinorUnitIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     ReversePlotOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     ScaleType = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     TickLabelPosition = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def TickLabels(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     TickLabelSpacing = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     TickMarkSpacing = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BaseUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BaseUnitIsAuto = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MajorUnitScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MinorUnitScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     CategoryType = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Left(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Top(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     DisplayUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     DisplayUnitCustom = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     HasDisplayUnitLabel = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DisplayUnitLabel(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     CategorySortOrder = property(_get, _set, doc = _set.__doc__)
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#


class SensitivityLabelInitInfo(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{DE9CD4FF-754A-49DD-A0DC-B787DA2DB0A1}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_UserId(self) -> hints.Incomplete: ...
        def _set_UserId(self, UserId: hints.Incomplete) -> hints.Hresult: ...
        UserId = hints.normal_property(_get_UserId, _set_UserId)
        def _get_SensitivityLabelsPolicyXml(self) -> hints.Incomplete: ...
        def _set_SensitivityLabelsPolicyXml(self, SensitivityLabelsPolicyXml: hints.Incomplete) -> hints.Hresult: ...
        SensitivityLabelsPolicyXml = hints.normal_property(_get_SensitivityLabelsPolicyXml, _set_SensitivityLabelsPolicyXml)


SensitivityLabelInitInfo._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'UserId',
        (['out', 'retval'], POINTER(BSTR), 'UserId')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'UserId',
        (['in'], BSTR, 'UserId')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'SensitivityLabelsPolicyXml',
        (['out', 'retval'], POINTER(BSTR), 'SensitivityLabelsPolicyXml')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'SensitivityLabelsPolicyXml',
        (['in'], BSTR, 'SensitivityLabelsPolicyXml')
    ),
]

################################################################
# code template for SensitivityLabelInitInfo implementation
# class SensitivityLabelInitInfo_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return UserId
#     def _set(self, UserId):
#         '-no docstring-'
#     UserId = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SensitivityLabelsPolicyXml
#     def _set(self, SensitivityLabelsPolicyXml):
#         '-no docstring-'
#     SensitivityLabelsPolicyXml = property(_get, _set, doc = _set.__doc__)
#


class FillFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0314-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Background(self) -> hints.Hresult: ...
        def OneColorGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete, Degree: hints.Incomplete) -> hints.Hresult: ...
        def Patterned(self, Pattern: hints.Incomplete) -> hints.Hresult: ...
        def PresetGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete, PresetGradientType: hints.Incomplete) -> hints.Hresult: ...
        def PresetTextured(self, PresetTexture: hints.Incomplete) -> hints.Hresult: ...
        def Solid(self) -> hints.Hresult: ...
        def TwoColorGradient(self, Style: hints.Incomplete, Variant: hints.Incomplete) -> hints.Hresult: ...
        def UserPicture(self, PictureFile: hints.Incomplete) -> hints.Hresult: ...
        def UserTextured(self, TextureFile: hints.Incomplete) -> hints.Hresult: ...
        def _get_BackColor(self) -> 'ColorFormat': ...
        def _set_BackColor(self, BackColor: hints.Incomplete) -> hints.Hresult: ...
        BackColor = hints.normal_property(_get_BackColor, _set_BackColor)
        def _get_ForeColor(self) -> 'ColorFormat': ...
        def _set_ForeColor(self, ForeColor: hints.Incomplete) -> hints.Hresult: ...
        ForeColor = hints.normal_property(_get_ForeColor, _set_ForeColor)
        def _get_GradientColorType(self) -> hints.Incomplete: ...
        GradientColorType = hints.normal_property(_get_GradientColorType)
        def _get_GradientDegree(self) -> hints.Incomplete: ...
        GradientDegree = hints.normal_property(_get_GradientDegree)
        def _get_GradientStyle(self) -> hints.Incomplete: ...
        GradientStyle = hints.normal_property(_get_GradientStyle)
        def _get_GradientVariant(self) -> hints.Incomplete: ...
        GradientVariant = hints.normal_property(_get_GradientVariant)
        def _get_Pattern(self) -> hints.Incomplete: ...
        Pattern = hints.normal_property(_get_Pattern)
        def _get_PresetGradientType(self) -> hints.Incomplete: ...
        PresetGradientType = hints.normal_property(_get_PresetGradientType)
        def _get_PresetTexture(self) -> hints.Incomplete: ...
        PresetTexture = hints.normal_property(_get_PresetTexture)
        def _get_TextureName(self) -> hints.Incomplete: ...
        TextureName = hints.normal_property(_get_TextureName)
        def _get_TextureType(self) -> hints.Incomplete: ...
        TextureType = hints.normal_property(_get_TextureType)
        def _get_Transparency(self) -> hints.Incomplete: ...
        def _set_Transparency(self, Transparency: hints.Incomplete) -> hints.Hresult: ...
        Transparency = hints.normal_property(_get_Transparency, _set_Transparency)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_GradientStops(self) -> 'GradientStops': ...
        GradientStops = hints.normal_property(_get_GradientStops)
        def _get_TextureOffsetX(self) -> hints.Incomplete: ...
        def _set_TextureOffsetX(self, TextureOffsetX: hints.Incomplete) -> hints.Hresult: ...
        TextureOffsetX = hints.normal_property(_get_TextureOffsetX, _set_TextureOffsetX)
        def _get_TextureOffsetY(self) -> hints.Incomplete: ...
        def _set_TextureOffsetY(self, TextureOffsetY: hints.Incomplete) -> hints.Hresult: ...
        TextureOffsetY = hints.normal_property(_get_TextureOffsetY, _set_TextureOffsetY)
        def _get_TextureAlignment(self) -> hints.Incomplete: ...
        def _set_TextureAlignment(self, TextureAlignment: hints.Incomplete) -> hints.Hresult: ...
        TextureAlignment = hints.normal_property(_get_TextureAlignment, _set_TextureAlignment)
        def _get_TextureHorizontalScale(self) -> hints.Incomplete: ...
        def _set_TextureHorizontalScale(self, HorizontalScale: hints.Incomplete) -> hints.Hresult: ...
        TextureHorizontalScale = hints.normal_property(_get_TextureHorizontalScale, _set_TextureHorizontalScale)
        def _get_TextureVerticalScale(self) -> hints.Incomplete: ...
        def _set_TextureVerticalScale(self, VerticalScale: hints.Incomplete) -> hints.Hresult: ...
        TextureVerticalScale = hints.normal_property(_get_TextureVerticalScale, _set_TextureVerticalScale)
        def _get_TextureTile(self) -> hints.Incomplete: ...
        def _set_TextureTile(self, TextureTile: hints.Incomplete) -> hints.Hresult: ...
        TextureTile = hints.normal_property(_get_TextureTile, _set_TextureTile)
        def _get_RotateWithObject(self) -> hints.Incomplete: ...
        def _set_RotateWithObject(self, RotateWithObject: hints.Incomplete) -> hints.Hresult: ...
        RotateWithObject = hints.normal_property(_get_RotateWithObject, _set_RotateWithObject)
        def _get_PictureEffects(self) -> 'PictureEffects': ...
        PictureEffects = hints.normal_property(_get_PictureEffects)
        def _get_GradientAngle(self) -> hints.Incomplete: ...
        def _set_GradientAngle(self, GradientAngle: hints.Incomplete) -> hints.Hresult: ...
        GradientAngle = hints.normal_property(_get_GradientAngle, _set_GradientAngle)


class GlowFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03BD-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Radius(self) -> hints.Incomplete: ...
        def _set_Radius(self, Radius: hints.Incomplete) -> hints.Hresult: ...
        Radius = hints.normal_property(_get_Radius, _set_Radius)
        def _get_Color(self) -> 'ColorFormat': ...
        Color = hints.normal_property(_get_Color)
        def _get_Transparency(self) -> hints.Incomplete: ...
        def _set_Transparency(self, Transparency: hints.Incomplete) -> hints.Hresult: ...
        Transparency = hints.normal_property(_get_Transparency, _set_Transparency)


class LineFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0317-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_BackColor(self) -> 'ColorFormat': ...
        def _set_BackColor(self, BackColor: hints.Incomplete) -> hints.Hresult: ...
        BackColor = hints.normal_property(_get_BackColor, _set_BackColor)
        def _get_BeginArrowheadLength(self) -> hints.Incomplete: ...
        def _set_BeginArrowheadLength(self, BeginArrowheadLength: hints.Incomplete) -> hints.Hresult: ...
        BeginArrowheadLength = hints.normal_property(_get_BeginArrowheadLength, _set_BeginArrowheadLength)
        def _get_BeginArrowheadStyle(self) -> hints.Incomplete: ...
        def _set_BeginArrowheadStyle(self, BeginArrowheadStyle: hints.Incomplete) -> hints.Hresult: ...
        BeginArrowheadStyle = hints.normal_property(_get_BeginArrowheadStyle, _set_BeginArrowheadStyle)
        def _get_BeginArrowheadWidth(self) -> hints.Incomplete: ...
        def _set_BeginArrowheadWidth(self, BeginArrowheadWidth: hints.Incomplete) -> hints.Hresult: ...
        BeginArrowheadWidth = hints.normal_property(_get_BeginArrowheadWidth, _set_BeginArrowheadWidth)
        def _get_DashStyle(self) -> hints.Incomplete: ...
        def _set_DashStyle(self, DashStyle: hints.Incomplete) -> hints.Hresult: ...
        DashStyle = hints.normal_property(_get_DashStyle, _set_DashStyle)
        def _get_EndArrowheadLength(self) -> hints.Incomplete: ...
        def _set_EndArrowheadLength(self, EndArrowheadLength: hints.Incomplete) -> hints.Hresult: ...
        EndArrowheadLength = hints.normal_property(_get_EndArrowheadLength, _set_EndArrowheadLength)
        def _get_EndArrowheadStyle(self) -> hints.Incomplete: ...
        def _set_EndArrowheadStyle(self, EndArrowheadStyle: hints.Incomplete) -> hints.Hresult: ...
        EndArrowheadStyle = hints.normal_property(_get_EndArrowheadStyle, _set_EndArrowheadStyle)
        def _get_EndArrowheadWidth(self) -> hints.Incomplete: ...
        def _set_EndArrowheadWidth(self, EndArrowheadWidth: hints.Incomplete) -> hints.Hresult: ...
        EndArrowheadWidth = hints.normal_property(_get_EndArrowheadWidth, _set_EndArrowheadWidth)
        def _get_ForeColor(self) -> 'ColorFormat': ...
        def _set_ForeColor(self, ForeColor: hints.Incomplete) -> hints.Hresult: ...
        ForeColor = hints.normal_property(_get_ForeColor, _set_ForeColor)
        def _get_Pattern(self) -> hints.Incomplete: ...
        def _set_Pattern(self, Pattern: hints.Incomplete) -> hints.Hresult: ...
        Pattern = hints.normal_property(_get_Pattern, _set_Pattern)
        def _get_Style(self) -> hints.Incomplete: ...
        def _set_Style(self, Style: hints.Incomplete) -> hints.Hresult: ...
        Style = hints.normal_property(_get_Style, _set_Style)
        def _get_Transparency(self) -> hints.Incomplete: ...
        def _set_Transparency(self, Transparency: hints.Incomplete) -> hints.Hresult: ...
        Transparency = hints.normal_property(_get_Transparency, _set_Transparency)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Weight(self) -> hints.Incomplete: ...
        def _set_Weight(self, Weight: hints.Incomplete) -> hints.Hresult: ...
        Weight = hints.normal_property(_get_Weight, _set_Weight)
        def _get_InsetPen(self) -> hints.Incomplete: ...
        def _set_InsetPen(self, InsetPen: hints.Incomplete) -> hints.Hresult: ...
        InsetPen = hints.normal_property(_get_InsetPen, _set_InsetPen)


class SoftEdgeFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03BC-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Radius(self) -> hints.Incomplete: ...
        def _set_Radius(self, Radius: hints.Incomplete) -> hints.Hresult: ...
        Radius = hints.normal_property(_get_Radius, _set_Radius)


class ThreeDFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0321-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def IncrementRotationX(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationY(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def ResetRotation(self) -> hints.Hresult: ...
        def SetThreeDFormat(self, PresetThreeDFormat: hints.Incomplete) -> hints.Hresult: ...
        def SetExtrusionDirection(self, PresetExtrusionDirection: hints.Incomplete) -> hints.Hresult: ...
        def _get_Depth(self) -> hints.Incomplete: ...
        def _set_Depth(self, Depth: hints.Incomplete) -> hints.Hresult: ...
        Depth = hints.normal_property(_get_Depth, _set_Depth)
        def _get_ExtrusionColor(self) -> 'ColorFormat': ...
        ExtrusionColor = hints.normal_property(_get_ExtrusionColor)
        def _get_ExtrusionColorType(self) -> hints.Incomplete: ...
        def _set_ExtrusionColorType(self, ExtrusionColorType: hints.Incomplete) -> hints.Hresult: ...
        ExtrusionColorType = hints.normal_property(_get_ExtrusionColorType, _set_ExtrusionColorType)
        def _get_Perspective(self) -> hints.Incomplete: ...
        def _set_Perspective(self, Perspective: hints.Incomplete) -> hints.Hresult: ...
        Perspective = hints.normal_property(_get_Perspective, _set_Perspective)
        def _get_PresetExtrusionDirection(self) -> hints.Incomplete: ...
        PresetExtrusionDirection = hints.normal_property(_get_PresetExtrusionDirection)
        def _get_PresetLightingDirection(self) -> hints.Incomplete: ...
        def _set_PresetLightingDirection(self, PresetLightingDirection: hints.Incomplete) -> hints.Hresult: ...
        PresetLightingDirection = hints.normal_property(_get_PresetLightingDirection, _set_PresetLightingDirection)
        def _get_PresetLightingSoftness(self) -> hints.Incomplete: ...
        def _set_PresetLightingSoftness(self, PresetLightingSoftness: hints.Incomplete) -> hints.Hresult: ...
        PresetLightingSoftness = hints.normal_property(_get_PresetLightingSoftness, _set_PresetLightingSoftness)
        def _get_PresetMaterial(self) -> hints.Incomplete: ...
        def _set_PresetMaterial(self, PresetMaterial: hints.Incomplete) -> hints.Hresult: ...
        PresetMaterial = hints.normal_property(_get_PresetMaterial, _set_PresetMaterial)
        def _get_PresetThreeDFormat(self) -> hints.Incomplete: ...
        PresetThreeDFormat = hints.normal_property(_get_PresetThreeDFormat)
        def _get_RotationX(self) -> hints.Incomplete: ...
        def _set_RotationX(self, RotationX: hints.Incomplete) -> hints.Hresult: ...
        RotationX = hints.normal_property(_get_RotationX, _set_RotationX)
        def _get_RotationY(self) -> hints.Incomplete: ...
        def _set_RotationY(self, RotationY: hints.Incomplete) -> hints.Hresult: ...
        RotationY = hints.normal_property(_get_RotationY, _set_RotationY)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def SetPresetCamera(self, PresetCamera: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationZ(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationHorizontal(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def IncrementRotationVertical(self, Increment: hints.Incomplete) -> hints.Hresult: ...
        def _get_PresetLighting(self) -> hints.Incomplete: ...
        def _set_PresetLighting(self, PresetLightRigType: hints.Incomplete) -> hints.Hresult: ...
        PresetLighting = hints.normal_property(_get_PresetLighting, _set_PresetLighting)
        def _get_Z(self) -> hints.Incomplete: ...
        def _set_Z(self, Z: hints.Incomplete) -> hints.Hresult: ...
        Z = hints.normal_property(_get_Z, _set_Z)
        def _get_BevelTopType(self) -> hints.Incomplete: ...
        def _set_BevelTopType(self, BevelTopType: hints.Incomplete) -> hints.Hresult: ...
        BevelTopType = hints.normal_property(_get_BevelTopType, _set_BevelTopType)
        def _get_BevelTopInset(self) -> hints.Incomplete: ...
        def _set_BevelTopInset(self, BevelTopInset: hints.Incomplete) -> hints.Hresult: ...
        BevelTopInset = hints.normal_property(_get_BevelTopInset, _set_BevelTopInset)
        def _get_BevelTopDepth(self) -> hints.Incomplete: ...
        def _set_BevelTopDepth(self, BevelTopDepth: hints.Incomplete) -> hints.Hresult: ...
        BevelTopDepth = hints.normal_property(_get_BevelTopDepth, _set_BevelTopDepth)
        def _get_BevelBottomType(self) -> hints.Incomplete: ...
        def _set_BevelBottomType(self, BevelBottomType: hints.Incomplete) -> hints.Hresult: ...
        BevelBottomType = hints.normal_property(_get_BevelBottomType, _set_BevelBottomType)
        def _get_BevelBottomInset(self) -> hints.Incomplete: ...
        def _set_BevelBottomInset(self, BevelBottomInset: hints.Incomplete) -> hints.Hresult: ...
        BevelBottomInset = hints.normal_property(_get_BevelBottomInset, _set_BevelBottomInset)
        def _get_BevelBottomDepth(self) -> hints.Incomplete: ...
        def _set_BevelBottomDepth(self, BevelBottomDepth: hints.Incomplete) -> hints.Hresult: ...
        BevelBottomDepth = hints.normal_property(_get_BevelBottomDepth, _set_BevelBottomDepth)
        def _get_PresetCamera(self) -> hints.Incomplete: ...
        PresetCamera = hints.normal_property(_get_PresetCamera)
        def _get_RotationZ(self) -> hints.Incomplete: ...
        def _set_RotationZ(self, RotationZ: hints.Incomplete) -> hints.Hresult: ...
        RotationZ = hints.normal_property(_get_RotationZ, _set_RotationZ)
        def _get_ContourWidth(self) -> hints.Incomplete: ...
        def _set_ContourWidth(self, Width: hints.Incomplete) -> hints.Hresult: ...
        ContourWidth = hints.normal_property(_get_ContourWidth, _set_ContourWidth)
        def _get_ContourColor(self) -> 'ColorFormat': ...
        ContourColor = hints.normal_property(_get_ContourColor)
        def _get_FieldOfView(self) -> hints.Incomplete: ...
        def _set_FieldOfView(self, FOV: hints.Incomplete) -> hints.Hresult: ...
        FieldOfView = hints.normal_property(_get_FieldOfView, _set_FieldOfView)
        def _get_ProjectText(self) -> hints.Incomplete: ...
        def _set_ProjectText(self, ProjectText: hints.Incomplete) -> hints.Hresult: ...
        ProjectText = hints.normal_property(_get_ProjectText, _set_ProjectText)
        def _get_LightAngle(self) -> hints.Incomplete: ...
        def _set_LightAngle(self, LightAngle: hints.Incomplete) -> hints.Hresult: ...
        LightAngle = hints.normal_property(_get_LightAngle, _set_LightAngle)


class Adjustments(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0310-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        def _set_Item(self, Index: hints.Incomplete, Val: hints.Incomplete) -> hints.Hresult: ...
        Item = hints.named_property('Item', _get_Item, _set_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


IMsoChartFormat._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(FillFormat)), 'ppfill')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propget'],
        HRESULT,
        'Glow',
        (['out', 'retval'], POINTER(POINTER(GlowFormat)), 'ppGlow')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'Line',
        (['out', 'retval'], POINTER(POINTER(LineFormat)), 'ppline')
    ),
    COMMETHOD(
        [dispid(1610743811), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'PictureFormat',
        (['out', 'retval'], POINTER(POINTER(PictureFormat)), 'ppPictureFormat')
    ),
    COMMETHOD(
        [dispid(1610743813), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(POINTER(ShadowFormat)), 'ppShadow')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'SoftEdge',
        (['out', 'retval'], POINTER(POINTER(SoftEdgeFormat)), 'ppSoftEdge')
    ),
    COMMETHOD(
        [dispid(1610743815), 'propget'],
        HRESULT,
        'TextFrame2',
        (['out', 'retval'], POINTER(POINTER(TextFrame2)), 'ppTextFrame')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'ThreeD',
        (['out', 'retval'], POINTER(POINTER(ThreeDFormat)), 'ppThreeD')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(200), 'propget'],
        HRESULT,
        'Adjustments',
        (['out', 'retval'], POINTER(POINTER(Adjustments)), 'ppAdjustments')
    ),
    COMMETHOD(
        [dispid(201), 'propget'],
        HRESULT,
        'AutoShapeType',
        (['out', 'retval'], POINTER(MsoAutoShapeType), 'AutoShapeType')
    ),
    COMMETHOD(
        [dispid(201), 'propput'],
        HRESULT,
        'AutoShapeType',
        (['in'], MsoAutoShapeType, 'AutoShapeType')
    ),
]

################################################################
# code template for IMsoChartFormat implementation
# class IMsoChartFormat_Impl(object):
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppfill
#
#     @property
#     def Glow(self):
#         '-no docstring-'
#         #return ppGlow
#
#     @property
#     def Line(self):
#         '-no docstring-'
#         #return ppline
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     @property
#     def PictureFormat(self):
#         '-no docstring-'
#         #return ppPictureFormat
#
#     @property
#     def Shadow(self):
#         '-no docstring-'
#         #return ppShadow
#
#     @property
#     def SoftEdge(self):
#         '-no docstring-'
#         #return ppSoftEdge
#
#     @property
#     def TextFrame2(self):
#         '-no docstring-'
#         #return ppTextFrame
#
#     @property
#     def ThreeD(self):
#         '-no docstring-'
#         #return ppThreeD
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Adjustments(self):
#         '-no docstring-'
#         #return ppAdjustments
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoShapeType
#     def _set(self, AutoShapeType):
#         '-no docstring-'
#     AutoShapeType = property(_get, _set, doc = _set.__doc__)
#


class IMsoCharacters(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1731-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Caption(self) -> hints.Incomplete: ...
        def _set_Caption(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Caption = hints.normal_property(_get_Caption, _set_Caption)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def Insert(self, bstr: hints.Incomplete) -> hints.Incomplete: ...
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_PhoneticCharacters(self) -> hints.Incomplete: ...
        def _set_PhoneticCharacters(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PhoneticCharacters = hints.normal_property(_get_PhoneticCharacters, _set_PhoneticCharacters)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


class ChartFont(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1718-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Background(self) -> hints.Incomplete: ...
        def _set_Background(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Background = hints.normal_property(_get_Background, _set_Background)
        def _get_Bold(self) -> hints.Incomplete: ...
        def _set_Bold(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Bold = hints.normal_property(_get_Bold, _set_Bold)
        def _get_Color(self) -> hints.Incomplete: ...
        def _set_Color(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Color = hints.normal_property(_get_Color, _set_Color)
        def _get_ColorIndex(self) -> hints.Incomplete: ...
        def _set_ColorIndex(self, pval: hints.Incomplete) -> hints.Hresult: ...
        ColorIndex = hints.normal_property(_get_ColorIndex, _set_ColorIndex)
        def _get_FontStyle(self) -> hints.Incomplete: ...
        def _set_FontStyle(self, pval: hints.Incomplete) -> hints.Hresult: ...
        FontStyle = hints.normal_property(_get_FontStyle, _set_FontStyle)
        def _get_Italic(self) -> hints.Incomplete: ...
        def _set_Italic(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Italic = hints.normal_property(_get_Italic, _set_Italic)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_OutlineFont(self) -> hints.Incomplete: ...
        def _set_OutlineFont(self, pval: hints.Incomplete) -> hints.Hresult: ...
        OutlineFont = hints.normal_property(_get_OutlineFont, _set_OutlineFont)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Size(self) -> hints.Incomplete: ...
        def _set_Size(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Size = hints.normal_property(_get_Size, _set_Size)
        def _get_StrikeThrough(self) -> hints.Incomplete: ...
        def _set_StrikeThrough(self, pval: hints.Incomplete) -> hints.Hresult: ...
        StrikeThrough = hints.normal_property(_get_StrikeThrough, _set_StrikeThrough)
        def _get_Subscript(self) -> hints.Incomplete: ...
        def _set_Subscript(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Subscript = hints.normal_property(_get_Subscript, _set_Subscript)
        def _get_Superscript(self) -> hints.Incomplete: ...
        def _set_Superscript(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Superscript = hints.normal_property(_get_Superscript, _set_Superscript)
        def _get_Underline(self) -> hints.Incomplete: ...
        def _set_Underline(self, pval: hints.Incomplete) -> hints.Hresult: ...
        Underline = hints.normal_property(_get_Underline, _set_Underline)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)



IMsoDataLabel._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Caption',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Characters',
        (['in', 'optional'], VARIANT, 'Start'),
        (['in', 'optional'], VARIANT, 'Length'),
        (['out', 'retval'], POINTER(POINTER(IMsoCharacters)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Orientation',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ReadingOrder',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ReadingOrder',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'AutoText',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'AutoText',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'NumberFormat',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'NumberFormat',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'NumberFormatLinked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'NumberFormatLinked',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'NumberFormatLocal',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'NumberFormatLocal',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowLegendKey',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowLegendKey',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Type',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlDataLabelPosition), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Position',
        (['in'], XlDataLabelPosition, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowSeriesName',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowSeriesName',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowCategoryName',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowCategoryName',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowValue',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowValue',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowPercentage',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowPercentage',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowBubbleSize',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowBubbleSize',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Separator',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Separator',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        ['hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        '_Height',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        '_Width',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Formula',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Formula',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'FormulaR1C1',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'FormulaR1C1',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'FormulaLocal',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'FormulaLocal',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'FormulaR1C1Local',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'FormulaR1C1Local',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowRange',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowRange',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'pHeight')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'pHeight')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'pWidth')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'pWidth')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoDataLabel implementation
# class IMsoDataLabel_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Caption = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Characters(self, Start, Length):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ReadingOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormatLinked = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormatLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowLegendKey = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowSeriesName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowCategoryName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowPercentage = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowBubbleSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Separator = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def _Height(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def _Width(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Formula = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1Local = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowRange = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pHeight
#     def _set(self, pHeight):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pWidth
#     def _set(self, pWidth):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#


class RulerLevel2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03C3-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_FirstMargin(self) -> hints.Incomplete: ...
        def _set_FirstMargin(self, FirstMargin: hints.Incomplete) -> hints.Hresult: ...
        FirstMargin = hints.normal_property(_get_FirstMargin, _set_FirstMargin)
        def _get_LeftMargin(self) -> hints.Incomplete: ...
        def _set_LeftMargin(self, LeftMargin: hints.Incomplete) -> hints.Hresult: ...
        LeftMargin = hints.normal_property(_get_LeftMargin, _set_LeftMargin)


RulerLevels2._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(RulerLevel2)), 'RulerLevel')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
]

################################################################
# code template for RulerLevels2 implementation
# class RulerLevels2_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RulerLevel
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#

LineFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'BackColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'BackColor')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'BackColor',
        (['in'], POINTER(ColorFormat), 'BackColor')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'BeginArrowheadLength',
        (['out', 'retval'], POINTER(MsoArrowheadLength), 'BeginArrowheadLength')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'BeginArrowheadLength',
        (['in'], MsoArrowheadLength, 'BeginArrowheadLength')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'BeginArrowheadStyle',
        (['out', 'retval'], POINTER(MsoArrowheadStyle), 'BeginArrowheadStyle')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'BeginArrowheadStyle',
        (['in'], MsoArrowheadStyle, 'BeginArrowheadStyle')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'BeginArrowheadWidth',
        (['out', 'retval'], POINTER(MsoArrowheadWidth), 'BeginArrowheadWidth')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'BeginArrowheadWidth',
        (['in'], MsoArrowheadWidth, 'BeginArrowheadWidth')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'DashStyle',
        (['out', 'retval'], POINTER(MsoLineDashStyle), 'DashStyle')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'DashStyle',
        (['in'], MsoLineDashStyle, 'DashStyle')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'EndArrowheadLength',
        (['out', 'retval'], POINTER(MsoArrowheadLength), 'EndArrowheadLength')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'EndArrowheadLength',
        (['in'], MsoArrowheadLength, 'EndArrowheadLength')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'EndArrowheadStyle',
        (['out', 'retval'], POINTER(MsoArrowheadStyle), 'EndArrowheadStyle')
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'EndArrowheadStyle',
        (['in'], MsoArrowheadStyle, 'EndArrowheadStyle')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'EndArrowheadWidth',
        (['out', 'retval'], POINTER(MsoArrowheadWidth), 'EndArrowheadWidth')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'EndArrowheadWidth',
        (['in'], MsoArrowheadWidth, 'EndArrowheadWidth')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'ForeColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'ForeColor',
        (['in'], POINTER(ColorFormat), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Pattern',
        (['out', 'retval'], POINTER(MsoPatternType), 'Pattern')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'Pattern',
        (['in'], MsoPatternType, 'Pattern')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Style',
        (['out', 'retval'], POINTER(MsoLineStyle), 'Style')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'Style',
        (['in'], MsoLineStyle, 'Style')
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Transparency',
        (['out', 'retval'], POINTER(c_float), 'Transparency')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Transparency',
        (['in'], c_float, 'Transparency')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(MsoTriState), 'Visible')
    ),
    COMMETHOD(
        [dispid(112), 'propput'],
        HRESULT,
        'Visible',
        (['in'], MsoTriState, 'Visible')
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'Weight',
        (['out', 'retval'], POINTER(c_float), 'Weight')
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'Weight',
        (['in'], c_float, 'Weight')
    ),
    COMMETHOD(
        [dispid(114), 'propget'],
        HRESULT,
        'InsetPen',
        (['out', 'retval'], POINTER(MsoTriState), 'InsetPen')
    ),
    COMMETHOD(
        [dispid(114), 'propput'],
        HRESULT,
        'InsetPen',
        (['in'], MsoTriState, 'InsetPen')
    ),
]

################################################################
# code template for LineFormat implementation
# class LineFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return BackColor
#     def _set(self, BackColor):
#         '-no docstring-'
#     BackColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BeginArrowheadLength
#     def _set(self, BeginArrowheadLength):
#         '-no docstring-'
#     BeginArrowheadLength = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BeginArrowheadStyle
#     def _set(self, BeginArrowheadStyle):
#         '-no docstring-'
#     BeginArrowheadStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BeginArrowheadWidth
#     def _set(self, BeginArrowheadWidth):
#         '-no docstring-'
#     BeginArrowheadWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return DashStyle
#     def _set(self, DashStyle):
#         '-no docstring-'
#     DashStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return EndArrowheadLength
#     def _set(self, EndArrowheadLength):
#         '-no docstring-'
#     EndArrowheadLength = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return EndArrowheadStyle
#     def _set(self, EndArrowheadStyle):
#         '-no docstring-'
#     EndArrowheadStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return EndArrowheadWidth
#     def _set(self, EndArrowheadWidth):
#         '-no docstring-'
#     EndArrowheadWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ForeColor
#     def _set(self, ForeColor):
#         '-no docstring-'
#     ForeColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Pattern
#     def _set(self, Pattern):
#         '-no docstring-'
#     Pattern = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Style
#     def _set(self, Style):
#         '-no docstring-'
#     Style = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Transparency
#     def _set(self, Transparency):
#         '-no docstring-'
#     Transparency = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Weight
#     def _set(self, Weight):
#         '-no docstring-'
#     Weight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return InsetPen
#     def _set(self, InsetPen):
#         '-no docstring-'
#     InsetPen = property(_get, _set, doc = _set.__doc__)
#

RulerLevel2._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'FirstMargin',
        (['out', 'retval'], POINTER(c_float), 'FirstMargin')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'FirstMargin',
        (['in'], c_float, 'FirstMargin')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'LeftMargin',
        (['out', 'retval'], POINTER(c_float), 'LeftMargin')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'LeftMargin',
        (['in'], c_float, 'LeftMargin')
    ),
]

################################################################
# code template for RulerLevel2 implementation
# class RulerLevel2_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return FirstMargin
#     def _set(self, FirstMargin):
#         '-no docstring-'
#     FirstMargin = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LeftMargin
#     def _set(self, LeftMargin):
#         '-no docstring-'
#     LeftMargin = property(_get, _set, doc = _set.__doc__)
#


class IMsoChartArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1728-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Clear(self) -> hints.Incomplete: ...
        def ClearContents(self) -> hints.Incomplete: ...
        def Copy(self) -> hints.Incomplete: ...
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, pf: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, pd: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, pd: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, pd: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, pd: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, pvar: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_RoundedCorners(self) -> hints.Incomplete: ...
        def _set_RoundedCorners(self, pval: hints.Incomplete) -> hints.Hresult: ...
        RoundedCorners = hints.normal_property(_get_RoundedCorners, _set_RoundedCorners)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


IMsoChartArea._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(111)],
        HRESULT,
        'Clear',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(113)],
        HRESULT,
        'ClearContents',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(551)],
        HRESULT,
        'Copy',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(146), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'ppfont')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pf')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'pf')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppfill')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(126), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'pd')
    ),
    COMMETHOD(
        [dispid(122), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'pd')
    ),
    COMMETHOD(
        [dispid(1525), 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1525), 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD(
        [dispid(1610743831), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(1610743832), 'propget'],
        HRESULT,
        'RoundedCorners',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743832), 'propput'],
        HRESULT,
        'RoundedCorners',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for IMsoChartArea implementation
# class IMsoChartArea_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Clear(self):
#         '-no docstring-'
#         #return pvar
#
#     def ClearContents(self):
#         '-no docstring-'
#         #return pvar
#
#     def Copy(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return ppfont
#
#     def _get(self):
#         '-no docstring-'
#         #return pf
#     def _set(self, pf):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return pvar
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppfill
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pd
#     def _set(self, pd):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvar
#     def _set(self, pvar):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     RoundedCorners = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#


class Font2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C039A-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Bold(self) -> hints.Incomplete: ...
        def _set_Bold(self, Bold: hints.Incomplete) -> hints.Hresult: ...
        Bold = hints.normal_property(_get_Bold, _set_Bold)
        def _get_Italic(self) -> hints.Incomplete: ...
        def _set_Italic(self, Italic: hints.Incomplete) -> hints.Hresult: ...
        Italic = hints.normal_property(_get_Italic, _set_Italic)
        def _get_Strike(self) -> hints.Incomplete: ...
        def _set_Strike(self, Strike: hints.Incomplete) -> hints.Hresult: ...
        Strike = hints.normal_property(_get_Strike, _set_Strike)
        def _get_Caps(self) -> hints.Incomplete: ...
        def _set_Caps(self, Caps: hints.Incomplete) -> hints.Hresult: ...
        Caps = hints.normal_property(_get_Caps, _set_Caps)
        def _get_AutorotateNumbers(self) -> hints.Incomplete: ...
        def _set_AutorotateNumbers(self, RotateNumbers: hints.Incomplete) -> hints.Hresult: ...
        AutorotateNumbers = hints.normal_property(_get_AutorotateNumbers, _set_AutorotateNumbers)
        def _get_BaselineOffset(self) -> hints.Incomplete: ...
        def _set_BaselineOffset(self, Offset: hints.Incomplete) -> hints.Hresult: ...
        BaselineOffset = hints.normal_property(_get_BaselineOffset, _set_BaselineOffset)
        def _get_Kerning(self) -> hints.Incomplete: ...
        def _set_Kerning(self, KerningSize: hints.Incomplete) -> hints.Hresult: ...
        Kerning = hints.normal_property(_get_Kerning, _set_Kerning)
        def _get_Size(self) -> hints.Incomplete: ...
        def _set_Size(self, Size: hints.Incomplete) -> hints.Hresult: ...
        Size = hints.normal_property(_get_Size, _set_Size)
        def _get_Spacing(self) -> hints.Incomplete: ...
        def _set_Spacing(self, Spacing: hints.Incomplete) -> hints.Hresult: ...
        Spacing = hints.normal_property(_get_Spacing, _set_Spacing)
        def _get_UnderlineStyle(self) -> hints.Incomplete: ...
        def _set_UnderlineStyle(self, Style: hints.Incomplete) -> hints.Hresult: ...
        UnderlineStyle = hints.normal_property(_get_UnderlineStyle, _set_UnderlineStyle)
        def _get_Allcaps(self) -> hints.Incomplete: ...
        def _set_Allcaps(self, Allcaps: hints.Incomplete) -> hints.Hresult: ...
        Allcaps = hints.normal_property(_get_Allcaps, _set_Allcaps)
        def _get_DoubleStrikeThrough(self) -> hints.Incomplete: ...
        def _set_DoubleStrikeThrough(self, DoubleStrikeThrough: hints.Incomplete) -> hints.Hresult: ...
        DoubleStrikeThrough = hints.normal_property(_get_DoubleStrikeThrough, _set_DoubleStrikeThrough)
        def _get_Equalize(self) -> hints.Incomplete: ...
        def _set_Equalize(self, Equalize: hints.Incomplete) -> hints.Hresult: ...
        Equalize = hints.normal_property(_get_Equalize, _set_Equalize)
        def _get_Fill(self) -> 'FillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Glow(self) -> 'GlowFormat': ...
        Glow = hints.normal_property(_get_Glow)
        def _get_Reflection(self) -> 'ReflectionFormat': ...
        Reflection = hints.normal_property(_get_Reflection)
        def _get_Line(self) -> 'LineFormat': ...
        Line = hints.normal_property(_get_Line)
        def _get_Shadow(self) -> 'ShadowFormat': ...
        Shadow = hints.normal_property(_get_Shadow)
        def _get_Highlight(self) -> 'ColorFormat': ...
        Highlight = hints.normal_property(_get_Highlight)
        def _get_UnderlineColor(self) -> 'ColorFormat': ...
        UnderlineColor = hints.normal_property(_get_UnderlineColor)
        def _get_Smallcaps(self) -> hints.Incomplete: ...
        def _set_Smallcaps(self, Smallcaps: hints.Incomplete) -> hints.Hresult: ...
        Smallcaps = hints.normal_property(_get_Smallcaps, _set_Smallcaps)
        def _get_SoftEdgeFormat(self) -> hints.Incomplete: ...
        def _set_SoftEdgeFormat(self, SoftEdgeFormat: hints.Incomplete) -> hints.Hresult: ...
        SoftEdgeFormat = hints.normal_property(_get_SoftEdgeFormat, _set_SoftEdgeFormat)
        def _get_StrikeThrough(self) -> hints.Incomplete: ...
        def _set_StrikeThrough(self, StrikeThrough: hints.Incomplete) -> hints.Hresult: ...
        StrikeThrough = hints.normal_property(_get_StrikeThrough, _set_StrikeThrough)
        def _get_Subscript(self) -> hints.Incomplete: ...
        def _set_Subscript(self, Subscript: hints.Incomplete) -> hints.Hresult: ...
        Subscript = hints.normal_property(_get_Subscript, _set_Subscript)
        def _get_Superscript(self) -> hints.Incomplete: ...
        def _set_Superscript(self, Superscript: hints.Incomplete) -> hints.Hresult: ...
        Superscript = hints.normal_property(_get_Superscript, _set_Superscript)
        def _get_WordArtformat(self) -> hints.Incomplete: ...
        def _set_WordArtformat(self, WordArtformat: hints.Incomplete) -> hints.Hresult: ...
        WordArtformat = hints.normal_property(_get_WordArtformat, _set_WordArtformat)
        def _get_Embeddable(self) -> hints.Incomplete: ...
        Embeddable = hints.normal_property(_get_Embeddable)
        def _get_Embedded(self) -> hints.Incomplete: ...
        Embedded = hints.normal_property(_get_Embedded)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_NameAscii(self) -> hints.Incomplete: ...
        def _set_NameAscii(self, NameAscii: hints.Incomplete) -> hints.Hresult: ...
        NameAscii = hints.normal_property(_get_NameAscii, _set_NameAscii)
        def _get_NameComplexScript(self) -> hints.Incomplete: ...
        def _set_NameComplexScript(self, NameComplexScript: hints.Incomplete) -> hints.Hresult: ...
        NameComplexScript = hints.normal_property(_get_NameComplexScript, _set_NameComplexScript)
        def _get_NameFarEast(self) -> hints.Incomplete: ...
        def _set_NameFarEast(self, NameFarEast: hints.Incomplete) -> hints.Hresult: ...
        NameFarEast = hints.normal_property(_get_NameFarEast, _set_NameFarEast)
        def _get_NameOther(self) -> hints.Incomplete: ...
        def _set_NameOther(self, NameOther: hints.Incomplete) -> hints.Hresult: ...
        NameOther = hints.normal_property(_get_NameOther, _set_NameOther)



BulletFormat2._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Character',
        (['out', 'retval'], POINTER(c_int), 'Character')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Character',
        (['in'], c_int, 'Character')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(Font2)), 'Font')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Number',
        (['out', 'retval'], POINTER(c_int), 'Number')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Picture',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'RelativeSize',
        (['out', 'retval'], POINTER(c_float), 'Size')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'RelativeSize',
        (['in'], c_float, 'Size')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'StartValue',
        (['out', 'retval'], POINTER(c_int), 'Start')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'StartValue',
        (['in'], c_int, 'Start')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'Style',
        (['out', 'retval'], POINTER(MsoNumberedBulletStyle), 'Style')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'Style',
        (['in'], MsoNumberedBulletStyle, 'Style')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoBulletType), 'Type')
    ),
    COMMETHOD(
        [dispid(9), 'propput'],
        HRESULT,
        'Type',
        (['in'], MsoBulletType, 'Type')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'UseTextColor',
        (['out', 'retval'], POINTER(MsoTriState), 'UseTextColor')
    ),
    COMMETHOD(
        [dispid(10), 'propput'],
        HRESULT,
        'UseTextColor',
        (['in'], MsoTriState, 'UseTextColor')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'UseTextFont',
        (['out', 'retval'], POINTER(MsoTriState), 'UseTextFont')
    ),
    COMMETHOD(
        [dispid(11), 'propput'],
        HRESULT,
        'UseTextFont',
        (['in'], MsoTriState, 'UseTextFont')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(MsoTriState), 'Visible')
    ),
    COMMETHOD(
        [dispid(12), 'propput'],
        HRESULT,
        'Visible',
        (['in'], MsoTriState, 'Visible')
    ),
]

################################################################
# code template for BulletFormat2 implementation
# class BulletFormat2_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Character
#     def _set(self, Character):
#         '-no docstring-'
#     Character = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return Font
#
#     @property
#     def Number(self):
#         '-no docstring-'
#         #return Number
#
#     def Picture(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Size
#     def _set(self, Size):
#         '-no docstring-'
#     RelativeSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Start
#     def _set(self, Start):
#         '-no docstring-'
#     StartValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Style
#     def _set(self, Style):
#         '-no docstring-'
#     Style = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return UseTextColor
#     def _set(self, UseTextColor):
#         '-no docstring-'
#     UseTextColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return UseTextFont
#     def _set(self, UseTextFont):
#         '-no docstring-'
#     UseTextFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#


class SensitivityLabelPolicy(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{88FF5F69-FACF-4667-8DC8-A85B8225DF15}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def BeginInitialize(self) -> hints.Incomplete: ...
        def CompleteInitialize(self, SensitivityLabelInitInfo: hints.Incomplete) -> hints.Hresult: ...
        def CreateSensitivityLabelInitInfo(self) -> 'SensitivityLabelInitInfo': ...
        def _get_SensitivityLabelError(self) -> hints.Incomplete: ...
        SensitivityLabelError = hints.normal_property(_get_SensitivityLabelError)


SensitivityLabelPolicy._methods_ = [
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'BeginInitialize',
        (['out', 'retval'], POINTER(BSTR), 'PolicyXmlVersion')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'CompleteInitialize',
        (['in'], POINTER(SensitivityLabelInitInfo), 'SensitivityLabelInitInfo')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'CreateSensitivityLabelInitInfo',
        (
            ['out', 'retval'],
            POINTER(POINTER(SensitivityLabelInitInfo)),
            'SensitivityLabelInitInfo',
        )
    ),
    COMMETHOD(
        [dispid(3), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'SensitivityLabelError',
        (
            ['out', 'retval'],
            POINTER(MsoSensitivityLabelError),
            'MsoSensitivityLabelError',
        )
    ),
]

################################################################
# code template for SensitivityLabelPolicy implementation
# class SensitivityLabelPolicy_Impl(object):
#     def BeginInitialize(self):
#         '-no docstring-'
#         #return PolicyXmlVersion
#
#     def CompleteInitialize(self, SensitivityLabelInitInfo):
#         '-no docstring-'
#         #return 
#
#     def CreateSensitivityLabelInitInfo(self):
#         '-no docstring-'
#         #return SensitivityLabelInitInfo
#
#     @property
#     def SensitivityLabelError(self):
#         '-no docstring-'
#         #return MsoSensitivityLabelError
#

IMsoInterior._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propput'],
        HRESULT,
        'Color',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propput'],
        HRESULT,
        'ColorIndex',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'ColorIndex',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'InvertIfNegative',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'InvertIfNegative',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'Pattern',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'Pattern',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propput'],
        HRESULT,
        'PatternColor',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'PatternColor',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propput'],
        HRESULT,
        'PatternColorIndex',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propget'],
        HRESULT,
        'PatternColorIndex',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
]

################################################################
# code template for IMsoInterior implementation
# class IMsoInterior_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Color = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     ColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     InvertIfNegative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Pattern = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     PatternColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     PatternColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#


class IConverterUICallback(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03D6-0000-0000-C000-000000000046}')
    _idlflags_ = ['oleautomation']

    if TYPE_CHECKING:  # commembers
        def HrReportProgress(self, uPercentComplete: hints.Incomplete) -> hints.Hresult: ...
        def HrMessageBox(self, bstrText: hints.Incomplete, bstrCaption: hints.Incomplete, uType: hints.Incomplete) -> hints.Incomplete: ...
        def HrInputBox(self, bstrText: hints.Incomplete, bstrCaption: hints.Incomplete, fPassword: hints.Incomplete) -> hints.Incomplete: ...


IConverterUICallback._methods_ = [
    COMMETHOD(
        [],
        HRESULT,
        'HrReportProgress',
        (['in'], c_uint, 'uPercentComplete')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrMessageBox',
        (['in'], BSTR, 'bstrText'),
        (['in'], BSTR, 'bstrCaption'),
        (['in'], c_uint, 'uType'),
        (['out'], POINTER(c_int), 'pidResult')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrInputBox',
        (['in'], BSTR, 'bstrText'),
        (['in'], BSTR, 'bstrCaption'),
        (['out'], POINTER(BSTR), 'pbstrInput'),
        (['in'], c_int, 'fPassword')
    ),
]

################################################################
# code template for IConverterUICallback implementation
# class IConverterUICallback_Impl(object):
#     def HrReportProgress(self, uPercentComplete):
#         '-no docstring-'
#         #return 
#
#     def HrMessageBox(self, bstrText, bstrCaption, uType):
#         '-no docstring-'
#         #return pidResult
#
#     def HrInputBox(self, bstrText, bstrCaption, fPassword):
#         '-no docstring-'
#         #return pbstrInput
#


class CommandBarControls(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0306-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Add(self, Type: hints.Incomplete = ..., Id: hints.Incomplete = ..., Parameter: hints.Incomplete = ..., Before: hints.Incomplete = ..., Temporary: hints.Incomplete = ...) -> 'CommandBarControl': ...
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, Index: hints.Incomplete) -> 'CommandBarControl': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Parent(self) -> 'CommandBar': ...
        Parent = hints.normal_property(_get_Parent)



CommandBar._methods_ = [
    COMMETHOD(
        [dispid(1610874880), 'propget'],
        HRESULT,
        'BuiltIn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfBuiltIn')
    ),
    COMMETHOD(
        [dispid(1610874881), 'propget'],
        HRESULT,
        'Context',
        (['out', 'retval'], POINTER(BSTR), 'pbstrContext')
    ),
    COMMETHOD(
        [dispid(1610874881), 'propput'],
        HRESULT,
        'Context',
        (['in'], BSTR, 'pbstrContext')
    ),
    COMMETHOD(
        [dispid(1610874883), 'propget'],
        HRESULT,
        'Controls',
        (['out', 'retval'], POINTER(POINTER(CommandBarControls)), 'ppcbcs')
    ),
    COMMETHOD([dispid(1610874884)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(1610874885), 'propget'],
        HRESULT,
        'Enabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfEnabled')
    ),
    COMMETHOD(
        [dispid(1610874885), 'propput'],
        HRESULT,
        'Enabled',
        (['in'], VARIANT_BOOL, 'pvarfEnabled')
    ),
    COMMETHOD(
        [dispid(1610874887)],
        HRESULT,
        'FindControl',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Id'),
        (['in', 'optional'], VARIANT, 'Tag'),
        (['in', 'optional'], VARIANT, 'Visible'),
        (['in', 'optional'], VARIANT, 'Recursive'),
        (['out', 'retval'], POINTER(POINTER(CommandBarControl)), 'ppcbc')
    ),
    COMMETHOD(
        [dispid(1610874888), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_int), 'pdy')
    ),
    COMMETHOD(
        [dispid(1610874888), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_int, 'pdy')
    ),
    COMMETHOD(
        [dispid(1610874890), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'pi')
    ),
    COMMETHOD(
        [dispid(1610874891), 'hidden', 'propget'],
        HRESULT,
        'InstanceId',
        (['out', 'retval'], POINTER(c_int), 'pid')
    ),
    COMMETHOD(
        [dispid(1610874892), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_int), 'pxpLeft')
    ),
    COMMETHOD(
        [dispid(1610874892), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_int, 'pxpLeft')
    ),
    COMMETHOD(
        [dispid(1610874894), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610874894), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610874896), 'propget'],
        HRESULT,
        'NameLocal',
        (['out', 'retval'], POINTER(BSTR), 'pbstrNameLocal')
    ),
    COMMETHOD(
        [dispid(1610874896), 'propput'],
        HRESULT,
        'NameLocal',
        (['in'], BSTR, 'pbstrNameLocal')
    ),
    COMMETHOD(
        [dispid(1610874898), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610874899), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(MsoBarPosition), 'ppos')
    ),
    COMMETHOD(
        [dispid(1610874899), 'propput'],
        HRESULT,
        'Position',
        (['in'], MsoBarPosition, 'ppos')
    ),
    COMMETHOD(
        [dispid(1610874901), 'propget'],
        HRESULT,
        'RowIndex',
        (['out', 'retval'], POINTER(c_int), 'piRow')
    ),
    COMMETHOD(
        [dispid(1610874901), 'propput'],
        HRESULT,
        'RowIndex',
        (['in'], c_int, 'piRow')
    ),
    COMMETHOD(
        [dispid(1610874903), 'propget'],
        HRESULT,
        'Protection',
        (['out', 'retval'], POINTER(MsoBarProtection), 'pprot')
    ),
    COMMETHOD(
        [dispid(1610874903), 'propput'],
        HRESULT,
        'Protection',
        (['in'], MsoBarProtection, 'pprot')
    ),
    COMMETHOD([dispid(1610874905)], HRESULT, 'Reset'),
    COMMETHOD(
        [dispid(1610874906)],
        HRESULT,
        'ShowPopup',
        (['in', 'optional'], VARIANT, 'x'),
        (['in', 'optional'], VARIANT, 'y')
    ),
    COMMETHOD(
        [dispid(1610874907), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_int), 'pypTop')
    ),
    COMMETHOD(
        [dispid(1610874907), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_int, 'pypTop')
    ),
    COMMETHOD(
        [dispid(1610874909), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoBarType), 'ptype')
    ),
    COMMETHOD(
        [dispid(1610874910), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfVisible')
    ),
    COMMETHOD(
        [dispid(1610874910), 'propput'],
        HRESULT,
        'Visible',
        (['in'], VARIANT_BOOL, 'pvarfVisible')
    ),
    COMMETHOD(
        [dispid(1610874912), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_int), 'pdx')
    ),
    COMMETHOD(
        [dispid(1610874912), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_int, 'pdx')
    ),
    COMMETHOD(
        [dispid(1610874914), 'propget'],
        HRESULT,
        'AdaptiveMenu',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfAdaptiveMenu')
    ),
    COMMETHOD(
        [dispid(1610874914), 'propput'],
        HRESULT,
        'AdaptiveMenu',
        (['in'], VARIANT_BOOL, 'pvarfAdaptiveMenu')
    ),
    COMMETHOD(
        [dispid(1610874916), 'hidden', 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(c_int), 'pid')
    ),
    COMMETHOD(
        [dispid(1610874917), 'hidden', 'propget'],
        HRESULT,
        'InstanceIdPtr',
        (['out', 'retval'], POINTER(VARIANT), 'pvarPitb')
    ),
]

################################################################
# code template for CommandBar implementation
# class CommandBar_Impl(object):
#     @property
#     def BuiltIn(self):
#         '-no docstring-'
#         #return pvarfBuiltIn
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrContext
#     def _set(self, pbstrContext):
#         '-no docstring-'
#     Context = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Controls(self):
#         '-no docstring-'
#         #return ppcbcs
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfEnabled
#     def _set(self, pvarfEnabled):
#         '-no docstring-'
#     Enabled = property(_get, _set, doc = _set.__doc__)
#
#     def FindControl(self, Type, Id, Tag, Visible, Recursive):
#         '-no docstring-'
#         #return ppcbc
#
#     def _get(self):
#         '-no docstring-'
#         #return pdy
#     def _set(self, pdy):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return pi
#
#     @property
#     def InstanceId(self):
#         '-no docstring-'
#         #return pid
#
#     def _get(self):
#         '-no docstring-'
#         #return pxpLeft
#     def _set(self, pxpLeft):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrName
#     def _set(self, pbstrName):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrNameLocal
#     def _set(self, pbstrNameLocal):
#         '-no docstring-'
#     NameLocal = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def _get(self):
#         '-no docstring-'
#         #return ppos
#     def _set(self, ppos):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return piRow
#     def _set(self, piRow):
#         '-no docstring-'
#     RowIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pprot
#     def _set(self, pprot):
#         '-no docstring-'
#     Protection = property(_get, _set, doc = _set.__doc__)
#
#     def Reset(self):
#         '-no docstring-'
#         #return 
#
#     def ShowPopup(self, x, y):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pypTop
#     def _set(self, pypTop):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return ptype
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfVisible
#     def _set(self, pvarfVisible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pdx
#     def _set(self, pdx):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfAdaptiveMenu
#     def _set(self, pvarfAdaptiveMenu):
#         '-no docstring-'
#     AdaptiveMenu = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pid
#
#     @property
#     def InstanceIdPtr(self):
#         '-no docstring-'
#         #return pvarPitb
#

IMsoChartTitle._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propput'],
        HRESULT,
        'Caption',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'Characters',
        (['in', 'optional'], VARIANT, 'Start'),
        (['in', 'optional'], VARIANT, 'Length'),
        (['out', 'retval'], POINTER(POINTER(IMsoCharacters)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743811), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'ppfont')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], VARIANT, 'Val')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'Val')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propput'],
        HRESULT,
        'Orientation',
        (['in'], VARIANT, 'Val')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(VARIANT), 'Val')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], VARIANT, 'Val')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'Val')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propget'],
        HRESULT,
        'ReadingOrder',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propput'],
        HRESULT,
        'ReadingOrder',
        (['in'], c_int, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'Val')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'Val')
    ),
    COMMETHOD(
        [dispid(1610743830), 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1610743831), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1610743832)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743833), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(1610743834), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743835), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(1610743836)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(2418), 'propget'],
        HRESULT,
        'IncludeInLayout',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2418), 'propput'],
        HRESULT,
        'IncludeInLayout',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1671), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlChartElementPosition), 'pval')
    ),
    COMMETHOD(
        [dispid(1671), 'propput'],
        HRESULT,
        'Position',
        (['in'], XlChartElementPosition, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743841), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppval')
    ),
    COMMETHOD(
        [dispid(1610743842), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743845), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743846), 'propput'],
        HRESULT,
        'Formula',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743846), 'propget'],
        HRESULT,
        'Formula',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743848), 'propput'],
        HRESULT,
        'FormulaR1C1',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743848), 'propget'],
        HRESULT,
        'FormulaR1C1',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743850), 'propput'],
        HRESULT,
        'FormulaLocal',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743850), 'propget'],
        HRESULT,
        'FormulaLocal',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743852), 'propput'],
        HRESULT,
        'FormulaR1C1Local',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743852), 'propget'],
        HRESULT,
        'FormulaR1C1Local',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(253)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(254)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoChartTitle implementation
# class IMsoChartTitle_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Caption = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Characters(self, Start, Length):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return ppfont
#
#     def _get(self):
#         '-no docstring-'
#         #return Val
#     def _set(self, Val):
#         '-no docstring-'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Val
#     def _set(self, Val):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Val
#     def _set(self, Val):
#         '-no docstring-'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     ReadingOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Val
#     def _set(self, Val):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppinterior
#
#     def Delete(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppval
#
#     def Select(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     IncludeInLayout = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Formula = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FormulaR1C1Local = property(_get, _set, doc = _set.__doc__)
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#

IMsoAxisTitle._methods_ = [
]

################################################################
# code template for IMsoAxisTitle implementation
# class IMsoAxisTitle_Impl(object):


class LabelInfo(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{DFD3BED7-93EC-4BCE-866C-6BAB41D28621}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_LabelId(self) -> hints.Incomplete: ...
        def _set_LabelId(self, LabelId: hints.Incomplete) -> hints.Hresult: ...
        LabelId = hints.normal_property(_get_LabelId, _set_LabelId)
        def _get_LabelName(self) -> hints.Incomplete: ...
        def _set_LabelName(self, LabelName: hints.Incomplete) -> hints.Hresult: ...
        LabelName = hints.normal_property(_get_LabelName, _set_LabelName)
        def _get_AssignmentMethod(self) -> hints.Incomplete: ...
        def _set_AssignmentMethod(self, AssignmentMethod: hints.Incomplete) -> hints.Hresult: ...
        AssignmentMethod = hints.normal_property(_get_AssignmentMethod, _set_AssignmentMethod)
        def _get_Justification(self) -> hints.Incomplete: ...
        def _set_Justification(self, Justification: hints.Incomplete) -> hints.Hresult: ...
        Justification = hints.normal_property(_get_Justification, _set_Justification)
        def _get_IsEnabled(self) -> hints.Incomplete: ...
        def _set_IsEnabled(self, IsEnabled: hints.Incomplete) -> hints.Hresult: ...
        IsEnabled = hints.normal_property(_get_IsEnabled, _set_IsEnabled)
        def _get_SetDate(self) -> hints.Incomplete: ...
        def _set_SetDate(self, SetDate: hints.Incomplete) -> hints.Hresult: ...
        SetDate = hints.normal_property(_get_SetDate, _set_SetDate)
        def _get_SiteId(self) -> hints.Incomplete: ...
        def _set_SiteId(self, SiteId: hints.Incomplete) -> hints.Hresult: ...
        SiteId = hints.normal_property(_get_SiteId, _set_SiteId)
        def _get_ActionId(self) -> hints.Incomplete: ...
        def _set_ActionId(self, ActionId: hints.Incomplete) -> hints.Hresult: ...
        ActionId = hints.normal_property(_get_ActionId, _set_ActionId)
        def _get_ContentBits(self) -> hints.Incomplete: ...
        def _set_ContentBits(self, ContentBits: hints.Incomplete) -> hints.Hresult: ...
        ContentBits = hints.normal_property(_get_ContentBits, _set_ContentBits)


LabelInfo._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'LabelId',
        (['out', 'retval'], POINTER(BSTR), 'LabelId')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'LabelId',
        (['in'], BSTR, 'LabelId')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'LabelName',
        (['out', 'retval'], POINTER(BSTR), 'LabelName')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'LabelName',
        (['in'], BSTR, 'LabelName')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'AssignmentMethod',
        (['out', 'retval'], POINTER(MsoAssignmentMethod), 'AssignmentMethod')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'AssignmentMethod',
        (['in'], MsoAssignmentMethod, 'AssignmentMethod')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Justification',
        (['out', 'retval'], POINTER(BSTR), 'Justification')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'Justification',
        (['in'], BSTR, 'Justification')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'IsEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsEnabled')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'IsEnabled',
        (['in'], VARIANT_BOOL, 'IsEnabled')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'SetDate',
        (['out', 'retval'], POINTER(BSTR), 'SetDate')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'SetDate',
        (['in'], BSTR, 'SetDate')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'SiteId',
        (['out', 'retval'], POINTER(BSTR), 'SiteId')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'SiteId',
        (['in'], BSTR, 'SiteId')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'ActionId',
        (['out', 'retval'], POINTER(BSTR), 'ActionId')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'ActionId',
        (['in'], BSTR, 'ActionId')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'ContentBits',
        (['out', 'retval'], POINTER(c_int), 'ContentBits')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'ContentBits',
        (['in'], c_int, 'ContentBits')
    ),
]

################################################################
# code template for LabelInfo implementation
# class LabelInfo_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return LabelId
#     def _set(self, LabelId):
#         '-no docstring-'
#     LabelId = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LabelName
#     def _set(self, LabelName):
#         '-no docstring-'
#     LabelName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AssignmentMethod
#     def _set(self, AssignmentMethod):
#         '-no docstring-'
#     AssignmentMethod = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Justification
#     def _set(self, Justification):
#         '-no docstring-'
#     Justification = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return IsEnabled
#     def _set(self, IsEnabled):
#         '-no docstring-'
#     IsEnabled = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SetDate
#     def _set(self, SetDate):
#         '-no docstring-'
#     SetDate = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SiteId
#     def _set(self, SiteId):
#         '-no docstring-'
#     SiteId = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ActionId
#     def _set(self, ActionId):
#         '-no docstring-'
#     ActionId = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ContentBits
#     def _set(self, ContentBits):
#         '-no docstring-'
#     ContentBits = property(_get, _set, doc = _set.__doc__)
#

IMsoErrorBars._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'EndStyle',
        (['out', 'retval'], POINTER(XlEndStyleCap), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'EndStyle',
        (['in'], XlEndStyleCap, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoErrorBars implementation
# class IMsoErrorBars_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     EndStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#

SoftEdgeFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoSoftEdgeType), 'Type')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'Type',
        (['in'], MsoSoftEdgeType, 'Type')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Radius',
        (['out', 'retval'], POINTER(c_float), 'Radius')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Radius',
        (['in'], c_float, 'Radius')
    ),
]

################################################################
# code template for SoftEdgeFormat implementation
# class SoftEdgeFormat_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Radius
#     def _set(self, Radius):
#         '-no docstring-'
#     Radius = property(_get, _set, doc = _set.__doc__)
#


class COMAddIns(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0339-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Item(self, Index: hints.Incomplete) -> 'COMAddIn': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Update(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def SetAppModal(self, varfModal: hints.Incomplete) -> hints.Hresult: ...


COMAddIns._methods_ = [
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], POINTER(VARIANT), 'Index'),
        (['out', 'retval'], POINTER(POINTER(COMAddIn)), 'RetValue')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RetValue')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RetValue')
    ),
    COMMETHOD([dispid(2)], HRESULT, 'Update'),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(4), 'hidden', 'nonbrowsable'],
        HRESULT,
        'SetAppModal',
        (['in'], VARIANT_BOOL, 'varfModal')
    ),
]

################################################################
# code template for COMAddIns implementation
# class COMAddIns_Impl(object):
#     def Item(self, Index):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RetValue
#
#     def Update(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def SetAppModal(self, varfModal):
#         '-no docstring-'
#         #return 
#


class ISensitivityLabel(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{4B0F95AC-5769-40E9-98DF-80CDD086612E}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def GetLabel(self) -> 'LabelInfo': ...
        def SetLabel(self, LabelInfo: hints.Incomplete, Context: hints.Incomplete) -> hints.Hresult: ...
        def CreateLabelInfo(self) -> 'LabelInfo': ...
        def _get_SensitivityLabelError(self) -> hints.Incomplete: ...
        SensitivityLabelError = hints.normal_property(_get_SensitivityLabelError)


ISensitivityLabel._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(1610809345)],
        HRESULT,
        'GetLabel',
        (['out', 'retval'], POINTER(POINTER(LabelInfo)), 'LabelInfo')
    ),
    COMMETHOD(
        [dispid(1610809346)],
        HRESULT,
        'SetLabel',
        (['in'], POINTER(LabelInfo), 'LabelInfo'),
        (['in'], POINTER(IDispatch), 'Context')
    ),
    COMMETHOD(
        [dispid(1610809347)],
        HRESULT,
        'CreateLabelInfo',
        (['out', 'retval'], POINTER(POINTER(LabelInfo)), 'LabelInfo')
    ),
    COMMETHOD(
        [dispid(1610809348), 'hidden', 'nonbrowsable', 'propget'],
        HRESULT,
        'SensitivityLabelError',
        (
            ['out', 'retval'],
            POINTER(MsoSensitivityLabelError),
            'MsoSensitivityLabelError',
        )
    ),
]

################################################################
# code template for ISensitivityLabel implementation
# class ISensitivityLabel_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def GetLabel(self):
#         '-no docstring-'
#         #return LabelInfo
#
#     def SetLabel(self, LabelInfo, Context):
#         '-no docstring-'
#         #return 
#
#     def CreateLabelInfo(self):
#         '-no docstring-'
#         #return LabelInfo
#
#     @property
#     def SensitivityLabelError(self):
#         '-no docstring-'
#         #return MsoSensitivityLabelError
#


class ReflectionFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03BE-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Transparency(self) -> hints.Incomplete: ...
        def _set_Transparency(self, Transparency: hints.Incomplete) -> hints.Hresult: ...
        Transparency = hints.normal_property(_get_Transparency, _set_Transparency)
        def _get_Size(self) -> hints.Incomplete: ...
        def _set_Size(self, Size: hints.Incomplete) -> hints.Hresult: ...
        Size = hints.normal_property(_get_Size, _set_Size)
        def _get_Offset(self) -> hints.Incomplete: ...
        def _set_Offset(self, Offset: hints.Incomplete) -> hints.Hresult: ...
        Offset = hints.normal_property(_get_Offset, _set_Offset)
        def _get_Blur(self) -> hints.Incomplete: ...
        def _set_Blur(self, Blur: hints.Incomplete) -> hints.Hresult: ...
        Blur = hints.normal_property(_get_Blur, _set_Blur)


Font2._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Bold',
        (['out', 'retval'], POINTER(MsoTriState), 'Bold')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Bold',
        (['in'], MsoTriState, 'Bold')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Italic',
        (['out', 'retval'], POINTER(MsoTriState), 'Italic')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'Italic',
        (['in'], MsoTriState, 'Italic')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Strike',
        (['out', 'retval'], POINTER(MsoTextStrike), 'Strike')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'Strike',
        (['in'], MsoTextStrike, 'Strike')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Caps',
        (['out', 'retval'], POINTER(MsoTextCaps), 'Caps')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'Caps',
        (['in'], MsoTextCaps, 'Caps')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'AutorotateNumbers',
        (['out', 'retval'], POINTER(MsoTriState), 'RotateNumbers')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'AutorotateNumbers',
        (['in'], MsoTriState, 'RotateNumbers')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'BaselineOffset',
        (['out', 'retval'], POINTER(c_float), 'Offset')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'BaselineOffset',
        (['in'], c_float, 'Offset')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'Kerning',
        (['out', 'retval'], POINTER(c_float), 'KerningSize')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'Kerning',
        (['in'], c_float, 'KerningSize')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'Size',
        (['out', 'retval'], POINTER(c_float), 'Size')
    ),
    COMMETHOD(
        [dispid(9), 'propput'],
        HRESULT,
        'Size',
        (['in'], c_float, 'Size')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'Spacing',
        (['out', 'retval'], POINTER(c_float), 'Spacing')
    ),
    COMMETHOD(
        [dispid(10), 'propput'],
        HRESULT,
        'Spacing',
        (['in'], c_float, 'Spacing')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'UnderlineStyle',
        (['out', 'retval'], POINTER(MsoTextUnderlineType), 'Style')
    ),
    COMMETHOD(
        [dispid(11), 'propput'],
        HRESULT,
        'UnderlineStyle',
        (['in'], MsoTextUnderlineType, 'Style')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'Allcaps',
        (['out', 'retval'], POINTER(MsoTriState), 'Allcaps')
    ),
    COMMETHOD(
        [dispid(12), 'propput'],
        HRESULT,
        'Allcaps',
        (['in'], MsoTriState, 'Allcaps')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'DoubleStrikeThrough',
        (['out', 'retval'], POINTER(MsoTriState), 'DoubleStrikeThrough')
    ),
    COMMETHOD(
        [dispid(13), 'propput'],
        HRESULT,
        'DoubleStrikeThrough',
        (['in'], MsoTriState, 'DoubleStrikeThrough')
    ),
    COMMETHOD(
        [dispid(14), 'propget'],
        HRESULT,
        'Equalize',
        (['out', 'retval'], POINTER(MsoTriState), 'Equalize')
    ),
    COMMETHOD(
        [dispid(14), 'propput'],
        HRESULT,
        'Equalize',
        (['in'], MsoTriState, 'Equalize')
    ),
    COMMETHOD(
        [dispid(15), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(FillFormat)), 'Fill')
    ),
    COMMETHOD(
        [dispid(16), 'propget'],
        HRESULT,
        'Glow',
        (['out', 'retval'], POINTER(POINTER(GlowFormat)), 'Glow')
    ),
    COMMETHOD(
        [dispid(17), 'propget'],
        HRESULT,
        'Reflection',
        (['out', 'retval'], POINTER(POINTER(ReflectionFormat)), 'Reflection')
    ),
    COMMETHOD(
        [dispid(18), 'propget'],
        HRESULT,
        'Line',
        (['out', 'retval'], POINTER(POINTER(LineFormat)), 'Line')
    ),
    COMMETHOD(
        [dispid(19), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(POINTER(ShadowFormat)), 'Shadow')
    ),
    COMMETHOD(
        [dispid(20), 'propget'],
        HRESULT,
        'Highlight',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'Highlight')
    ),
    COMMETHOD(
        [dispid(21), 'propget'],
        HRESULT,
        'UnderlineColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'UnderlineColor')
    ),
    COMMETHOD(
        [dispid(22), 'propget'],
        HRESULT,
        'Smallcaps',
        (['out', 'retval'], POINTER(MsoTriState), 'Smallcaps')
    ),
    COMMETHOD(
        [dispid(22), 'propput'],
        HRESULT,
        'Smallcaps',
        (['in'], MsoTriState, 'Smallcaps')
    ),
    COMMETHOD(
        [dispid(23), 'propget'],
        HRESULT,
        'SoftEdgeFormat',
        (['out', 'retval'], POINTER(MsoSoftEdgeType), 'SoftEdgeFormat')
    ),
    COMMETHOD(
        [dispid(23), 'propput'],
        HRESULT,
        'SoftEdgeFormat',
        (['in'], MsoSoftEdgeType, 'SoftEdgeFormat')
    ),
    COMMETHOD(
        [dispid(24), 'propget'],
        HRESULT,
        'StrikeThrough',
        (['out', 'retval'], POINTER(MsoTriState), 'StrikeThrough')
    ),
    COMMETHOD(
        [dispid(24), 'propput'],
        HRESULT,
        'StrikeThrough',
        (['in'], MsoTriState, 'StrikeThrough')
    ),
    COMMETHOD(
        [dispid(25), 'propget'],
        HRESULT,
        'Subscript',
        (['out', 'retval'], POINTER(MsoTriState), 'Subscript')
    ),
    COMMETHOD(
        [dispid(25), 'propput'],
        HRESULT,
        'Subscript',
        (['in'], MsoTriState, 'Subscript')
    ),
    COMMETHOD(
        [dispid(26), 'propget'],
        HRESULT,
        'Superscript',
        (['out', 'retval'], POINTER(MsoTriState), 'Superscript')
    ),
    COMMETHOD(
        [dispid(26), 'propput'],
        HRESULT,
        'Superscript',
        (['in'], MsoTriState, 'Superscript')
    ),
    COMMETHOD(
        [dispid(27), 'propget'],
        HRESULT,
        'WordArtformat',
        (['out', 'retval'], POINTER(MsoPresetTextEffect), 'WordArtformat')
    ),
    COMMETHOD(
        [dispid(27), 'propput'],
        HRESULT,
        'WordArtformat',
        (['in'], MsoPresetTextEffect, 'WordArtformat')
    ),
    COMMETHOD(
        [dispid(28), 'propget'],
        HRESULT,
        'Embeddable',
        (['out', 'retval'], POINTER(MsoTriState), 'Embeddable')
    ),
    COMMETHOD(
        [dispid(29), 'propget'],
        HRESULT,
        'Embedded',
        (['out', 'retval'], POINTER(MsoTriState), 'Embedded')
    ),
    COMMETHOD(
        [dispid(30), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(30), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(31), 'propget'],
        HRESULT,
        'NameAscii',
        (['out', 'retval'], POINTER(BSTR), 'NameAscii')
    ),
    COMMETHOD(
        [dispid(31), 'propput'],
        HRESULT,
        'NameAscii',
        (['in'], BSTR, 'NameAscii')
    ),
    COMMETHOD(
        [dispid(32), 'propget'],
        HRESULT,
        'NameComplexScript',
        (['out', 'retval'], POINTER(BSTR), 'NameComplexScript')
    ),
    COMMETHOD(
        [dispid(32), 'propput'],
        HRESULT,
        'NameComplexScript',
        (['in'], BSTR, 'NameComplexScript')
    ),
    COMMETHOD(
        [dispid(33), 'propget'],
        HRESULT,
        'NameFarEast',
        (['out', 'retval'], POINTER(BSTR), 'NameFarEast')
    ),
    COMMETHOD(
        [dispid(33), 'propput'],
        HRESULT,
        'NameFarEast',
        (['in'], BSTR, 'NameFarEast')
    ),
    COMMETHOD(
        [dispid(34), 'propget'],
        HRESULT,
        'NameOther',
        (['out', 'retval'], POINTER(BSTR), 'NameOther')
    ),
    COMMETHOD(
        [dispid(34), 'propput'],
        HRESULT,
        'NameOther',
        (['in'], BSTR, 'NameOther')
    ),
]

################################################################
# code template for Font2 implementation
# class Font2_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return Bold
#     def _set(self, Bold):
#         '-no docstring-'
#     Bold = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Italic
#     def _set(self, Italic):
#         '-no docstring-'
#     Italic = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Strike
#     def _set(self, Strike):
#         '-no docstring-'
#     Strike = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Caps
#     def _set(self, Caps):
#         '-no docstring-'
#     Caps = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotateNumbers
#     def _set(self, RotateNumbers):
#         '-no docstring-'
#     AutorotateNumbers = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Offset
#     def _set(self, Offset):
#         '-no docstring-'
#     BaselineOffset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return KerningSize
#     def _set(self, KerningSize):
#         '-no docstring-'
#     Kerning = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Size
#     def _set(self, Size):
#         '-no docstring-'
#     Size = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Spacing
#     def _set(self, Spacing):
#         '-no docstring-'
#     Spacing = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Style
#     def _set(self, Style):
#         '-no docstring-'
#     UnderlineStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Allcaps
#     def _set(self, Allcaps):
#         '-no docstring-'
#     Allcaps = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return DoubleStrikeThrough
#     def _set(self, DoubleStrikeThrough):
#         '-no docstring-'
#     DoubleStrikeThrough = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Equalize
#     def _set(self, Equalize):
#         '-no docstring-'
#     Equalize = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return Fill
#
#     @property
#     def Glow(self):
#         '-no docstring-'
#         #return Glow
#
#     @property
#     def Reflection(self):
#         '-no docstring-'
#         #return Reflection
#
#     @property
#     def Line(self):
#         '-no docstring-'
#         #return Line
#
#     @property
#     def Shadow(self):
#         '-no docstring-'
#         #return Shadow
#
#     @property
#     def Highlight(self):
#         '-no docstring-'
#         #return Highlight
#
#     @property
#     def UnderlineColor(self):
#         '-no docstring-'
#         #return UnderlineColor
#
#     def _get(self):
#         '-no docstring-'
#         #return Smallcaps
#     def _set(self, Smallcaps):
#         '-no docstring-'
#     Smallcaps = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SoftEdgeFormat
#     def _set(self, SoftEdgeFormat):
#         '-no docstring-'
#     SoftEdgeFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return StrikeThrough
#     def _set(self, StrikeThrough):
#         '-no docstring-'
#     StrikeThrough = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Subscript
#     def _set(self, Subscript):
#         '-no docstring-'
#     Subscript = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Superscript
#     def _set(self, Superscript):
#         '-no docstring-'
#     Superscript = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WordArtformat
#     def _set(self, WordArtformat):
#         '-no docstring-'
#     WordArtformat = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Embeddable(self):
#         '-no docstring-'
#         #return Embeddable
#
#     @property
#     def Embedded(self):
#         '-no docstring-'
#         #return Embedded
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NameAscii
#     def _set(self, NameAscii):
#         '-no docstring-'
#     NameAscii = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NameComplexScript
#     def _set(self, NameComplexScript):
#         '-no docstring-'
#     NameComplexScript = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NameFarEast
#     def _set(self, NameFarEast):
#         '-no docstring-'
#     NameFarEast = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return NameOther
#     def _set(self, NameOther):
#         '-no docstring-'
#     NameOther = property(_get, _set, doc = _set.__doc__)
#


class IMsoHiLoLines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C172E-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Hresult: ...
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Hresult: ...
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


IMsoHiLoLines._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD([dispid(1610743810)], HRESULT, 'Select'),
    COMMETHOD(
        [dispid(1610743811), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'RHS')
    ),
    COMMETHOD([dispid(1610743812)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(1610743813), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for IMsoHiLoLines implementation
# class IMsoHiLoLines_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#

_CommandBarComboBoxEvents._disp_methods_ = [
    DISPMETHOD(
        [dispid(1)],
        None,
        'Change',
        (['in'], POINTER(CommandBarComboBox), 'Ctrl')
    ),
]

DiagramNodeChildren._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'Node')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'AddNode',
        (['in', 'optional'], VARIANT, 'Index', -1),
        (['in', 'optional'], MsoDiagramNodeType, 'NodeType', 1),
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'NewNode')
    ),
    COMMETHOD([dispid(11)], HRESULT, 'SelectAll'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'iDiagramNodes')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'FirstChild',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'First')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'LastChild',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'Last')
    ),
]

################################################################
# code template for DiagramNodeChildren implementation
# class DiagramNodeChildren_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Node
#
#     def AddNode(self, Index, NodeType):
#         '-no docstring-'
#         #return NewNode
#
#     def SelectAll(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return iDiagramNodes
#
#     @property
#     def FirstChild(self):
#         '-no docstring-'
#         #return First
#
#     @property
#     def LastChild(self):
#         '-no docstring-'
#         #return Last
#

CommandBarControls._methods_ = [
    COMMETHOD(
        [dispid(1610809344)],
        HRESULT,
        'Add',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Id'),
        (['in', 'optional'], VARIANT, 'Parameter'),
        (['in', 'optional'], VARIANT, 'Before'),
        (['in', 'optional'], VARIANT, 'Temporary'),
        (['out', 'retval'], POINTER(POINTER(CommandBarControl)), 'ppcbc')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcToolbarControls')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(CommandBarControl)), 'ppcbc')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(CommandBar)), 'ppcb')
    ),
]

################################################################
# code template for CommandBarControls implementation
# class CommandBarControls_Impl(object):
#     def Add(self, Type, Id, Parameter, Before, Temporary):
#         '-no docstring-'
#         #return ppcbc
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcToolbarControls
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppcbc
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppcb
#


class IConverter(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IUnknown):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03D7-0000-0000-C000-000000000046}')
    _idlflags_ = ['oleautomation']

    if TYPE_CHECKING:  # commembers
        def HrInitConverter(self, pcap: hints.Incomplete, pcuic: hints.Incomplete) -> 'IConverterPreferences': ...
        def HrUninitConverter(self, pcuic: hints.Incomplete) -> hints.Hresult: ...
        def HrImport(self, bstrSourcePath: hints.Incomplete, bstrDestPath: hints.Incomplete, pcap: hints.Incomplete, pcuic: hints.Incomplete) -> 'IConverterPreferences': ...
        def HrExport(self, bstrSourcePath: hints.Incomplete, bstrDestPath: hints.Incomplete, bstrClass: hints.Incomplete, pcap: hints.Incomplete, pcuic: hints.Incomplete) -> 'IConverterPreferences': ...
        def HrGetFormat(self, bstrPath: hints.Incomplete, pcap: hints.Incomplete, pcuic: hints.Incomplete) -> hints.Tuple[hints.Incomplete, 'IConverterPreferences']: ...
        def HrGetErrorString(self, hrErr: hints.Incomplete, pcap: hints.Incomplete) -> hints.Incomplete: ...


IConverter._methods_ = [
    COMMETHOD(
        [],
        HRESULT,
        'HrInitConverter',
        (['in'], POINTER(IConverterApplicationPreferences), 'pcap'),
        (['out'], POINTER(POINTER(IConverterPreferences)), 'ppcp'),
        (['in'], POINTER(IConverterUICallback), 'pcuic')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrUninitConverter',
        (['in'], POINTER(IConverterUICallback), 'pcuic')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrImport',
        (['in'], BSTR, 'bstrSourcePath'),
        (['in'], BSTR, 'bstrDestPath'),
        (['in'], POINTER(IConverterApplicationPreferences), 'pcap'),
        (['out'], POINTER(POINTER(IConverterPreferences)), 'ppcp'),
        (['in'], POINTER(IConverterUICallback), 'pcuic')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrExport',
        (['in'], BSTR, 'bstrSourcePath'),
        (['in'], BSTR, 'bstrDestPath'),
        (['in'], BSTR, 'bstrClass'),
        (['in'], POINTER(IConverterApplicationPreferences), 'pcap'),
        (['out'], POINTER(POINTER(IConverterPreferences)), 'ppcp'),
        (['in'], POINTER(IConverterUICallback), 'pcuic')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrGetFormat',
        (['in'], BSTR, 'bstrPath'),
        (['out'], POINTER(BSTR), 'pbstrClass'),
        (['in'], POINTER(IConverterApplicationPreferences), 'pcap'),
        (['out'], POINTER(POINTER(IConverterPreferences)), 'ppcp'),
        (['in'], POINTER(IConverterUICallback), 'pcuic')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'HrGetErrorString',
        (['in'], c_int, 'hrErr'),
        (['out'], POINTER(BSTR), 'pbstrErrorMsg'),
        (['in'], POINTER(IConverterApplicationPreferences), 'pcap')
    ),
]

################################################################
# code template for IConverter implementation
# class IConverter_Impl(object):
#     def HrInitConverter(self, pcap, pcuic):
#         '-no docstring-'
#         #return ppcp
#
#     def HrUninitConverter(self, pcuic):
#         '-no docstring-'
#         #return 
#
#     def HrImport(self, bstrSourcePath, bstrDestPath, pcap, pcuic):
#         '-no docstring-'
#         #return ppcp
#
#     def HrExport(self, bstrSourcePath, bstrDestPath, bstrClass, pcap, pcuic):
#         '-no docstring-'
#         #return ppcp
#
#     def HrGetFormat(self, bstrPath, pcap, pcuic):
#         '-no docstring-'
#         #return pbstrClass, ppcp
#
#     def HrGetErrorString(self, hrErr, pcap):
#         '-no docstring-'
#         #return pbstrErrorMsg
#


class TextFrame(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0320-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_MarginBottom(self) -> hints.Incomplete: ...
        def _set_MarginBottom(self, MarginBottom: hints.Incomplete) -> hints.Hresult: ...
        MarginBottom = hints.normal_property(_get_MarginBottom, _set_MarginBottom)
        def _get_MarginLeft(self) -> hints.Incomplete: ...
        def _set_MarginLeft(self, MarginLeft: hints.Incomplete) -> hints.Hresult: ...
        MarginLeft = hints.normal_property(_get_MarginLeft, _set_MarginLeft)
        def _get_MarginRight(self) -> hints.Incomplete: ...
        def _set_MarginRight(self, MarginRight: hints.Incomplete) -> hints.Hresult: ...
        MarginRight = hints.normal_property(_get_MarginRight, _set_MarginRight)
        def _get_MarginTop(self) -> hints.Incomplete: ...
        def _set_MarginTop(self, MarginTop: hints.Incomplete) -> hints.Hresult: ...
        MarginTop = hints.normal_property(_get_MarginTop, _set_MarginTop)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, Orientation: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)


TextFrame._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'MarginBottom',
        (['out', 'retval'], POINTER(c_float), 'MarginBottom')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'MarginBottom',
        (['in'], c_float, 'MarginBottom')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'MarginLeft',
        (['out', 'retval'], POINTER(c_float), 'MarginLeft')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'MarginLeft',
        (['in'], c_float, 'MarginLeft')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'MarginRight',
        (['out', 'retval'], POINTER(c_float), 'MarginRight')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'MarginRight',
        (['in'], c_float, 'MarginRight')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'MarginTop',
        (['out', 'retval'], POINTER(c_float), 'MarginTop')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'MarginTop',
        (['in'], c_float, 'MarginTop')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(MsoTextOrientation), 'Orientation')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'Orientation',
        (['in'], MsoTextOrientation, 'Orientation')
    ),
]

################################################################
# code template for TextFrame implementation
# class TextFrame_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginBottom
#     def _set(self, MarginBottom):
#         '-no docstring-'
#     MarginBottom = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginLeft
#     def _set(self, MarginLeft):
#         '-no docstring-'
#     MarginLeft = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginRight
#     def _set(self, MarginRight):
#         '-no docstring-'
#     MarginRight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginTop
#     def _set(self, MarginTop):
#         '-no docstring-'
#     MarginTop = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Orientation
#     def _set(self, Orientation):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#


class CustomXMLPrefixMapping(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB10-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Prefix(self) -> hints.Incomplete: ...
        Prefix = hints.normal_property(_get_Prefix)
        def _get_NamespaceURI(self) -> hints.Incomplete: ...
        NamespaceURI = hints.normal_property(_get_NamespaceURI)


CustomXMLPrefixMapping._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Prefix',
        (['out', 'retval'], POINTER(BSTR), 'pbstrPrefix')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'NamespaceURI',
        (['out', 'retval'], POINTER(BSTR), 'pbstrNamespaceURI')
    ),
]

################################################################
# code template for CustomXMLPrefixMapping implementation
# class CustomXMLPrefixMapping_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def Prefix(self):
#         '-no docstring-'
#         #return pbstrPrefix
#
#     @property
#     def NamespaceURI(self):
#         '-no docstring-'
#         #return pbstrNamespaceURI
#


class CustomXMLSchema(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB01-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Location(self) -> hints.Incomplete: ...
        Location = hints.normal_property(_get_Location)
        def _get_NamespaceURI(self) -> hints.Incomplete: ...
        NamespaceURI = hints.normal_property(_get_NamespaceURI)
        def Delete(self) -> hints.Hresult: ...
        def Reload(self) -> hints.Hresult: ...


CustomXMLSchema._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Location',
        (['out', 'retval'], POINTER(BSTR), 'pbstrLocation')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'NamespaceURI',
        (['out', 'retval'], POINTER(BSTR), 'pbstrNamespaceURI')
    ),
    COMMETHOD([dispid(1610809347)], HRESULT, 'Delete'),
    COMMETHOD([dispid(1610809348)], HRESULT, 'Reload'),
]

################################################################
# code template for CustomXMLSchema implementation
# class CustomXMLSchema_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def Location(self):
#         '-no docstring-'
#         #return pbstrLocation
#
#     @property
#     def NamespaceURI(self):
#         '-no docstring-'
#         #return pbstrNamespaceURI
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Reload(self):
#         '-no docstring-'
#         #return 
#


class SearchScopes(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0366-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'SearchScope': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class SearchScope(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0367-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_ScopeFolder(self) -> 'ScopeFolder': ...
        ScopeFolder = hints.normal_property(_get_ScopeFolder)


SearchScopes._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SearchScope)), 'SearchScopeRet')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'iCountRetVal')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for SearchScopes implementation
# class SearchScopes_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return SearchScopeRet
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return iCountRetVal
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class ISensitivityLabelEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D996597A-0E80-4753-81FC-DCF16BDF4947}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def LabelChanged(self, OldLabelInfo: hints.Incomplete, NewLabelInfo: hints.Incomplete, HResult: hints.Incomplete, Context: hints.Incomplete) -> hints.Hresult: ...


ISensitivityLabelEvents._methods_ = [
    COMMETHOD(
        [dispid(1)],
        None,
        'LabelChanged',
        (['in'], POINTER(LabelInfo), 'OldLabelInfo'),
        (['in'], POINTER(LabelInfo), 'NewLabelInfo'),
        (['in'], c_int, 'HResult'),
        (['in'], POINTER(IDispatch), 'Context')
    ),
]

################################################################
# code template for ISensitivityLabelEvents implementation
# class ISensitivityLabelEvents_Impl(object):
#     def LabelChanged(self, OldLabelInfo, NewLabelInfo, HResult, Context):
#         '-no docstring-'
#         #return 
#


class IMsoChart(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1709-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_HasTitle(self) -> hints.Incomplete: ...
        def _set_HasTitle(self, fTitle: hints.Incomplete) -> hints.Hresult: ...
        HasTitle = hints.normal_property(_get_HasTitle, _set_HasTitle)
        def _get_ChartTitle(self) -> 'IMsoChartTitle': ...
        ChartTitle = hints.normal_property(_get_ChartTitle)
        def _get_DepthPercent(self) -> hints.Incomplete: ...
        def _set_DepthPercent(self, pwDepthPercent: hints.Incomplete) -> hints.Hresult: ...
        DepthPercent = hints.normal_property(_get_DepthPercent, _set_DepthPercent)
        def _get_Elevation(self) -> hints.Incomplete: ...
        def _set_Elevation(self, pwElevation: hints.Incomplete) -> hints.Hresult: ...
        Elevation = hints.normal_property(_get_Elevation, _set_Elevation)
        def _get_GapDepth(self) -> hints.Incomplete: ...
        def _set_GapDepth(self, pwGapDepth: hints.Incomplete) -> hints.Hresult: ...
        GapDepth = hints.normal_property(_get_GapDepth, _set_GapDepth)
        def _get_HeightPercent(self) -> hints.Incomplete: ...
        def _set_HeightPercent(self, pwHeightPercent: hints.Incomplete) -> hints.Hresult: ...
        HeightPercent = hints.normal_property(_get_HeightPercent, _set_HeightPercent)
        def _get_Perspective(self) -> hints.Incomplete: ...
        def _set_Perspective(self, pwPerspective: hints.Incomplete) -> hints.Hresult: ...
        Perspective = hints.normal_property(_get_Perspective, _set_Perspective)
        def _get_RightAngleAxes(self) -> hints.Incomplete: ...
        def _set_RightAngleAxes(self, pvarRightAngleAxes: hints.Incomplete) -> hints.Hresult: ...
        RightAngleAxes = hints.normal_property(_get_RightAngleAxes, _set_RightAngleAxes)
        def _get_Rotation(self) -> hints.Incomplete: ...
        def _set_Rotation(self, pvarRotation: hints.Incomplete) -> hints.Hresult: ...
        Rotation = hints.normal_property(_get_Rotation, _set_Rotation)
        def _get_DisplayBlanksAs(self) -> hints.Incomplete: ...
        def _set_DisplayBlanksAs(self, pres: hints.Incomplete) -> hints.Hresult: ...
        DisplayBlanksAs = hints.normal_property(_get_DisplayBlanksAs, _set_DisplayBlanksAs)
        def _get_ProtectData(self) -> hints.Incomplete: ...
        def _set_ProtectData(self, pres: hints.Incomplete) -> hints.Hresult: ...
        ProtectData = hints.normal_property(_get_ProtectData, _set_ProtectData)
        def _get_ProtectFormatting(self) -> hints.Incomplete: ...
        def _set_ProtectFormatting(self, pres: hints.Incomplete) -> hints.Hresult: ...
        ProtectFormatting = hints.normal_property(_get_ProtectFormatting, _set_ProtectFormatting)
        def _get_ProtectGoalSeek(self) -> hints.Incomplete: ...
        def _set_ProtectGoalSeek(self, pres: hints.Incomplete) -> hints.Hresult: ...
        ProtectGoalSeek = hints.normal_property(_get_ProtectGoalSeek, _set_ProtectGoalSeek)
        def _get_ProtectSelection(self) -> hints.Incomplete: ...
        def _set_ProtectSelection(self, pres: hints.Incomplete) -> hints.Hresult: ...
        ProtectSelection = hints.normal_property(_get_ProtectSelection, _set_ProtectSelection)
        def _get_ProtectChartObjects(self) -> hints.Incomplete: ...
        def _set_ProtectChartObjects(self, pres: hints.Incomplete) -> hints.Hresult: ...
        ProtectChartObjects = hints.normal_property(_get_ProtectChartObjects, _set_ProtectChartObjects)
        def UnProtect(self, Password: hints.Incomplete = ...) -> hints.Hresult: ...
        def Protect(self, Password: hints.Incomplete = ..., DrawingObjects: hints.Incomplete = ..., Contents: hints.Incomplete = ..., Scenarios: hints.Incomplete = ..., UserInterfaceOnly: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_ChartGroups(self, pvarIndex: hints.Incomplete = ..., varIgallery: hints.Incomplete = ...) -> hints.Incomplete: ...
        ChartGroups = hints.named_property('ChartGroups', _get_ChartGroups)
        def SeriesCollection(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _ApplyDataLabels(self, Type: hints.Incomplete = ..., IMsoLegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_SubType(self) -> hints.Incomplete: ...
        def _set_SubType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SubType = hints.normal_property(_get_SubType, _set_SubType)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Corners(self) -> 'IMsoCorners': ...
        Corners = hints.normal_property(_get_Corners)
        def ApplyDataLabels(self, Type: hints.Incomplete = ..., IMsoLegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ..., ShowSeriesName: hints.Incomplete = ..., ShowCategoryName: hints.Incomplete = ..., ShowValue: hints.Incomplete = ..., ShowPercentage: hints.Incomplete = ..., ShowBubbleSize: hints.Incomplete = ..., Separator: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_ChartType(self) -> hints.Incomplete: ...
        def _set_ChartType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ChartType = hints.normal_property(_get_ChartType, _set_ChartType)
        def _get_HasDataTable(self) -> hints.Incomplete: ...
        def _set_HasDataTable(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasDataTable = hints.normal_property(_get_HasDataTable, _set_HasDataTable)
        def ApplyCustomType(self, ChartType: hints.Incomplete, TypeName: hints.Incomplete = ...) -> hints.Hresult: ...
        def GetChartElement(self, x: hints.Incomplete, y: hints.Incomplete, ElementID: hints.Incomplete, Arg1: hints.Incomplete, Arg2: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete, hints.Incomplete]: ...
        def SetSourceData(self, Source: hints.Incomplete, PlotBy: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_PlotBy(self) -> hints.Incomplete: ...
        def _set_PlotBy(self, PlotBy: hints.Incomplete) -> hints.Hresult: ...
        PlotBy = hints.normal_property(_get_PlotBy, _set_PlotBy)
        def _get_HasLegend(self) -> hints.Incomplete: ...
        def _set_HasLegend(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasLegend = hints.normal_property(_get_HasLegend, _set_HasLegend)
        def _get_Legend(self) -> 'IMsoLegend': ...
        Legend = hints.normal_property(_get_Legend)
        def Axes(self, Type: hints.Incomplete = ..., AxisGroup: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_HasAxis(self, axisType: hints.Incomplete = ..., AxisGroup: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _set_HasAxis(self, axisType: hints.Incomplete = ..., AxisGroup: hints.Incomplete = ..., **kwargs: hints.Any) -> hints.Hresult: ...
        HasAxis = hints.named_property('HasAxis', _get_HasAxis, _set_HasAxis)
        def _get_Walls(self, fBackWall: hints.Incomplete = ...) -> 'IMsoWalls': ...
        Walls = hints.named_property('Walls', _get_Walls)
        def _get_Floor(self) -> 'IMsoFloor': ...
        Floor = hints.normal_property(_get_Floor)
        def _get_PlotArea(self) -> 'IMsoPlotArea': ...
        PlotArea = hints.normal_property(_get_PlotArea)
        def _get_PlotVisibleOnly(self) -> hints.Incomplete: ...
        def _set_PlotVisibleOnly(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PlotVisibleOnly = hints.normal_property(_get_PlotVisibleOnly, _set_PlotVisibleOnly)
        def _get_ChartArea(self) -> 'IMsoChartArea': ...
        ChartArea = hints.normal_property(_get_ChartArea)
        def AutoFormat(self, rGallery: hints.Incomplete, varFormat: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_AutoScaling(self) -> hints.Incomplete: ...
        def _set_AutoScaling(self, f: hints.Incomplete) -> hints.Hresult: ...
        AutoScaling = hints.normal_property(_get_AutoScaling, _set_AutoScaling)
        def SetBackgroundPicture(self, bstr: hints.Incomplete) -> hints.Hresult: ...
        def ChartWizard(self, varSource: hints.Incomplete = ..., varGallery: hints.Incomplete = ..., varFormat: hints.Incomplete = ..., varPlotBy: hints.Incomplete = ..., varCategoryLabels: hints.Incomplete = ..., varSeriesLabels: hints.Incomplete = ..., varHasLegend: hints.Incomplete = ..., varTitle: hints.Incomplete = ..., varCategoryTitle: hints.Incomplete = ..., varValueTitle: hints.Incomplete = ..., varExtraTitle: hints.Incomplete = ...) -> hints.Hresult: ...
        def CopyPicture(self, Appearance: hints.Incomplete = ..., Format: hints.Incomplete = ..., Size: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_DataTable(self) -> 'IMsoDataTable': ...
        DataTable = hints.normal_property(_get_DataTable)
        def Evaluate(self, varName: hints.Incomplete, LocaleID: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        def _Evaluate(self, varName: hints.Incomplete, LocaleID: hints.Incomplete) -> hints.Incomplete: ...
        def Paste(self, varType: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_BarShape(self) -> hints.Incomplete: ...
        def _set_BarShape(self, pShape: hints.Incomplete) -> hints.Hresult: ...
        BarShape = hints.normal_property(_get_BarShape, _set_BarShape)
        def Export(self, bstr: hints.Incomplete, varFilterName: hints.Incomplete = ..., varInteractive: hints.Incomplete = ...) -> hints.Incomplete: ...
        def SetDefaultChart(self, varName: hints.Incomplete) -> hints.Hresult: ...
        def ApplyChartTemplate(self, bstrFileName: hints.Incomplete) -> hints.Hresult: ...
        def SaveChartTemplate(self, bstrFileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_SideWall(self) -> 'IMsoWalls': ...
        SideWall = hints.normal_property(_get_SideWall)
        def _get_BackWall(self) -> 'IMsoWalls': ...
        BackWall = hints.normal_property(_get_BackWall)
        def _get_ChartStyle(self) -> hints.Incomplete: ...
        def _set_ChartStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ChartStyle = hints.normal_property(_get_ChartStyle, _set_ChartStyle)
        def ClearToMatchStyle(self) -> hints.Hresult: ...
        def _get_PivotLayout(self) -> hints.Incomplete: ...
        PivotLayout = hints.normal_property(_get_PivotLayout)
        def _get_HasPivotFields(self) -> hints.Incomplete: ...
        def _set_HasPivotFields(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasPivotFields = hints.normal_property(_get_HasPivotFields, _set_HasPivotFields)
        def RefreshPivotTable(self) -> hints.Hresult: ...
        def _get_ShowDataLabelsOverMaximum(self) -> hints.Incomplete: ...
        def _set_ShowDataLabelsOverMaximum(self, pRHS: hints.Incomplete) -> hints.Hresult: ...
        ShowDataLabelsOverMaximum = hints.normal_property(_get_ShowDataLabelsOverMaximum, _set_ShowDataLabelsOverMaximum)
        def ApplyLayout(self, Layout: hints.Incomplete, varChartType: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_Selection(self) -> hints.Incomplete: ...
        Selection = hints.normal_property(_get_Selection)
        def Refresh(self) -> hints.Hresult: ...
        def SetElement(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        def _get_ChartData(self) -> 'IMsoChartData': ...
        ChartData = hints.normal_property(_get_ChartData)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Shapes(self) -> 'Shapes': ...
        Shapes = hints.normal_property(_get_Shapes)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Area3DGroup(self) -> 'IMsoChartGroup': ...
        Area3DGroup = hints.normal_property(_get_Area3DGroup)
        def AreaGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Bar3DGroup(self) -> 'IMsoChartGroup': ...
        Bar3DGroup = hints.normal_property(_get_Bar3DGroup)
        def BarGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Column3DGroup(self) -> 'IMsoChartGroup': ...
        Column3DGroup = hints.normal_property(_get_Column3DGroup)
        def ColumnGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Line3DGroup(self) -> 'IMsoChartGroup': ...
        Line3DGroup = hints.normal_property(_get_Line3DGroup)
        def LineGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Pie3DGroup(self) -> 'IMsoChartGroup': ...
        Pie3DGroup = hints.normal_property(_get_Pie3DGroup)
        def PieGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def DoughnutGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def RadarGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_SurfaceGroup(self) -> 'IMsoChartGroup': ...
        SurfaceGroup = hints.normal_property(_get_SurfaceGroup)
        def XYGroups(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Delete(self) -> hints.Incomplete: ...
        def Copy(self) -> hints.Incomplete: ...
        def Select(self, Replace: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_ShowReportFilterFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowReportFilterFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowReportFilterFieldButtons = hints.normal_property(_get_ShowReportFilterFieldButtons, _set_ShowReportFilterFieldButtons)
        def _get_ShowLegendFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowLegendFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowLegendFieldButtons = hints.normal_property(_get_ShowLegendFieldButtons, _set_ShowLegendFieldButtons)
        def _get_ShowAxisFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowAxisFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowAxisFieldButtons = hints.normal_property(_get_ShowAxisFieldButtons, _set_ShowAxisFieldButtons)
        def _get_ShowValueFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowValueFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowValueFieldButtons = hints.normal_property(_get_ShowValueFieldButtons, _set_ShowValueFieldButtons)
        def _get_ShowAllFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowAllFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowAllFieldButtons = hints.normal_property(_get_ShowAllFieldButtons, _set_ShowAllFieldButtons)
        def _set_ProtectChartSheetFormatting(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        ProtectChartSheetFormatting = hints.normal_property(fset=_set_ProtectChartSheetFormatting)
        def FullSeriesCollection(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_CategoryLabelLevel(self) -> hints.Incomplete: ...
        def _set_CategoryLabelLevel(self, plevel: hints.Incomplete) -> hints.Hresult: ...
        CategoryLabelLevel = hints.normal_property(_get_CategoryLabelLevel, _set_CategoryLabelLevel)
        def _get_SeriesNameLevel(self) -> hints.Incomplete: ...
        def _set_SeriesNameLevel(self, plevel: hints.Incomplete) -> hints.Hresult: ...
        SeriesNameLevel = hints.normal_property(_get_SeriesNameLevel, _set_SeriesNameLevel)
        def _get_HasHiddenContent(self) -> hints.Incomplete: ...
        HasHiddenContent = hints.normal_property(_get_HasHiddenContent)
        def DeleteHiddenContent(self) -> hints.Hresult: ...
        def _get_ChartColor(self) -> hints.Incomplete: ...
        def _set_ChartColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ChartColor = hints.normal_property(_get_ChartColor, _set_ChartColor)
        def ClearToMatchColorStyle(self) -> hints.Hresult: ...
        def _get_ShowExpandCollapseEntireFieldButtons(self) -> hints.Incomplete: ...
        def _set_ShowExpandCollapseEntireFieldButtons(self, res: hints.Incomplete) -> hints.Hresult: ...
        ShowExpandCollapseEntireFieldButtons = hints.normal_property(_get_ShowExpandCollapseEntireFieldButtons, _set_ShowExpandCollapseEntireFieldButtons)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...
        def _get_DisplayValueNotAvailableAsBlank(self) -> hints.Incomplete: ...
        def _set_DisplayValueNotAvailableAsBlank(self, res: hints.Incomplete) -> hints.Hresult: ...
        DisplayValueNotAvailableAsBlank = hints.normal_property(_get_DisplayValueNotAvailableAsBlank, _set_DisplayValueNotAvailableAsBlank)




class IMsoCorners(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1714-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)




class IMsoLegend(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1710-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def LegendEntries(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def Clear(self) -> hints.Incomplete: ...
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_IncludeInLayout(self) -> hints.Incomplete: ...
        def _set_IncludeInLayout(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        IncludeInLayout = hints.normal_property(_get_IncludeInLayout, _set_IncludeInLayout)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


class IMsoWalls(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1715-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_PictureType(self) -> hints.Incomplete: ...
        def _set_PictureType(self, pvar: hints.Incomplete) -> hints.Hresult: ...
        PictureType = hints.normal_property(_get_PictureType, _set_PictureType)
        def Paste(self) -> hints.Hresult: ...
        def _get_PictureUnit(self) -> hints.Incomplete: ...
        def _set_PictureUnit(self, pvar: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit = hints.normal_property(_get_PictureUnit, _set_PictureUnit)
        def _get_Thickness(self) -> hints.Incomplete: ...
        def _set_Thickness(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Thickness = hints.normal_property(_get_Thickness, _set_Thickness)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


class IMsoFloor(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1716-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_PictureType(self) -> hints.Incomplete: ...
        def _set_PictureType(self, pvar: hints.Incomplete) -> hints.Hresult: ...
        PictureType = hints.normal_property(_get_PictureType, _set_PictureType)
        def Paste(self) -> hints.Hresult: ...
        def _get_Thickness(self) -> hints.Incomplete: ...
        def _set_Thickness(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Thickness = hints.normal_property(_get_Thickness, _set_Thickness)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


class IMsoDataTable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1711-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ShowLegendKey(self) -> hints.Incomplete: ...
        def _set_ShowLegendKey(self, pfVisible: hints.Incomplete) -> hints.Hresult: ...
        ShowLegendKey = hints.normal_property(_get_ShowLegendKey, _set_ShowLegendKey)
        def _get_HasBorderHorizontal(self) -> hints.Incomplete: ...
        def _set_HasBorderHorizontal(self, pfVisible: hints.Incomplete) -> hints.Hresult: ...
        HasBorderHorizontal = hints.normal_property(_get_HasBorderHorizontal, _set_HasBorderHorizontal)
        def _get_HasBorderVertical(self) -> hints.Incomplete: ...
        def _set_HasBorderVertical(self, pfVisible: hints.Incomplete) -> hints.Hresult: ...
        HasBorderVertical = hints.normal_property(_get_HasBorderVertical, _set_HasBorderVertical)
        def _get_HasBorderOutline(self) -> hints.Incomplete: ...
        def _set_HasBorderOutline(self, pfVisible: hints.Incomplete) -> hints.Hresult: ...
        HasBorderOutline = hints.normal_property(_get_HasBorderOutline, _set_HasBorderOutline)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def Select(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)




class IMsoChartData(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C172F-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Workbook(self) -> hints.Incomplete: ...
        Workbook = hints.normal_property(_get_Workbook)
        def Activate(self) -> hints.Hresult: ...
        def _get_IsLinked(self) -> hints.Incomplete: ...
        IsLinked = hints.normal_property(_get_IsLinked)
        def BreakLink(self) -> hints.Hresult: ...
        def ActivateChartDataWindow(self) -> hints.Hresult: ...


class Shapes(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C031E-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'Shape': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def AddCallout(self, Type: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddConnector(self, Type: hints.Incomplete, BeginX: hints.Incomplete, BeginY: hints.Incomplete, EndX: hints.Incomplete, EndY: hints.Incomplete) -> 'Shape': ...
        def AddCurve(self, SafeArrayOfPoints: hints.Incomplete) -> 'Shape': ...
        def AddLabel(self, Orientation: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddLine(self, BeginX: hints.Incomplete, BeginY: hints.Incomplete, EndX: hints.Incomplete, EndY: hints.Incomplete) -> 'Shape': ...
        def AddPicture(self, FileName: hints.Incomplete, LinkToFile: hints.Incomplete, SaveWithDocument: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddPolyline(self, SafeArrayOfPoints: hints.Incomplete) -> 'Shape': ...
        def AddShape(self, Type: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddTextEffect(self, PresetTextEffect: hints.Incomplete, Text: hints.Incomplete, FontName: hints.Incomplete, FontSize: hints.Incomplete, FontBold: hints.Incomplete, FontItalic: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete) -> 'Shape': ...
        def AddTextbox(self, Orientation: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def BuildFreeform(self, EditingType: hints.Incomplete, X1: hints.Incomplete, Y1: hints.Incomplete) -> 'FreeformBuilder': ...
        def Range(self, Index: hints.Incomplete) -> 'ShapeRange': ...
        def SelectAll(self) -> hints.Hresult: ...
        def _get_Background(self) -> 'Shape': ...
        Background = hints.normal_property(_get_Background)
        def _get_Default(self) -> 'Shape': ...
        Default = hints.normal_property(_get_Default)
        def AddDiagram(self, Type: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddCanvas(self, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddChart(self, Type: hints.Incomplete = ..., Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddTable(self, NumRows: hints.Incomplete, NumColumns: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> 'Shape': ...
        def AddSmartArt(self, Layout: hints.Incomplete, Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...
        def AddChart2(self, Style: hints.Incomplete = ..., Type: hints.Incomplete = ..., Left: hints.Incomplete = ..., Top: hints.Incomplete = ..., Width: hints.Incomplete = ..., Height: hints.Incomplete = ..., NewLayout: hints.Incomplete = ...) -> 'Shape': ...
        def AddPicture2(self, FileName: hints.Incomplete, LinkToFile: hints.Incomplete, SaveWithDocument: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete = ..., Height: hints.Incomplete = ..., Compress: hints.Incomplete = ...) -> 'Shape': ...
        def Add3DModel(self, FileName: hints.Incomplete, LinkToFile: hints.Incomplete, SaveWithDocument: hints.Incomplete, Left: hints.Incomplete, Top: hints.Incomplete, Width: hints.Incomplete = ..., Height: hints.Incomplete = ...) -> 'Shape': ...


class IMsoChartGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1727-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_AxisGroup(self) -> hints.Incomplete: ...
        def _set_AxisGroup(self, piGroup: hints.Incomplete) -> hints.Hresult: ...
        AxisGroup = hints.normal_property(_get_AxisGroup, _set_AxisGroup)
        def _get_DoughnutHoleSize(self) -> hints.Incomplete: ...
        def _set_DoughnutHoleSize(self, pDoughnutHoleSize: hints.Incomplete) -> hints.Hresult: ...
        DoughnutHoleSize = hints.normal_property(_get_DoughnutHoleSize, _set_DoughnutHoleSize)
        def _get_DownBars(self) -> 'IMsoDownBars': ...
        DownBars = hints.normal_property(_get_DownBars)
        def _get_DropLines(self) -> 'IMsoDropLines': ...
        DropLines = hints.normal_property(_get_DropLines)
        def _get_FirstSliceAngle(self) -> hints.Incomplete: ...
        def _set_FirstSliceAngle(self, pFirstSliceAngle: hints.Incomplete) -> hints.Hresult: ...
        FirstSliceAngle = hints.normal_property(_get_FirstSliceAngle, _set_FirstSliceAngle)
        def _get_GapWidth(self) -> hints.Incomplete: ...
        def _set_GapWidth(self, pGapWidth: hints.Incomplete) -> hints.Hresult: ...
        GapWidth = hints.normal_property(_get_GapWidth, _set_GapWidth)
        def _get_HasDropLines(self) -> hints.Incomplete: ...
        def _set_HasDropLines(self, pfHasDropLines: hints.Incomplete) -> hints.Hresult: ...
        HasDropLines = hints.normal_property(_get_HasDropLines, _set_HasDropLines)
        def _get_HasHiLoLines(self) -> hints.Incomplete: ...
        def _set_HasHiLoLines(self, pfHasHiLoLines: hints.Incomplete) -> hints.Hresult: ...
        HasHiLoLines = hints.normal_property(_get_HasHiLoLines, _set_HasHiLoLines)
        def _get_HasRadarAxisLabels(self) -> hints.Incomplete: ...
        def _set_HasRadarAxisLabels(self, pfHasRadarAxisLabels: hints.Incomplete) -> hints.Hresult: ...
        HasRadarAxisLabels = hints.normal_property(_get_HasRadarAxisLabels, _set_HasRadarAxisLabels)
        def _get_HasSeriesLines(self) -> hints.Incomplete: ...
        def _set_HasSeriesLines(self, pfHasSeriesLines: hints.Incomplete) -> hints.Hresult: ...
        HasSeriesLines = hints.normal_property(_get_HasSeriesLines, _set_HasSeriesLines)
        def _get_HasUpDownBars(self) -> hints.Incomplete: ...
        def _set_HasUpDownBars(self, pfHasUpDownBars: hints.Incomplete) -> hints.Hresult: ...
        HasUpDownBars = hints.normal_property(_get_HasUpDownBars, _set_HasUpDownBars)
        def _get_HiLoLines(self) -> 'IMsoHiLoLines': ...
        HiLoLines = hints.normal_property(_get_HiLoLines)
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_Overlap(self) -> hints.Incomplete: ...
        def _set_Overlap(self, pOverlap: hints.Incomplete) -> hints.Hresult: ...
        Overlap = hints.normal_property(_get_Overlap, _set_Overlap)
        def _get_RadarAxisLabels(self) -> hints.Incomplete: ...
        RadarAxisLabels = hints.normal_property(_get_RadarAxisLabels)
        def SeriesCollection(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_SeriesLines(self) -> 'IMsoSeriesLines': ...
        SeriesLines = hints.normal_property(_get_SeriesLines)
        def _get_SubType(self) -> hints.Incomplete: ...
        def _set_SubType(self, pSubType: hints.Incomplete) -> hints.Hresult: ...
        SubType = hints.normal_property(_get_SubType, _set_SubType)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, ptype: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_UpBars(self) -> 'IMsoUpBars': ...
        UpBars = hints.normal_property(_get_UpBars)
        def _get_VaryByCategories(self) -> hints.Incomplete: ...
        def _set_VaryByCategories(self, pfVaryByCategories: hints.Incomplete) -> hints.Hresult: ...
        VaryByCategories = hints.normal_property(_get_VaryByCategories, _set_VaryByCategories)
        def _get_SizeRepresents(self) -> hints.Incomplete: ...
        def _set_SizeRepresents(self, pXlSizeRepresents: hints.Incomplete) -> hints.Hresult: ...
        SizeRepresents = hints.normal_property(_get_SizeRepresents, _set_SizeRepresents)
        def _get_BubbleScale(self) -> hints.Incomplete: ...
        def _set_BubbleScale(self, pbubblescale: hints.Incomplete) -> hints.Hresult: ...
        BubbleScale = hints.normal_property(_get_BubbleScale, _set_BubbleScale)
        def _get_ShowNegativeBubbles(self) -> hints.Incomplete: ...
        def _set_ShowNegativeBubbles(self, pfShowNegativeBubbles: hints.Incomplete) -> hints.Hresult: ...
        ShowNegativeBubbles = hints.normal_property(_get_ShowNegativeBubbles, _set_ShowNegativeBubbles)
        def _get_SplitType(self) -> hints.Incomplete: ...
        def _set_SplitType(self, pChartSplitType: hints.Incomplete) -> hints.Hresult: ...
        SplitType = hints.normal_property(_get_SplitType, _set_SplitType)
        def _get_SplitValue(self) -> hints.Incomplete: ...
        def _set_SplitValue(self, pSplitValue: hints.Incomplete) -> hints.Hresult: ...
        SplitValue = hints.normal_property(_get_SplitValue, _set_SplitValue)
        def _get_SecondPlotSize(self) -> hints.Incomplete: ...
        def _set_SecondPlotSize(self, pSecondPlotSize: hints.Incomplete) -> hints.Hresult: ...
        SecondPlotSize = hints.normal_property(_get_SecondPlotSize, _set_SecondPlotSize)
        def _get_Has3DShading(self) -> hints.Incomplete: ...
        def _set_Has3DShading(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Has3DShading = hints.normal_property(_get_Has3DShading, _set_Has3DShading)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def CategoryCollection(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def FullCategoryCollection(self, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_BinsType(self) -> hints.Incomplete: ...
        def _set_BinsType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        BinsType = hints.normal_property(_get_BinsType, _set_BinsType)
        def _get_BinWidthValue(self) -> hints.Incomplete: ...
        def _set_BinWidthValue(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinWidthValue = hints.normal_property(_get_BinWidthValue, _set_BinWidthValue)
        def _get_BinsCountValue(self) -> hints.Incomplete: ...
        def _set_BinsCountValue(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinsCountValue = hints.normal_property(_get_BinsCountValue, _set_BinsCountValue)
        def _get_BinsOverflowEnabled(self) -> hints.Incomplete: ...
        def _set_BinsOverflowEnabled(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinsOverflowEnabled = hints.normal_property(_get_BinsOverflowEnabled, _set_BinsOverflowEnabled)
        def _get_BinsOverflowValue(self) -> hints.Incomplete: ...
        def _set_BinsOverflowValue(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinsOverflowValue = hints.normal_property(_get_BinsOverflowValue, _set_BinsOverflowValue)
        def _get_BinsUnderflowEnabled(self) -> hints.Incomplete: ...
        def _set_BinsUnderflowEnabled(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinsUnderflowEnabled = hints.normal_property(_get_BinsUnderflowEnabled, _set_BinsUnderflowEnabled)
        def _get_BinsUnderflowValue(self) -> hints.Incomplete: ...
        def _set_BinsUnderflowValue(self, pval: hints.Incomplete) -> hints.Hresult: ...
        BinsUnderflowValue = hints.normal_property(_get_BinsUnderflowValue, _set_BinsUnderflowValue)



IMsoChart._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propput'],
        HRESULT,
        'HasTitle',
        (['in'], VARIANT_BOOL, 'fTitle')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propget'],
        HRESULT,
        'HasTitle',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'fTitle')
    ),
    COMMETHOD(
        [dispid(1610743811), 'propget'],
        HRESULT,
        'ChartTitle',
        (['out', 'retval'], POINTER(POINTER(IMsoChartTitle)), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'DepthPercent',
        (['out', 'retval'], POINTER(c_int), 'pwDepthPercent')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'DepthPercent',
        (['in'], c_int, 'pwDepthPercent')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'Elevation',
        (['out', 'retval'], POINTER(c_int), 'pwElevation')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'Elevation',
        (['in'], c_int, 'pwElevation')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'GapDepth',
        (['out', 'retval'], POINTER(c_int), 'pwGapDepth')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propput'],
        HRESULT,
        'GapDepth',
        (['in'], c_int, 'pwGapDepth')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propget'],
        HRESULT,
        'HeightPercent',
        (['out', 'retval'], POINTER(c_int), 'pwHeightPercent')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propput'],
        HRESULT,
        'HeightPercent',
        (['in'], c_int, 'pwHeightPercent')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propget'],
        HRESULT,
        'Perspective',
        (['out', 'retval'], POINTER(c_int), 'pwPerspective')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propput'],
        HRESULT,
        'Perspective',
        (['in'], c_int, 'pwPerspective')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propget'],
        HRESULT,
        'RightAngleAxes',
        (['out', 'retval'], POINTER(VARIANT), 'pvarRightAngleAxes')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propput'],
        HRESULT,
        'RightAngleAxes',
        (['in'], VARIANT, 'pvarRightAngleAxes')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(VARIANT), 'pvarRotation')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], VARIANT, 'pvarRotation')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propput'],
        HRESULT,
        'DisplayBlanksAs',
        (['in'], XlDisplayBlanksAs, 'pres')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propget'],
        HRESULT,
        'DisplayBlanksAs',
        (['out', 'retval'], POINTER(XlDisplayBlanksAs), 'pres')
    ),
    COMMETHOD(
        [dispid(1610743828), 'restricted', 'propput'],
        HRESULT,
        'ProtectData',
        (['in'], VARIANT_BOOL, 'pres')
    ),
    COMMETHOD(
        [dispid(1610743828), 'restricted', 'propget'],
        HRESULT,
        'ProtectData',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pres')
    ),
    COMMETHOD(
        [dispid(1610743830), 'restricted', 'propput'],
        HRESULT,
        'ProtectFormatting',
        (['in'], VARIANT_BOOL, 'pres')
    ),
    COMMETHOD(
        [dispid(1610743830), 'restricted', 'propget'],
        HRESULT,
        'ProtectFormatting',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pres')
    ),
    COMMETHOD(
        [dispid(1610743832), 'restricted', 'propput'],
        HRESULT,
        'ProtectGoalSeek',
        (['in'], VARIANT_BOOL, 'pres')
    ),
    COMMETHOD(
        [dispid(1610743832), 'restricted', 'propget'],
        HRESULT,
        'ProtectGoalSeek',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pres')
    ),
    COMMETHOD(
        [dispid(1610743834), 'restricted', 'propput'],
        HRESULT,
        'ProtectSelection',
        (['in'], VARIANT_BOOL, 'pres')
    ),
    COMMETHOD(
        [dispid(1610743834), 'restricted', 'propget'],
        HRESULT,
        'ProtectSelection',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pres')
    ),
    COMMETHOD(
        [dispid(1610743836), 'restricted', 'propput'],
        HRESULT,
        'ProtectChartObjects',
        (['in'], VARIANT_BOOL, 'pres')
    ),
    COMMETHOD(
        [dispid(1610743836), 'restricted', 'propget'],
        HRESULT,
        'ProtectChartObjects',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pres')
    ),
    COMMETHOD(
        [dispid(1610743838), 'restricted'],
        HRESULT,
        'UnProtect',
        (['in', 'optional'], VARIANT, 'Password')
    ),
    COMMETHOD(
        [dispid(1610743839), 'restricted'],
        HRESULT,
        'Protect',
        (['in', 'optional'], VARIANT, 'Password'),
        (['in', 'optional'], VARIANT, 'DrawingObjects'),
        (['in', 'optional'], VARIANT, 'Contents'),
        (['in', 'optional'], VARIANT, 'Scenarios'),
        (['in', 'optional'], VARIANT, 'UserInterfaceOnly')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'ChartGroups',
        (['in', 'optional'], POINTER(VARIANT), 'pvarIndex'),
        (['in', 'optional'], VARIANT, 'varIgallery'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(68)],
        HRESULT,
        'SeriesCollection',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(151), 'hidden', 'nonbrowsable'],
        HRESULT,
        '_ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'IMsoLegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines')
    ),
    COMMETHOD(
        [dispid(109), 'hidden', 'propget'],
        HRESULT,
        'SubType',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(109), 'hidden', 'propput'],
        HRESULT,
        'SubType',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'hidden', 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(108), 'hidden', 'propput'],
        HRESULT,
        'Type',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(79), 'hidden', 'propget'],
        HRESULT,
        'Corners',
        (['out', 'retval'], POINTER(POINTER(IMsoCorners)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1922)],
        HRESULT,
        'ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'IMsoLegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['in', 'optional'], VARIANT, 'ShowSeriesName'),
        (['in', 'optional'], VARIANT, 'ShowCategoryName'),
        (['in', 'optional'], VARIANT, 'ShowValue'),
        (['in', 'optional'], VARIANT, 'ShowPercentage'),
        (['in', 'optional'], VARIANT, 'ShowBubbleSize'),
        (['in', 'optional'], VARIANT, 'Separator')
    ),
    COMMETHOD(
        [dispid(1400), 'propget'],
        HRESULT,
        'ChartType',
        (['out', 'retval'], POINTER(XlChartType), 'RHS')
    ),
    COMMETHOD(
        [dispid(1400), 'propput'],
        HRESULT,
        'ChartType',
        (['in'], XlChartType, 'RHS')
    ),
    COMMETHOD(
        [dispid(1396), 'propget'],
        HRESULT,
        'HasDataTable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1396), 'propput'],
        HRESULT,
        'HasDataTable',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1401)],
        HRESULT,
        'ApplyCustomType',
        (['in'], XlChartType, 'ChartType'),
        (['in', 'optional'], VARIANT, 'TypeName')
    ),
    COMMETHOD(
        [dispid(1409)],
        HRESULT,
        'GetChartElement',
        (['in'], c_int, 'x'),
        (['in'], c_int, 'y'),
        (['in', 'out'], POINTER(c_int), 'ElementID'),
        (['in', 'out'], POINTER(c_int), 'Arg1'),
        (['in', 'out'], POINTER(c_int), 'Arg2')
    ),
    COMMETHOD(
        [dispid(1413)],
        HRESULT,
        'SetSourceData',
        (['in'], BSTR, 'Source'),
        (['in', 'optional'], VARIANT, 'PlotBy')
    ),
    COMMETHOD(
        [dispid(202), 'propget'],
        HRESULT,
        'PlotBy',
        (['out', 'retval'], POINTER(XlRowCol), 'PlotBy')
    ),
    COMMETHOD(
        [dispid(202), 'propput'],
        HRESULT,
        'PlotBy',
        (['in'], XlRowCol, 'PlotBy')
    ),
    COMMETHOD(
        [dispid(53), 'propget'],
        HRESULT,
        'HasLegend',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(53), 'propput'],
        HRESULT,
        'HasLegend',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(84), 'propget'],
        HRESULT,
        'Legend',
        (['out', 'retval'], POINTER(POINTER(IMsoLegend)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743861)],
        HRESULT,
        'Axes',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], XlAxisGroup, 'AxisGroup', 1),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppAxes')
    ),
    COMMETHOD(
        [dispid(1610743862), 'propput'],
        HRESULT,
        'HasAxis',
        (['in', 'optional'], VARIANT, 'axisType'),
        (['in', 'optional'], VARIANT, 'AxisGroup'),
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743862), 'propget'],
        HRESULT,
        'HasAxis',
        (['in', 'optional'], VARIANT, 'axisType'),
        (['in', 'optional'], VARIANT, 'AxisGroup'),
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743864), 'propget'],
        HRESULT,
        'Walls',
        (['in', 'optional'], VARIANT_BOOL, 'fBackWall', True),
        (['out', 'retval'], POINTER(POINTER(IMsoWalls)), 'ppwalls')
    ),
    COMMETHOD(
        [dispid(1610743865), 'propget'],
        HRESULT,
        'Floor',
        (['out', 'retval'], POINTER(POINTER(IMsoFloor)), 'ppfloor')
    ),
    COMMETHOD(
        [dispid(1610743866), 'propget'],
        HRESULT,
        'PlotArea',
        (['out', 'retval'], POINTER(POINTER(IMsoPlotArea)), 'ppplotarea')
    ),
    COMMETHOD(
        [dispid(92), 'propget'],
        HRESULT,
        'PlotVisibleOnly',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(92), 'propput'],
        HRESULT,
        'PlotVisibleOnly',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743869), 'propget'],
        HRESULT,
        'ChartArea',
        (['out', 'retval'], POINTER(POINTER(IMsoChartArea)), 'ppchartarea')
    ),
    COMMETHOD(
        [dispid(1610743870)],
        HRESULT,
        'AutoFormat',
        (['in'], c_int, 'rGallery'),
        (['in', 'optional'], VARIANT, 'varFormat')
    ),
    COMMETHOD(
        [dispid(1610743871), 'propget'],
        HRESULT,
        'AutoScaling',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'f')
    ),
    COMMETHOD(
        [dispid(1610743871), 'propput'],
        HRESULT,
        'AutoScaling',
        (['in'], VARIANT_BOOL, 'f')
    ),
    COMMETHOD(
        [dispid(1610743873), 'restricted'],
        HRESULT,
        'SetBackgroundPicture',
        (['in'], BSTR, 'bstr')
    ),
    COMMETHOD(
        [dispid(1610743874)],
        HRESULT,
        'ChartWizard',
        (['in', 'optional'], VARIANT, 'varSource'),
        (['in', 'optional'], VARIANT, 'varGallery'),
        (['in', 'optional'], VARIANT, 'varFormat'),
        (['in', 'optional'], VARIANT, 'varPlotBy'),
        (['in', 'optional'], VARIANT, 'varCategoryLabels'),
        (['in', 'optional'], VARIANT, 'varSeriesLabels'),
        (['in', 'optional'], VARIANT, 'varHasLegend'),
        (['in', 'optional'], VARIANT, 'varTitle'),
        (['in', 'optional'], VARIANT, 'varCategoryTitle'),
        (['in', 'optional'], VARIANT, 'varValueTitle'),
        (['in', 'optional'], VARIANT, 'varExtraTitle'),
        (['in', 'lcid'], c_int, 'LocaleID', _lcid)
    ),
    COMMETHOD(
        [dispid(1610743875)],
        HRESULT,
        'CopyPicture',
        (['in', 'optional'], c_int, 'Appearance', 1),
        (['in', 'optional'], c_int, 'Format', -4147),
        (['in', 'optional'], c_int, 'Size', 2),
        (['in', 'lcid'], c_int, 'LocaleID', _lcid)
    ),
    COMMETHOD(
        [dispid(1610743876), 'propget'],
        HRESULT,
        'DataTable',
        (['out', 'retval'], POINTER(POINTER(IMsoDataTable)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743877), 'restricted'],
        HRESULT,
        'Evaluate',
        (['in'], VARIANT, 'varName'),
        (['in'], c_int, 'LocaleID'),
        (['out'], POINTER(c_int), 'ObjType'),
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610743878), 'restricted', 'nonbrowsable'],
        HRESULT,
        '_Evaluate',
        (['in'], VARIANT, 'varName'),
        (['in'], c_int, 'LocaleID'),
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610743879), 'restricted'],
        HRESULT,
        'Paste',
        (['in', 'optional'], VARIANT, 'varType'),
        (['in', 'lcid'], c_int, 'LocaleID', _lcid)
    ),
    COMMETHOD(
        [dispid(1610743880), 'propget'],
        HRESULT,
        'BarShape',
        (['out', 'retval'], POINTER(XlBarShape), 'pShape')
    ),
    COMMETHOD(
        [dispid(1610743880), 'propput'],
        HRESULT,
        'BarShape',
        (['in'], XlBarShape, 'pShape')
    ),
    COMMETHOD(
        [dispid(1610743882)],
        HRESULT,
        'Export',
        (['in'], BSTR, 'bstr'),
        (['in', 'optional'], VARIANT, 'varFilterName'),
        (['in', 'optional'], VARIANT, 'varInteractive'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'f')
    ),
    COMMETHOD(
        [dispid(1610743883)],
        HRESULT,
        'SetDefaultChart',
        (['in'], VARIANT, 'varName')
    ),
    COMMETHOD(
        [dispid(1610743884)],
        HRESULT,
        'ApplyChartTemplate',
        (['in'], BSTR, 'bstrFileName')
    ),
    COMMETHOD(
        [dispid(1610743885)],
        HRESULT,
        'SaveChartTemplate',
        (['in'], BSTR, 'bstrFileName')
    ),
    COMMETHOD(
        [dispid(2377), 'propget'],
        HRESULT,
        'SideWall',
        (['out', 'retval'], POINTER(POINTER(IMsoWalls)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2378), 'propget'],
        HRESULT,
        'BackWall',
        (['out', 'retval'], POINTER(POINTER(IMsoWalls)), 'RHS')
    ),
    COMMETHOD(
        [dispid(2465), 'propget'],
        HRESULT,
        'ChartStyle',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2465), 'propput'],
        HRESULT,
        'ChartStyle',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD([dispid(2466)], HRESULT, 'ClearToMatchStyle'),
    COMMETHOD(
        [dispid(1814), 'propget'],
        HRESULT,
        'PivotLayout',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1815), 'hidden', 'propget'],
        HRESULT,
        'HasPivotFields',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1815), 'hidden', 'propput'],
        HRESULT,
        'HasPivotFields',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD([dispid(1610743894)], HRESULT, 'RefreshPivotTable'),
    COMMETHOD(
        [dispid(1610743895), 'propput'],
        HRESULT,
        'ShowDataLabelsOverMaximum',
        (['in'], VARIANT_BOOL, 'pRHS')
    ),
    COMMETHOD(
        [dispid(1610743895), 'propget'],
        HRESULT,
        'ShowDataLabelsOverMaximum',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pRHS')
    ),
    COMMETHOD(
        [dispid(2468)],
        HRESULT,
        'ApplyLayout',
        (['in'], c_int, 'Layout'),
        (['in', 'optional'], VARIANT, 'varChartType')
    ),
    COMMETHOD(
        [dispid(1610743898), 'restricted', 'propget'],
        HRESULT,
        'Selection',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD([dispid(1610743899)], HRESULT, 'Refresh'),
    COMMETHOD(
        [dispid(1610743900)],
        HRESULT,
        'SetElement',
        (['in'], MsoChartElementType, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743901), 'propget'],
        HRESULT,
        'ChartData',
        (['out', 'retval'], POINTER(POINTER(IMsoChartData)), 'ppchartdata')
    ),
    COMMETHOD(
        [dispid(1610743902), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(1610743903), 'propget'],
        HRESULT,
        'Shapes',
        (['out', 'retval'], POINTER(POINTER(Shapes)), 'ppShapes')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(17), 'hidden', 'propget'],
        HRESULT,
        'Area3DGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IMsoChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(9), 'hidden'],
        HRESULT,
        'AreaGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(18), 'hidden', 'propget'],
        HRESULT,
        'Bar3DGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IMsoChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(10), 'hidden'],
        HRESULT,
        'BarGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(19), 'hidden', 'propget'],
        HRESULT,
        'Column3DGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IMsoChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(11), 'hidden'],
        HRESULT,
        'ColumnGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(20), 'hidden', 'propget'],
        HRESULT,
        'Line3DGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IMsoChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(12), 'hidden'],
        HRESULT,
        'LineGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(21), 'hidden', 'propget'],
        HRESULT,
        'Pie3DGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IMsoChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(13), 'hidden'],
        HRESULT,
        'PieGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(14), 'hidden'],
        HRESULT,
        'DoughnutGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(15), 'hidden'],
        HRESULT,
        'RadarGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(22), 'hidden', 'propget'],
        HRESULT,
        'SurfaceGroup',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IMsoChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(16), 'hidden'],
        HRESULT,
        'XYGroups',
        (['in', 'optional'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(551)],
        HRESULT,
        'Copy',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['in', 'optional'], VARIANT, 'Replace'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743923), 'propget'],
        HRESULT,
        'ShowReportFilterFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(1610743923), 'propput'],
        HRESULT,
        'ShowReportFilterFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(1610743925), 'propget'],
        HRESULT,
        'ShowLegendFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(1610743925), 'propput'],
        HRESULT,
        'ShowLegendFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(1610743927), 'propget'],
        HRESULT,
        'ShowAxisFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(1610743927), 'propput'],
        HRESULT,
        'ShowAxisFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(1610743929), 'propget'],
        HRESULT,
        'ShowValueFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(1610743929), 'propput'],
        HRESULT,
        'ShowValueFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(1610743931), 'propget'],
        HRESULT,
        'ShowAllFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(1610743931), 'propput'],
        HRESULT,
        'ShowAllFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(1610743933), 'restricted', 'propput'],
        HRESULT,
        'ProtectChartSheetFormatting',
        (['in'], VARIANT_BOOL, 'rhs')
    ),
    COMMETHOD(
        [dispid(236)],
        HRESULT,
        'FullSeriesCollection',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(237), 'propput'],
        HRESULT,
        'CategoryLabelLevel',
        (['in'], XlCategoryLabelLevel, 'plevel')
    ),
    COMMETHOD(
        [dispid(237), 'propget'],
        HRESULT,
        'CategoryLabelLevel',
        (['out', 'retval'], POINTER(XlCategoryLabelLevel), 'plevel')
    ),
    COMMETHOD(
        [dispid(238), 'propput'],
        HRESULT,
        'SeriesNameLevel',
        (['in'], XlSeriesNameLevel, 'plevel')
    ),
    COMMETHOD(
        [dispid(238), 'propget'],
        HRESULT,
        'SeriesNameLevel',
        (['out', 'retval'], POINTER(XlSeriesNameLevel), 'plevel')
    ),
    COMMETHOD(
        [dispid(239), 'hidden', 'propget'],
        HRESULT,
        'HasHiddenContent',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD([dispid(240), 'hidden'], HRESULT, 'DeleteHiddenContent'),
    COMMETHOD(
        [dispid(2467), 'propget'],
        HRESULT,
        'ChartColor',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(2467), 'propput'],
        HRESULT,
        'ChartColor',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD([dispid(2469)], HRESULT, 'ClearToMatchColorStyle'),
    COMMETHOD(
        [dispid(1610743944), 'propget'],
        HRESULT,
        'ShowExpandCollapseEntireFieldButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(1610743944), 'propput'],
        HRESULT,
        'ShowExpandCollapseEntireFieldButtons',
        (['in'], VARIANT_BOOL, 'res')
    ),
    COMMETHOD(
        [dispid(253)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(254)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
    COMMETHOD(
        [dispid(1610743948), 'propget'],
        HRESULT,
        'DisplayValueNotAvailableAsBlank',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'res')
    ),
    COMMETHOD(
        [dispid(1610743948), 'propput'],
        HRESULT,
        'DisplayValueNotAvailableAsBlank',
        (['in'], VARIANT_BOOL, 'res')
    ),
]

################################################################
# code template for IMsoChart implementation
# class IMsoChart_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return fTitle
#     def _set(self, fTitle):
#         '-no docstring-'
#     HasTitle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ChartTitle(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pwDepthPercent
#     def _set(self, pwDepthPercent):
#         '-no docstring-'
#     DepthPercent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pwElevation
#     def _set(self, pwElevation):
#         '-no docstring-'
#     Elevation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pwGapDepth
#     def _set(self, pwGapDepth):
#         '-no docstring-'
#     GapDepth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pwHeightPercent
#     def _set(self, pwHeightPercent):
#         '-no docstring-'
#     HeightPercent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pwPerspective
#     def _set(self, pwPerspective):
#         '-no docstring-'
#     Perspective = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarRightAngleAxes
#     def _set(self, pvarRightAngleAxes):
#         '-no docstring-'
#     RightAngleAxes = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarRotation
#     def _set(self, pvarRotation):
#         '-no docstring-'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pres
#     def _set(self, pres):
#         '-no docstring-'
#     DisplayBlanksAs = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pres
#     def _set(self, pres):
#         '-no docstring-'
#     ProtectData = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pres
#     def _set(self, pres):
#         '-no docstring-'
#     ProtectFormatting = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pres
#     def _set(self, pres):
#         '-no docstring-'
#     ProtectGoalSeek = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pres
#     def _set(self, pres):
#         '-no docstring-'
#     ProtectSelection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pres
#     def _set(self, pres):
#         '-no docstring-'
#     ProtectChartObjects = property(_get, _set, doc = _set.__doc__)
#
#     def UnProtect(self, Password):
#         '-no docstring-'
#         #return 
#
#     def Protect(self, Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ChartGroups(self, pvarIndex, varIgallery, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def SeriesCollection(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _ApplyDataLabels(self, Type, IMsoLegendKey, AutoText, HasLeaderLines):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SubType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Corners(self):
#         '-no docstring-'
#         #return RHS
#
#     def ApplyDataLabels(self, Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ChartType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasDataTable = property(_get, _set, doc = _set.__doc__)
#
#     def ApplyCustomType(self, ChartType, TypeName):
#         '-no docstring-'
#         #return 
#
#     def GetChartElement(self, x, y):
#         '-no docstring-'
#         #return ElementID, Arg1, Arg2
#
#     def SetSourceData(self, Source, PlotBy):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return PlotBy
#     def _set(self, PlotBy):
#         '-no docstring-'
#     PlotBy = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasLegend = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Legend(self):
#         '-no docstring-'
#         #return RHS
#
#     def Axes(self, Type, AxisGroup):
#         '-no docstring-'
#         #return ppAxes
#
#     def _get(self, axisType, AxisGroup):
#         '-no docstring-'
#         #return pval
#     def _set(self, axisType, AxisGroup, pval):
#         '-no docstring-'
#     HasAxis = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Walls(self, fBackWall):
#         '-no docstring-'
#         #return ppwalls
#
#     @property
#     def Floor(self):
#         '-no docstring-'
#         #return ppfloor
#
#     @property
#     def PlotArea(self):
#         '-no docstring-'
#         #return ppplotarea
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PlotVisibleOnly = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ChartArea(self):
#         '-no docstring-'
#         #return ppchartarea
#
#     def AutoFormat(self, rGallery, varFormat):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return f
#     def _set(self, f):
#         '-no docstring-'
#     AutoScaling = property(_get, _set, doc = _set.__doc__)
#
#     def SetBackgroundPicture(self, bstr):
#         '-no docstring-'
#         #return 
#
#     def ChartWizard(self, varSource, varGallery, varFormat, varPlotBy, varCategoryLabels, varSeriesLabels, varHasLegend, varTitle, varCategoryTitle, varValueTitle, varExtraTitle, LocaleID):
#         '-no docstring-'
#         #return 
#
#     def CopyPicture(self, Appearance, Format, Size, LocaleID):
#         '-no docstring-'
#         #return 
#
#     @property
#     def DataTable(self):
#         '-no docstring-'
#         #return RHS
#
#     def Evaluate(self, varName, LocaleID):
#         '-no docstring-'
#         #return ObjType, pvar
#
#     def _Evaluate(self, varName, LocaleID):
#         '-no docstring-'
#         #return pvar
#
#     def Paste(self, varType, LocaleID):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pShape
#     def _set(self, pShape):
#         '-no docstring-'
#     BarShape = property(_get, _set, doc = _set.__doc__)
#
#     def Export(self, bstr, varFilterName, varInteractive):
#         '-no docstring-'
#         #return f
#
#     def SetDefaultChart(self, varName):
#         '-no docstring-'
#         #return 
#
#     def ApplyChartTemplate(self, bstrFileName):
#         '-no docstring-'
#         #return 
#
#     def SaveChartTemplate(self, bstrFileName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def SideWall(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def BackWall(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ChartStyle = property(_get, _set, doc = _set.__doc__)
#
#     def ClearToMatchStyle(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def PivotLayout(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasPivotFields = property(_get, _set, doc = _set.__doc__)
#
#     def RefreshPivotTable(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pRHS
#     def _set(self, pRHS):
#         '-no docstring-'
#     ShowDataLabelsOverMaximum = property(_get, _set, doc = _set.__doc__)
#
#     def ApplyLayout(self, Layout, varChartType):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Selection(self):
#         '-no docstring-'
#         #return RHS
#
#     def Refresh(self):
#         '-no docstring-'
#         #return 
#
#     def SetElement(self, RHS):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ChartData(self):
#         '-no docstring-'
#         #return ppchartdata
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Shapes(self):
#         '-no docstring-'
#         #return ppShapes
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Area3DGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def AreaGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Bar3DGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def BarGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Column3DGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def ColumnGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Line3DGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def LineGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Pie3DGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def PieGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def DoughnutGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def RadarGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def SurfaceGroup(self, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def XYGroups(self, Index, lcid):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def Copy(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self, Replace):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowReportFilterFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowLegendFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowAxisFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowValueFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowAllFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         '-no docstring-'
#     ProtectChartSheetFormatting = property(fset = _set, doc = _set.__doc__)
#
#     def FullSeriesCollection(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return plevel
#     def _set(self, plevel):
#         '-no docstring-'
#     CategoryLabelLevel = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return plevel
#     def _set(self, plevel):
#         '-no docstring-'
#     SeriesNameLevel = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HasHiddenContent(self):
#         '-no docstring-'
#         #return res
#
#     def DeleteHiddenContent(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ChartColor = property(_get, _set, doc = _set.__doc__)
#
#     def ClearToMatchColorStyle(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     ShowExpandCollapseEntireFieldButtons = property(_get, _set, doc = _set.__doc__)
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#
#     def _get(self):
#         '-no docstring-'
#         #return res
#     def _set(self, res):
#         '-no docstring-'
#     DisplayValueNotAvailableAsBlank = property(_get, _set, doc = _set.__doc__)
#


class _SensitivityLabelEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{20C139DB-3671-481C-B905-8A6173317D72}')
    _idlflags_ = ['hidden']
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        def LabelChanged(self, OldLabelInfo: hints.Incomplete, NewLabelInfo: hints.Incomplete, HResult: hints.Incomplete, Context: hints.Incomplete) -> hints.Incomplete: ...


_SensitivityLabelEvents._disp_methods_ = [
    DISPMETHOD(
        [dispid(1)],
        None,
        'LabelChanged',
        (['in'], POINTER(LabelInfo), 'OldLabelInfo'),
        (['in'], POINTER(LabelInfo), 'NewLabelInfo'),
        (['in'], c_int, 'HResult'),
        (['in'], POINTER(IDispatch), 'Context')
    ),
]


class WebPageFont(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0913-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ProportionalFont(self) -> hints.Incomplete: ...
        def _set_ProportionalFont(self, pstr: hints.Incomplete) -> hints.Hresult: ...
        ProportionalFont = hints.normal_property(_get_ProportionalFont, _set_ProportionalFont)
        def _get_ProportionalFontSize(self) -> hints.Incomplete: ...
        def _set_ProportionalFontSize(self, pf: hints.Incomplete) -> hints.Hresult: ...
        ProportionalFontSize = hints.normal_property(_get_ProportionalFontSize, _set_ProportionalFontSize)
        def _get_FixedWidthFont(self) -> hints.Incomplete: ...
        def _set_FixedWidthFont(self, pstr: hints.Incomplete) -> hints.Hresult: ...
        FixedWidthFont = hints.normal_property(_get_FixedWidthFont, _set_FixedWidthFont)
        def _get_FixedWidthFontSize(self) -> hints.Incomplete: ...
        def _set_FixedWidthFontSize(self, pf: hints.Incomplete) -> hints.Hresult: ...
        FixedWidthFontSize = hints.normal_property(_get_FixedWidthFontSize, _set_FixedWidthFontSize)


WebPageFont._methods_ = [
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'ProportionalFont',
        (['out', 'retval'], POINTER(BSTR), 'pstr')
    ),
    COMMETHOD(
        [dispid(10), 'propput'],
        HRESULT,
        'ProportionalFont',
        (['in'], BSTR, 'pstr')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'ProportionalFontSize',
        (['out', 'retval'], POINTER(c_float), 'pf')
    ),
    COMMETHOD(
        [dispid(11), 'propput'],
        HRESULT,
        'ProportionalFontSize',
        (['in'], c_float, 'pf')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'FixedWidthFont',
        (['out', 'retval'], POINTER(BSTR), 'pstr')
    ),
    COMMETHOD(
        [dispid(12), 'propput'],
        HRESULT,
        'FixedWidthFont',
        (['in'], BSTR, 'pstr')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'FixedWidthFontSize',
        (['out', 'retval'], POINTER(c_float), 'pf')
    ),
    COMMETHOD(
        [dispid(13), 'propput'],
        HRESULT,
        'FixedWidthFontSize',
        (['in'], c_float, 'pf')
    ),
]

################################################################
# code template for WebPageFont implementation
# class WebPageFont_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pstr
#     def _set(self, pstr):
#         '-no docstring-'
#     ProportionalFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pf
#     def _set(self, pf):
#         '-no docstring-'
#     ProportionalFontSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pstr
#     def _set(self, pstr):
#         '-no docstring-'
#     FixedWidthFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pf
#     def _set(self, pf):
#         '-no docstring-'
#     FixedWidthFontSize = property(_get, _set, doc = _set.__doc__)
#


class IBlogExtensibility(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03C4-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def BlogProviderProperties(self) -> hints.Tuple[hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete]: ...
        def SetupBlogAccount(self, Account: hints.Incomplete, ParentWindow: hints.Incomplete, Document: hints.Incomplete, NewAccount: hints.Incomplete) -> hints.Incomplete: ...
        def GetUserBlogs(self, Account: hints.Incomplete, ParentWindow: hints.Incomplete, Document: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete, hints.Incomplete]: ...
        def GetRecentPosts(self, Account: hints.Incomplete, ParentWindow: hints.Incomplete, Document: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete, hints.Incomplete]: ...
        def Open(self, Account: hints.Incomplete, PostID: hints.Incomplete, ParentWindow: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete]: ...
        def PublishPost(self, Account: hints.Incomplete, ParentWindow: hints.Incomplete, Document: hints.Incomplete, xHTML: hints.Incomplete, Title: hints.Incomplete, DateTime: hints.Incomplete, Categories: hints.Incomplete, Draft: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        def RepublishPost(self, Account: hints.Incomplete, ParentWindow: hints.Incomplete, Document: hints.Incomplete, PostID: hints.Incomplete, xHTML: hints.Incomplete, Title: hints.Incomplete, DateTime: hints.Incomplete, Categories: hints.Incomplete, Draft: hints.Incomplete) -> hints.Incomplete: ...
        def GetCategories(self, Account: hints.Incomplete, ParentWindow: hints.Incomplete, Document: hints.Incomplete) -> hints.Incomplete: ...


IBlogExtensibility._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'BlogProviderProperties',
        (['out'], POINTER(BSTR), 'BlogProvider'),
        (['out'], POINTER(BSTR), 'FriendlyName'),
        (['out'], POINTER(MsoBlogCategorySupport), 'CategorySupport'),
        (['out'], POINTER(VARIANT_BOOL), 'Padding')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'SetupBlogAccount',
        (['in'], BSTR, 'Account'),
        (['in'], c_int, 'ParentWindow'),
        (['in'], POINTER(IDispatch), 'Document'),
        (['in'], VARIANT_BOOL, 'NewAccount'),
        (['out'], POINTER(VARIANT_BOOL), 'ShowPictureUI')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetUserBlogs',
        (['in'], BSTR, 'Account'),
        (['in'], c_int, 'ParentWindow'),
        (['in'], POINTER(IDispatch), 'Document'),
        (['out'], POINTER(_midlSAFEARRAY(BSTR)), 'BlogNames'),
        (['out'], POINTER(_midlSAFEARRAY(BSTR)), 'BlogIDs'),
        (['out'], POINTER(_midlSAFEARRAY(BSTR)), 'BlogURLs')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetRecentPosts',
        (['in'], BSTR, 'Account'),
        (['in'], c_int, 'ParentWindow'),
        (['in'], POINTER(IDispatch), 'Document'),
        (['out'], POINTER(_midlSAFEARRAY(BSTR)), 'PostTitles'),
        (['out'], POINTER(_midlSAFEARRAY(BSTR)), 'PostDates'),
        (['out'], POINTER(_midlSAFEARRAY(BSTR)), 'PostIDs')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Open',
        (['in'], BSTR, 'Account'),
        (['in'], BSTR, 'PostID'),
        (['in'], c_int, 'ParentWindow'),
        (['out'], POINTER(BSTR), 'xHTML'),
        (['out'], POINTER(BSTR), 'Title'),
        (['out'], POINTER(BSTR), 'DatePosted'),
        (['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Categories')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'PublishPost',
        (['in'], BSTR, 'Account'),
        (['in'], c_int, 'ParentWindow'),
        (['in'], POINTER(IDispatch), 'Document'),
        (['in'], BSTR, 'xHTML'),
        (['in'], BSTR, 'Title'),
        (['in'], BSTR, 'DateTime'),
        (['in'], _midlSAFEARRAY(BSTR), 'Categories'),
        (['in'], VARIANT_BOOL, 'Draft'),
        (['out'], POINTER(BSTR), 'PostID'),
        (['out'], POINTER(BSTR), 'PublishMessage')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'RepublishPost',
        (['in'], BSTR, 'Account'),
        (['in'], c_int, 'ParentWindow'),
        (['in'], POINTER(IDispatch), 'Document'),
        (['in'], BSTR, 'PostID'),
        (['in'], BSTR, 'xHTML'),
        (['in'], BSTR, 'Title'),
        (['in'], BSTR, 'DateTime'),
        (['in'], _midlSAFEARRAY(BSTR), 'Categories'),
        (['in'], VARIANT_BOOL, 'Draft'),
        (['out'], POINTER(BSTR), 'PublishMessage')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetCategories',
        (['in'], BSTR, 'Account'),
        (['in'], c_int, 'ParentWindow'),
        (['in'], POINTER(IDispatch), 'Document'),
        (['out'], POINTER(_midlSAFEARRAY(BSTR)), 'Categories')
    ),
]

################################################################
# code template for IBlogExtensibility implementation
# class IBlogExtensibility_Impl(object):
#     def BlogProviderProperties(self):
#         '-no docstring-'
#         #return BlogProvider, FriendlyName, CategorySupport, Padding
#
#     def SetupBlogAccount(self, Account, ParentWindow, Document, NewAccount):
#         '-no docstring-'
#         #return ShowPictureUI
#
#     def GetUserBlogs(self, Account, ParentWindow, Document):
#         '-no docstring-'
#         #return BlogNames, BlogIDs, BlogURLs
#
#     def GetRecentPosts(self, Account, ParentWindow, Document):
#         '-no docstring-'
#         #return PostTitles, PostDates, PostIDs
#
#     def Open(self, Account, PostID, ParentWindow):
#         '-no docstring-'
#         #return xHTML, Title, DatePosted, Categories
#
#     def PublishPost(self, Account, ParentWindow, Document, xHTML, Title, DateTime, Categories, Draft):
#         '-no docstring-'
#         #return PostID, PublishMessage
#
#     def RepublishPost(self, Account, ParentWindow, Document, PostID, xHTML, Title, DateTime, Categories, Draft):
#         '-no docstring-'
#         #return PublishMessage
#
#     def GetCategories(self, Account, ParentWindow, Document):
#         '-no docstring-'
#         #return Categories
#


class ScopeFolder(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0368-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Path(self) -> hints.Incomplete: ...
        Path = hints.normal_property(_get_Path)
        def _get_ScopeFolders(self) -> 'ScopeFolders': ...
        ScopeFolders = hints.normal_property(_get_ScopeFolders)
        def AddToSearchFolders(self) -> hints.Hresult: ...


SearchScope._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoSearchIn), 'MsoSearchInRetVal')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'ScopeFolder',
        (['out', 'retval'], POINTER(POINTER(ScopeFolder)), 'ScopeFolderRet')
    ),
]

################################################################
# code template for SearchScope implementation
# class SearchScope_Impl(object):
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return MsoSearchInRetVal
#
#     @property
#     def ScopeFolder(self):
#         '-no docstring-'
#         #return ScopeFolderRet
#


class SearchFolders(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C036A-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'ScopeFolder': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, ScopeFolder: hints.Incomplete) -> hints.Hresult: ...
        def Remove(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


SearchFolders._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ScopeFolder)), 'ScopeFolderRet')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'iCountRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Add',
        (['in'], POINTER(ScopeFolder), 'ScopeFolder')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Remove',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for SearchFolders implementation
# class SearchFolders_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ScopeFolderRet
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return iCountRetVal
#
#     def Add(self, ScopeFolder):
#         '-no docstring-'
#         #return 
#
#     def Remove(self, Index):
#         '-no docstring-'
#         #return 
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#

PropertyTest._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrRetVal')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Condition',
        (['out', 'retval'], POINTER(MsoCondition), 'pConditionRetVal')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(VARIANT), 'pvargRetVal')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'SecondValue',
        (['out', 'retval'], POINTER(VARIANT), 'pvargRetVal2')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Connector',
        (['out', 'retval'], POINTER(MsoConnector), 'pConnector')
    ),
]

################################################################
# code template for PropertyTest implementation
# class PropertyTest_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrRetVal
#
#     @property
#     def Condition(self):
#         '-no docstring-'
#         #return pConditionRetVal
#
#     @property
#     def Value(self):
#         '-no docstring-'
#         #return pvargRetVal
#
#     @property
#     def SecondValue(self):
#         '-no docstring-'
#         #return pvargRetVal2
#
#     @property
#     def Connector(self):
#         '-no docstring-'
#         #return pConnector
#


class FileSearch(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0332-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_SearchSubFolders(self) -> hints.Incomplete: ...
        def _set_SearchSubFolders(self, SearchSubFoldersRetVal: hints.Incomplete) -> hints.Hresult: ...
        SearchSubFolders = hints.normal_property(_get_SearchSubFolders, _set_SearchSubFolders)
        def _get_MatchTextExactly(self) -> hints.Incomplete: ...
        def _set_MatchTextExactly(self, MatchTextRetVal: hints.Incomplete) -> hints.Hresult: ...
        MatchTextExactly = hints.normal_property(_get_MatchTextExactly, _set_MatchTextExactly)
        def _get_MatchAllWordForms(self) -> hints.Incomplete: ...
        def _set_MatchAllWordForms(self, MatchAllWordFormsRetVal: hints.Incomplete) -> hints.Hresult: ...
        MatchAllWordForms = hints.normal_property(_get_MatchAllWordForms, _set_MatchAllWordForms)
        def _get_FileName(self) -> hints.Incomplete: ...
        def _set_FileName(self, FileNameRetVal: hints.Incomplete) -> hints.Hresult: ...
        FileName = hints.normal_property(_get_FileName, _set_FileName)
        def _get_FileType(self) -> hints.Incomplete: ...
        def _set_FileType(self, FileTypeRetVal: hints.Incomplete) -> hints.Hresult: ...
        FileType = hints.normal_property(_get_FileType, _set_FileType)
        def _get_LastModified(self) -> hints.Incomplete: ...
        def _set_LastModified(self, LastModifiedRetVal: hints.Incomplete) -> hints.Hresult: ...
        LastModified = hints.normal_property(_get_LastModified, _set_LastModified)
        def _get_TextOrProperty(self) -> hints.Incomplete: ...
        def _set_TextOrProperty(self, TextOrProperty: hints.Incomplete) -> hints.Hresult: ...
        TextOrProperty = hints.normal_property(_get_TextOrProperty, _set_TextOrProperty)
        def _get_LookIn(self) -> hints.Incomplete: ...
        def _set_LookIn(self, LookInRetVal: hints.Incomplete) -> hints.Hresult: ...
        LookIn = hints.normal_property(_get_LookIn, _set_LookIn)
        def Execute(self, SortBy: hints.Incomplete = ..., SortOrder: hints.Incomplete = ..., AlwaysAccurate: hints.Incomplete = ...) -> hints.Incomplete: ...
        def NewSearch(self) -> hints.Hresult: ...
        def _get_FoundFiles(self) -> 'FoundFiles': ...
        FoundFiles = hints.normal_property(_get_FoundFiles)
        def _get_PropertyTests(self) -> 'PropertyTests': ...
        PropertyTests = hints.normal_property(_get_PropertyTests)
        def _get_SearchScopes(self) -> 'SearchScopes': ...
        SearchScopes = hints.normal_property(_get_SearchScopes)
        def _get_SearchFolders(self) -> 'SearchFolders': ...
        SearchFolders = hints.normal_property(_get_SearchFolders)
        def _get_FileTypes(self) -> 'FileTypes': ...
        FileTypes = hints.normal_property(_get_FileTypes)
        def RefreshScopes(self) -> hints.Hresult: ...


class FoundFiles(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0331-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class FileTypes(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C036C-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, FileType: hints.Incomplete) -> hints.Hresult: ...
        def Remove(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


FileSearch._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'SearchSubFolders',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'SearchSubFoldersRetVal')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'SearchSubFolders',
        (['in'], VARIANT_BOOL, 'SearchSubFoldersRetVal')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'MatchTextExactly',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'MatchTextRetVal')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'MatchTextExactly',
        (['in'], VARIANT_BOOL, 'MatchTextRetVal')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'MatchAllWordForms',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'MatchAllWordFormsRetVal')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'MatchAllWordForms',
        (['in'], VARIANT_BOOL, 'MatchAllWordFormsRetVal')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'FileName',
        (['out', 'retval'], POINTER(BSTR), 'FileNameRetVal')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'FileName',
        (['in'], BSTR, 'FileNameRetVal')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'FileType',
        (['out', 'retval'], POINTER(MsoFileType), 'FileTypeRetVal')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'FileType',
        (['in'], MsoFileType, 'FileTypeRetVal')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'LastModified',
        (['out', 'retval'], POINTER(MsoLastModified), 'LastModifiedRetVal')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'LastModified',
        (['in'], MsoLastModified, 'LastModifiedRetVal')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'TextOrProperty',
        (['out', 'retval'], POINTER(BSTR), 'TextOrProperty')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'TextOrProperty',
        (['in'], BSTR, 'TextOrProperty')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'LookIn',
        (['out', 'retval'], POINTER(BSTR), 'LookInRetVal')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'LookIn',
        (['in'], BSTR, 'LookInRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'Execute',
        (['in', 'optional'], MsoSortBy, 'SortBy', 1),
        (['in', 'optional'], MsoSortOrder, 'SortOrder', 1),
        (['in', 'optional'], VARIANT_BOOL, 'AlwaysAccurate', True),
        (['out', 'retval'], POINTER(c_int), 'pRet')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'NewSearch'),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'FoundFiles',
        (['out', 'retval'], POINTER(POINTER(FoundFiles)), 'FoundFilesRet')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'PropertyTests',
        (['out', 'retval'], POINTER(POINTER(PropertyTests)), 'PropTestsRet')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'SearchScopes',
        (['out', 'retval'], POINTER(POINTER(SearchScopes)), 'SearchScopesRet')
    ),
    COMMETHOD(
        [dispid(14), 'propget'],
        HRESULT,
        'SearchFolders',
        (['out', 'retval'], POINTER(POINTER(SearchFolders)), 'SearchFoldersRet')
    ),
    COMMETHOD(
        [dispid(16), 'propget'],
        HRESULT,
        'FileTypes',
        (['out', 'retval'], POINTER(POINTER(FileTypes)), 'FileTypesRet')
    ),
    COMMETHOD([dispid(17)], HRESULT, 'RefreshScopes'),
]

################################################################
# code template for FileSearch implementation
# class FileSearch_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return SearchSubFoldersRetVal
#     def _set(self, SearchSubFoldersRetVal):
#         '-no docstring-'
#     SearchSubFolders = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MatchTextRetVal
#     def _set(self, MatchTextRetVal):
#         '-no docstring-'
#     MatchTextExactly = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MatchAllWordFormsRetVal
#     def _set(self, MatchAllWordFormsRetVal):
#         '-no docstring-'
#     MatchAllWordForms = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FileNameRetVal
#     def _set(self, FileNameRetVal):
#         '-no docstring-'
#     FileName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return FileTypeRetVal
#     def _set(self, FileTypeRetVal):
#         '-no docstring-'
#     FileType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LastModifiedRetVal
#     def _set(self, LastModifiedRetVal):
#         '-no docstring-'
#     LastModified = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TextOrProperty
#     def _set(self, TextOrProperty):
#         '-no docstring-'
#     TextOrProperty = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LookInRetVal
#     def _set(self, LookInRetVal):
#         '-no docstring-'
#     LookIn = property(_get, _set, doc = _set.__doc__)
#
#     def Execute(self, SortBy, SortOrder, AlwaysAccurate):
#         '-no docstring-'
#         #return pRet
#
#     def NewSearch(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def FoundFiles(self):
#         '-no docstring-'
#         #return FoundFilesRet
#
#     @property
#     def PropertyTests(self):
#         '-no docstring-'
#         #return PropTestsRet
#
#     @property
#     def SearchScopes(self):
#         '-no docstring-'
#         #return SearchScopesRet
#
#     @property
#     def SearchFolders(self):
#         '-no docstring-'
#         #return SearchFoldersRet
#
#     @property
#     def FileTypes(self):
#         '-no docstring-'
#         #return FileTypesRet
#
#     def RefreshScopes(self):
#         '-no docstring-'
#         #return 
#


class ScopeFolders(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0369-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'ScopeFolder': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


ScopeFolder._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Path',
        (['out', 'retval'], POINTER(BSTR), 'pbstrPath')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'ScopeFolders',
        (['out', 'retval'], POINTER(POINTER(ScopeFolders)), 'ScopeFoldersRet')
    ),
    COMMETHOD([dispid(4)], HRESULT, 'AddToSearchFolders'),
]

################################################################
# code template for ScopeFolder implementation
# class ScopeFolder_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Path(self):
#         '-no docstring-'
#         #return pbstrPath
#
#     @property
#     def ScopeFolders(self):
#         '-no docstring-'
#         #return ScopeFoldersRet
#
#     def AddToSearchFolders(self):
#         '-no docstring-'
#         #return 
#


class ChartColorFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C171D-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_SchemeColor(self) -> hints.Incomplete: ...
        def _set_SchemeColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SchemeColor = hints.normal_property(_get_SchemeColor, _set_SchemeColor)
        def _get_RGB(self) -> hints.Incomplete: ...
        def _set_RGB(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        RGB = hints.normal_property(_get_RGB, _set_RGB)
        def _get__Default(self) -> hints.Incomplete: ...
        _Default = hints.normal_property(_get__Default)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


ChartFillFormat._methods_ = [
    COMMETHOD(
        [dispid(1610743808)],
        HRESULT,
        'OneColorGradient',
        (['in'], c_int, 'Style'),
        (['in'], c_int, 'Variant'),
        (['in'], c_float, 'Degree')
    ),
    COMMETHOD(
        [dispid(1610743809)],
        HRESULT,
        'TwoColorGradient',
        (['in'], c_int, 'Style'),
        (['in'], c_int, 'Variant')
    ),
    COMMETHOD(
        [dispid(1610743810)],
        HRESULT,
        'PresetTextured',
        (['in'], c_int, 'PresetTexture')
    ),
    COMMETHOD([dispid(1610743811)], HRESULT, 'Solid'),
    COMMETHOD(
        [dispid(1610743812)],
        HRESULT,
        'Patterned',
        (['in'], c_int, 'Pattern')
    ),
    COMMETHOD(
        [dispid(1610743813)],
        HRESULT,
        'UserPicture',
        (['in'], VARIANT, 'PictureFile'),
        (['in'], VARIANT, 'PictureFormat'),
        (['in'], VARIANT, 'PictureStackUnit'),
        (['in'], VARIANT, 'PicturePlacement')
    ),
    COMMETHOD(
        [dispid(1610743814)],
        HRESULT,
        'UserTextured',
        (['in'], BSTR, 'TextureFile')
    ),
    COMMETHOD(
        [dispid(1610743815)],
        HRESULT,
        'PresetGradient',
        (['in'], c_int, 'Style'),
        (['in'], c_int, 'Variant'),
        (['in'], c_int, 'PresetGradientType')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'BackColor',
        (['out', 'retval'], POINTER(POINTER(ChartColorFormat)), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743817), 'propget'],
        HRESULT,
        'ForeColor',
        (['out', 'retval'], POINTER(POINTER(ChartColorFormat)), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propget'],
        HRESULT,
        'GradientColorType',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743819), 'propget'],
        HRESULT,
        'GradientDegree',
        (['out', 'retval'], POINTER(c_float), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propget'],
        HRESULT,
        'GradientStyle',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743821), 'propget'],
        HRESULT,
        'GradientVariant',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propget'],
        HRESULT,
        'Pattern',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743823), 'propget'],
        HRESULT,
        'PresetGradientType',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propget'],
        HRESULT,
        'PresetTexture',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743825), 'propget'],
        HRESULT,
        'TextureName',
        (['out', 'retval'], POINTER(BSTR), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propget'],
        HRESULT,
        'TextureType',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743827), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propput'],
        HRESULT,
        'Visible',
        (['in'], c_int, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
]

################################################################
# code template for ChartFillFormat implementation
# class ChartFillFormat_Impl(object):
#     def OneColorGradient(self, Style, Variant, Degree):
#         '-no docstring-'
#         #return 
#
#     def TwoColorGradient(self, Style, Variant):
#         '-no docstring-'
#         #return 
#
#     def PresetTextured(self, PresetTexture):
#         '-no docstring-'
#         #return 
#
#     def Solid(self):
#         '-no docstring-'
#         #return 
#
#     def Patterned(self, Pattern):
#         '-no docstring-'
#         #return 
#
#     def UserPicture(self, PictureFile, PictureFormat, PictureStackUnit, PicturePlacement):
#         '-no docstring-'
#         #return 
#
#     def UserTextured(self, TextureFile):
#         '-no docstring-'
#         #return 
#
#     def PresetGradient(self, Style, Variant, PresetGradientType):
#         '-no docstring-'
#         #return 
#
#     @property
#     def BackColor(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def ForeColor(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def GradientColorType(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def GradientDegree(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def GradientStyle(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def GradientVariant(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Pattern(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def PresetGradientType(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def PresetTexture(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def TextureName(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def TextureType(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#


class IMsoSeriesLines(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1729-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


IMsoSeriesLines._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610743813), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(253)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(254)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoSeriesLines implementation
# class IMsoSeriesLines_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Delete(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#

IMsoCharacters._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(139), 'propget'],
        HRESULT,
        'Caption',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(139), 'propput'],
        HRESULT,
        'Caption',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(146), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'RHS')
    ),
    COMMETHOD(
        [dispid(252)],
        HRESULT,
        'Insert',
        (['in'], BSTR, 'bstr'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(138), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(138), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(1522), 'propget'],
        HRESULT,
        'PhoneticCharacters',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(1522), 'propput'],
        HRESULT,
        'PhoneticCharacters',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for IMsoCharacters implementation
# class IMsoCharacters_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Caption = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return RHS
#
#     def Insert(self, bstr):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PhoneticCharacters = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#

SmartArtQuickStyle._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'StyleId')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Category',
        (['out', 'retval'], POINTER(BSTR), 'Category')
    ),
]

################################################################
# code template for SmartArtQuickStyle implementation
# class SmartArtQuickStyle_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return StyleId
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Description(self):
#         '-no docstring-'
#         #return Description
#
#     @property
#     def Category(self):
#         '-no docstring-'
#         #return Category
#


class ShapeNodes(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0319-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'ShapeNode': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Delete(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def Insert(self, Index: hints.Incomplete, SegmentType: hints.Incomplete, EditingType: hints.Incomplete, X1: hints.Incomplete, Y1: hints.Incomplete, X2: hints.Incomplete = ..., Y2: hints.Incomplete = ..., X3: hints.Incomplete = ..., Y3: hints.Incomplete = ...) -> hints.Hresult: ...
        def SetEditingType(self, Index: hints.Incomplete, EditingType: hints.Incomplete) -> hints.Hresult: ...
        def SetPosition(self, Index: hints.Incomplete, X1: hints.Incomplete, Y1: hints.Incomplete) -> hints.Hresult: ...
        def SetSegmentType(self, Index: hints.Incomplete, SegmentType: hints.Incomplete) -> hints.Hresult: ...


class ShapeNode(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0318-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_EditingType(self) -> hints.Incomplete: ...
        EditingType = hints.normal_property(_get_EditingType)
        def _get_Points(self) -> hints.Incomplete: ...
        Points = hints.normal_property(_get_Points)
        def _get_SegmentType(self) -> hints.Incomplete: ...
        SegmentType = hints.normal_property(_get_SegmentType)


ShapeNodes._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ShapeNode)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'Delete',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'Insert',
        (['in'], c_int, 'Index'),
        (['in'], MsoSegmentType, 'SegmentType'),
        (['in'], MsoEditingType, 'EditingType'),
        (['in'], c_float, 'X1'),
        (['in'], c_float, 'Y1'),
        (['in', 'optional'], c_float, 'X2', 0.0),
        (['in', 'optional'], c_float, 'Y2', 0.0),
        (['in', 'optional'], c_float, 'X3', 0.0),
        (['in', 'optional'], c_float, 'Y3', 0.0)
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetEditingType',
        (['in'], c_int, 'Index'),
        (['in'], MsoEditingType, 'EditingType')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetPosition',
        (['in'], c_int, 'Index'),
        (['in'], c_float, 'X1'),
        (['in'], c_float, 'Y1')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetSegmentType',
        (['in'], c_int, 'Index'),
        (['in'], MsoSegmentType, 'SegmentType')
    ),
]

################################################################
# code template for ShapeNodes implementation
# class ShapeNodes_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def Delete(self, Index):
#         '-no docstring-'
#         #return 
#
#     def Insert(self, Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3):
#         '-no docstring-'
#         #return 
#
#     def SetEditingType(self, Index, EditingType):
#         '-no docstring-'
#         #return 
#
#     def SetPosition(self, Index, X1, Y1):
#         '-no docstring-'
#         #return 
#
#     def SetSegmentType(self, Index, SegmentType):
#         '-no docstring-'
#         #return 
#

ScopeFolders._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ScopeFolder)), 'ScopeFolderRet')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'iCountRetVal')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for ScopeFolders implementation
# class ScopeFolders_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ScopeFolderRet
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return iCountRetVal
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class SmartArtQuickStyles(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03CB-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Item(self, Index: hints.Incomplete) -> 'SmartArtQuickStyle': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)


SmartArtQuickStyles._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SmartArtQuickStyle)), 'Style')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
]

################################################################
# code template for SmartArtQuickStyles implementation
# class SmartArtQuickStyles_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Style
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#

ChartColorFormat._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'SchemeColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'SchemeColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'RGB',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'RGB',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['nonbrowsable', 'propget'],
        HRESULT,
        '_Default',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for ChartColorFormat implementation
# class ChartColorFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SchemeColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     RGB = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def _Default(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#

ShapeNode._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'EditingType',
        (['out', 'retval'], POINTER(MsoEditingType), 'EditingType')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Points',
        (['out', 'retval'], POINTER(VARIANT), 'Points')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'SegmentType',
        (['out', 'retval'], POINTER(MsoSegmentType), 'SegmentType')
    ),
]

################################################################
# code template for ShapeNode implementation
# class ShapeNode_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def EditingType(self):
#         '-no docstring-'
#         #return EditingType
#
#     @property
#     def Points(self):
#         '-no docstring-'
#         #return Points
#
#     @property
#     def SegmentType(self):
#         '-no docstring-'
#         #return SegmentType
#


class SmartArtColors(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03CD-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Item(self, Index: hints.Incomplete) -> 'SmartArtColor': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)


SmartArtColors._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SmartArtColor)), 'SmartArtColor')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
]

################################################################
# code template for SmartArtColors implementation
# class SmartArtColors_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return SmartArtColor
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#


class CustomXMLPrefixMappings(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB00-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, Index: hints.Incomplete) -> 'CustomXMLPrefixMapping': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def AddNamespace(self, Prefix: hints.Incomplete, NamespaceURI: hints.Incomplete) -> hints.Hresult: ...
        def LookupNamespace(self, Prefix: hints.Incomplete) -> hints.Incomplete: ...
        def LookupPrefix(self, NamespaceURI: hints.Incomplete) -> hints.Incomplete: ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


CustomXMLPrefixMappings._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'plCount')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (
            ['out', 'retval'],
            POINTER(POINTER(CustomXMLPrefixMapping)),
            'ppPrefixMapping',
        )
    ),
    COMMETHOD(
        [dispid(1610809347)],
        HRESULT,
        'AddNamespace',
        (['in'], BSTR, 'Prefix'),
        (['in'], BSTR, 'NamespaceURI')
    ),
    COMMETHOD(
        [dispid(1610809348)],
        HRESULT,
        'LookupNamespace',
        (['in'], BSTR, 'Prefix'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrNamespaceURI')
    ),
    COMMETHOD(
        [dispid(1610809349)],
        HRESULT,
        'LookupPrefix',
        (['in'], BSTR, 'NamespaceURI'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrPrefix')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for CustomXMLPrefixMappings implementation
# class CustomXMLPrefixMappings_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return plCount
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppPrefixMapping
#
#     def AddNamespace(self, Prefix, NamespaceURI):
#         '-no docstring-'
#         #return 
#
#     def LookupNamespace(self, Prefix):
#         '-no docstring-'
#         #return pbstrNamespaceURI
#
#     def LookupPrefix(self, NamespaceURI):
#         '-no docstring-'
#         #return pbstrPrefix
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class CustomXMLNodes(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB03-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, Index: hints.Incomplete) -> 'CustomXMLNode': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class CustomXMLNode(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB04-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Attributes(self) -> 'CustomXMLNodes': ...
        Attributes = hints.normal_property(_get_Attributes)
        def _get_BaseName(self) -> hints.Incomplete: ...
        BaseName = hints.normal_property(_get_BaseName)
        def _get_ChildNodes(self) -> 'CustomXMLNodes': ...
        ChildNodes = hints.normal_property(_get_ChildNodes)
        def _get_FirstChild(self) -> 'CustomXMLNode': ...
        FirstChild = hints.normal_property(_get_FirstChild)
        def _get_LastChild(self) -> 'CustomXMLNode': ...
        LastChild = hints.normal_property(_get_LastChild)
        def _get_NamespaceURI(self) -> hints.Incomplete: ...
        NamespaceURI = hints.normal_property(_get_NamespaceURI)
        def _get_NextSibling(self) -> 'CustomXMLNode': ...
        NextSibling = hints.normal_property(_get_NextSibling)
        def _get_NodeType(self) -> hints.Incomplete: ...
        NodeType = hints.normal_property(_get_NodeType)
        def _get_NodeValue(self) -> hints.Incomplete: ...
        def _set_NodeValue(self, pbstrNodeValue: hints.Incomplete) -> hints.Hresult: ...
        NodeValue = hints.normal_property(_get_NodeValue, _set_NodeValue)
        def _get_OwnerDocument(self) -> hints.Incomplete: ...
        OwnerDocument = hints.normal_property(_get_OwnerDocument)
        def _get_OwnerPart(self) -> hints.Annotated['_CustomXMLPart', hints.FirstComItfOf['CustomXMLPart']]: ...
        OwnerPart = hints.normal_property(_get_OwnerPart)
        def _get_PreviousSibling(self) -> 'CustomXMLNode': ...
        PreviousSibling = hints.normal_property(_get_PreviousSibling)
        def _get_ParentNode(self) -> 'CustomXMLNode': ...
        ParentNode = hints.normal_property(_get_ParentNode)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, pbstrText: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_XPath(self) -> hints.Incomplete: ...
        XPath = hints.normal_property(_get_XPath)
        def _get_XML(self) -> hints.Incomplete: ...
        XML = hints.normal_property(_get_XML)
        def AppendChildNode(self, Name: hints.Incomplete = ..., NamespaceURI: hints.Incomplete = ..., NodeType: hints.Incomplete = ..., NodeValue: hints.Incomplete = ...) -> hints.Hresult: ...
        def AppendChildSubtree(self, XML: hints.Incomplete) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def HasChildNodes(self) -> hints.Incomplete: ...
        def InsertNodeBefore(self, Name: hints.Incomplete = ..., NamespaceURI: hints.Incomplete = ..., NodeType: hints.Incomplete = ..., NodeValue: hints.Incomplete = ..., NextSibling: hints.Incomplete = ...) -> hints.Hresult: ...
        def InsertSubtreeBefore(self, XML: hints.Incomplete, NextSibling: hints.Incomplete = ...) -> hints.Hresult: ...
        def RemoveChild(self, Child: hints.Incomplete) -> hints.Hresult: ...
        def ReplaceChildNode(self, OldNode: hints.Incomplete, Name: hints.Incomplete = ..., NamespaceURI: hints.Incomplete = ..., NodeType: hints.Incomplete = ..., NodeValue: hints.Incomplete = ...) -> hints.Hresult: ...
        def ReplaceChildSubtree(self, XML: hints.Incomplete, OldNode: hints.Incomplete) -> hints.Hresult: ...
        def SelectNodes(self, XPath: hints.Incomplete) -> 'CustomXMLNodes': ...
        def SelectSingleNode(self, XPath: hints.Incomplete) -> 'CustomXMLNode': ...


CustomXMLNodes._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'plCount')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(CustomXMLNode)), 'ppNode')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for CustomXMLNodes implementation
# class CustomXMLNodes_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return plCount
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppNode
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class CustomXMLValidationError(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB0E-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Node(self) -> 'CustomXMLNode': ...
        Node = hints.normal_property(_get_Node)
        def _get_Text(self) -> hints.Incomplete: ...
        Text = hints.normal_property(_get_Text)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def Delete(self) -> hints.Hresult: ...
        def _get_ErrorCode(self) -> hints.Incomplete: ...
        ErrorCode = hints.normal_property(_get_ErrorCode)


CustomXMLValidationError._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Node',
        (['out', 'retval'], POINTER(POINTER(CustomXMLNode)), 'ppNode')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'pbstrText')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'Type',
        (
            ['out', 'retval'],
            POINTER(MsoCustomXMLValidationErrorType),
            'pErrorType',
        )
    ),
    COMMETHOD([dispid(1610809349)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(1610809350), 'propget'],
        HRESULT,
        'ErrorCode',
        (['out', 'retval'], POINTER(c_int), 'plErrorCode')
    ),
]

################################################################
# code template for CustomXMLValidationError implementation
# class CustomXMLValidationError_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Node(self):
#         '-no docstring-'
#         #return ppNode
#
#     @property
#     def Text(self):
#         '-no docstring-'
#         #return pbstrText
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return pErrorType
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ErrorCode(self):
#         '-no docstring-'
#         #return plErrorCode
#

ThreeDFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'IncrementRotationX',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'IncrementRotationY',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD([dispid(12)], HRESULT, 'ResetRotation'),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetThreeDFormat',
        (['in'], MsoPresetThreeDFormat, 'PresetThreeDFormat')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetExtrusionDirection',
        (['in'], MsoPresetExtrusionDirection, 'PresetExtrusionDirection')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Depth',
        (['out', 'retval'], POINTER(c_float), 'Depth')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'Depth',
        (['in'], c_float, 'Depth')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'ExtrusionColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'ExtrusionColor')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'ExtrusionColorType',
        (
            ['out', 'retval'],
            POINTER(MsoExtrusionColorType),
            'ExtrusionColorType',
        )
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'ExtrusionColorType',
        (['in'], MsoExtrusionColorType, 'ExtrusionColorType')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Perspective',
        (['out', 'retval'], POINTER(MsoTriState), 'Perspective')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Perspective',
        (['in'], MsoTriState, 'Perspective')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'PresetExtrusionDirection',
        (
            ['out', 'retval'],
            POINTER(MsoPresetExtrusionDirection),
            'PresetExtrusionDirection',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'PresetLightingDirection',
        (
            ['out', 'retval'],
            POINTER(MsoPresetLightingDirection),
            'PresetLightingDirection',
        )
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'PresetLightingDirection',
        (['in'], MsoPresetLightingDirection, 'PresetLightingDirection')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'PresetLightingSoftness',
        (
            ['out', 'retval'],
            POINTER(MsoPresetLightingSoftness),
            'PresetLightingSoftness',
        )
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'PresetLightingSoftness',
        (['in'], MsoPresetLightingSoftness, 'PresetLightingSoftness')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'PresetMaterial',
        (['out', 'retval'], POINTER(MsoPresetMaterial), 'PresetMaterial')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'PresetMaterial',
        (['in'], MsoPresetMaterial, 'PresetMaterial')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'PresetThreeDFormat',
        (
            ['out', 'retval'],
            POINTER(MsoPresetThreeDFormat),
            'PresetThreeDFormat',
        )
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'RotationX',
        (['out', 'retval'], POINTER(c_float), 'RotationX')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'RotationX',
        (['in'], c_float, 'RotationX')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'RotationY',
        (['out', 'retval'], POINTER(c_float), 'RotationY')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'RotationY',
        (['in'], c_float, 'RotationY')
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(MsoTriState), 'Visible')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Visible',
        (['in'], MsoTriState, 'Visible')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetPresetCamera',
        (['in'], MsoPresetCamera, 'PresetCamera')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'IncrementRotationZ',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'IncrementRotationHorizontal',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'IncrementRotationVertical',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'PresetLighting',
        (['out', 'retval'], POINTER(MsoLightRigType), 'PresetLightRigType')
    ),
    COMMETHOD(
        [dispid(112), 'propput'],
        HRESULT,
        'PresetLighting',
        (['in'], MsoLightRigType, 'PresetLightRigType')
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'Z',
        (['out', 'retval'], POINTER(c_float), 'Z')
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'Z',
        (['in'], c_float, 'Z')
    ),
    COMMETHOD(
        [dispid(114), 'propget'],
        HRESULT,
        'BevelTopType',
        (['out', 'retval'], POINTER(MsoBevelType), 'BevelTopType')
    ),
    COMMETHOD(
        [dispid(114), 'propput'],
        HRESULT,
        'BevelTopType',
        (['in'], MsoBevelType, 'BevelTopType')
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'BevelTopInset',
        (['out', 'retval'], POINTER(c_float), 'BevelTopInset')
    ),
    COMMETHOD(
        [dispid(115), 'propput'],
        HRESULT,
        'BevelTopInset',
        (['in'], c_float, 'BevelTopInset')
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'BevelTopDepth',
        (['out', 'retval'], POINTER(c_float), 'BevelTopDepth')
    ),
    COMMETHOD(
        [dispid(116), 'propput'],
        HRESULT,
        'BevelTopDepth',
        (['in'], c_float, 'BevelTopDepth')
    ),
    COMMETHOD(
        [dispid(117), 'propget'],
        HRESULT,
        'BevelBottomType',
        (['out', 'retval'], POINTER(MsoBevelType), 'BevelBottomType')
    ),
    COMMETHOD(
        [dispid(117), 'propput'],
        HRESULT,
        'BevelBottomType',
        (['in'], MsoBevelType, 'BevelBottomType')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'BevelBottomInset',
        (['out', 'retval'], POINTER(c_float), 'BevelBottomInset')
    ),
    COMMETHOD(
        [dispid(118), 'propput'],
        HRESULT,
        'BevelBottomInset',
        (['in'], c_float, 'BevelBottomInset')
    ),
    COMMETHOD(
        [dispid(119), 'propget'],
        HRESULT,
        'BevelBottomDepth',
        (['out', 'retval'], POINTER(c_float), 'BevelBottomDepth')
    ),
    COMMETHOD(
        [dispid(119), 'propput'],
        HRESULT,
        'BevelBottomDepth',
        (['in'], c_float, 'BevelBottomDepth')
    ),
    COMMETHOD(
        [dispid(120), 'propget'],
        HRESULT,
        'PresetCamera',
        (['out', 'retval'], POINTER(MsoPresetCamera), 'PresetCamera')
    ),
    COMMETHOD(
        [dispid(121), 'propget'],
        HRESULT,
        'RotationZ',
        (['out', 'retval'], POINTER(c_float), 'RotationZ')
    ),
    COMMETHOD(
        [dispid(121), 'propput'],
        HRESULT,
        'RotationZ',
        (['in'], c_float, 'RotationZ')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'ContourWidth',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(122), 'propput'],
        HRESULT,
        'ContourWidth',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'ContourColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'ContourColor')
    ),
    COMMETHOD(
        [dispid(124), 'propget'],
        HRESULT,
        'FieldOfView',
        (['out', 'retval'], POINTER(c_float), 'FOV')
    ),
    COMMETHOD(
        [dispid(124), 'propput'],
        HRESULT,
        'FieldOfView',
        (['in'], c_float, 'FOV')
    ),
    COMMETHOD(
        [dispid(125), 'propget'],
        HRESULT,
        'ProjectText',
        (['out', 'retval'], POINTER(MsoTriState), 'ProjectText')
    ),
    COMMETHOD(
        [dispid(125), 'propput'],
        HRESULT,
        'ProjectText',
        (['in'], MsoTriState, 'ProjectText')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'LightAngle',
        (['out', 'retval'], POINTER(c_float), 'LightAngle')
    ),
    COMMETHOD(
        [dispid(126), 'propput'],
        HRESULT,
        'LightAngle',
        (['in'], c_float, 'LightAngle')
    ),
]

################################################################
# code template for ThreeDFormat implementation
# class ThreeDFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def IncrementRotationX(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationY(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def ResetRotation(self):
#         '-no docstring-'
#         #return 
#
#     def SetThreeDFormat(self, PresetThreeDFormat):
#         '-no docstring-'
#         #return 
#
#     def SetExtrusionDirection(self, PresetExtrusionDirection):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Depth
#     def _set(self, Depth):
#         '-no docstring-'
#     Depth = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ExtrusionColor(self):
#         '-no docstring-'
#         #return ExtrusionColor
#
#     def _get(self):
#         '-no docstring-'
#         #return ExtrusionColorType
#     def _set(self, ExtrusionColorType):
#         '-no docstring-'
#     ExtrusionColorType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Perspective
#     def _set(self, Perspective):
#         '-no docstring-'
#     Perspective = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PresetExtrusionDirection(self):
#         '-no docstring-'
#         #return PresetExtrusionDirection
#
#     def _get(self):
#         '-no docstring-'
#         #return PresetLightingDirection
#     def _set(self, PresetLightingDirection):
#         '-no docstring-'
#     PresetLightingDirection = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PresetLightingSoftness
#     def _set(self, PresetLightingSoftness):
#         '-no docstring-'
#     PresetLightingSoftness = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PresetMaterial
#     def _set(self, PresetMaterial):
#         '-no docstring-'
#     PresetMaterial = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PresetThreeDFormat(self):
#         '-no docstring-'
#         #return PresetThreeDFormat
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationX
#     def _set(self, RotationX):
#         '-no docstring-'
#     RotationX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationY
#     def _set(self, RotationY):
#         '-no docstring-'
#     RotationY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def SetPresetCamera(self, PresetCamera):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationZ(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationHorizontal(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotationVertical(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return PresetLightRigType
#     def _set(self, PresetLightRigType):
#         '-no docstring-'
#     PresetLighting = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Z
#     def _set(self, Z):
#         '-no docstring-'
#     Z = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelTopType
#     def _set(self, BevelTopType):
#         '-no docstring-'
#     BevelTopType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelTopInset
#     def _set(self, BevelTopInset):
#         '-no docstring-'
#     BevelTopInset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelTopDepth
#     def _set(self, BevelTopDepth):
#         '-no docstring-'
#     BevelTopDepth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelBottomType
#     def _set(self, BevelBottomType):
#         '-no docstring-'
#     BevelBottomType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelBottomInset
#     def _set(self, BevelBottomInset):
#         '-no docstring-'
#     BevelBottomInset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BevelBottomDepth
#     def _set(self, BevelBottomDepth):
#         '-no docstring-'
#     BevelBottomDepth = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PresetCamera(self):
#         '-no docstring-'
#         #return PresetCamera
#
#     def _get(self):
#         '-no docstring-'
#         #return RotationZ
#     def _set(self, RotationZ):
#         '-no docstring-'
#     RotationZ = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     ContourWidth = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ContourColor(self):
#         '-no docstring-'
#         #return ContourColor
#
#     def _get(self):
#         '-no docstring-'
#         #return FOV
#     def _set(self, FOV):
#         '-no docstring-'
#     FieldOfView = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ProjectText
#     def _set(self, ProjectText):
#         '-no docstring-'
#     ProjectText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return LightAngle
#     def _set(self, LightAngle):
#         '-no docstring-'
#     LightAngle = property(_get, _set, doc = _set.__doc__)
#

SmartArtColor._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'ColorStyleId')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Category',
        (['out', 'retval'], POINTER(BSTR), 'Category')
    ),
]

################################################################
# code template for SmartArtColor implementation
# class SmartArtColor_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return ColorStyleId
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Description(self):
#         '-no docstring-'
#         #return Description
#
#     @property
#     def Category(self):
#         '-no docstring-'
#         #return Category
#

ChartFont._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propput'],
        HRESULT,
        'Background',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Background',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propput'],
        HRESULT,
        'Bold',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'Bold',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'Color',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'ColorIndex',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'ColorIndex',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propput'],
        HRESULT,
        'FontStyle',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'FontStyle',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propput'],
        HRESULT,
        'Italic',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propget'],
        HRESULT,
        'Italic',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propput'],
        HRESULT,
        'Name',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propput'],
        HRESULT,
        'OutlineFont',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propget'],
        HRESULT,
        'OutlineFont',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propput'],
        HRESULT,
        'Size',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propget'],
        HRESULT,
        'Size',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propput'],
        HRESULT,
        'StrikeThrough',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propget'],
        HRESULT,
        'StrikeThrough',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743830), 'propput'],
        HRESULT,
        'Subscript',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743830), 'propget'],
        HRESULT,
        'Subscript',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743832), 'propput'],
        HRESULT,
        'Superscript',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743832), 'propget'],
        HRESULT,
        'Superscript',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743834), 'propput'],
        HRESULT,
        'Underline',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743834), 'propget'],
        HRESULT,
        'Underline',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
]

################################################################
# code template for ChartFont implementation
# class ChartFont_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Background = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Bold = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Color = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     ColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     FontStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Italic = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     OutlineFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Size = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     StrikeThrough = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Subscript = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Superscript = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Underline = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#


class SensitivityLabel(CoClass):
    _reg_clsid_ = GUID('{CA42DA75-D621-4476-B8F9-9C4ADAE77085}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}', 2, 8)


SensitivityLabel._com_interfaces_ = [ISensitivityLabel]
SensitivityLabel._outgoing_interfaces_ = [_SensitivityLabelEvents]


class PickerField(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03E0-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_IsHidden(self) -> hints.Incomplete: ...
        IsHidden = hints.normal_property(_get_IsHidden)



PickerField._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoPickerField), 'Type')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'IsHidden',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'IsHidden')
    ),
]

################################################################
# code template for PickerField implementation
# class PickerField_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     @property
#     def IsHidden(self):
#         '-no docstring-'
#         #return IsHidden
#


class PickerProperty(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03E2-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_Value(self) -> hints.Incomplete: ...
        Value = hints.normal_property(_get_Value)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)


PickerProperty._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'Id')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(VARIANT), 'Value')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoPickerField), 'Type')
    ),
]

################################################################
# code template for PickerProperty implementation
# class PickerProperty_Impl(object):
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return Id
#
#     @property
#     def Value(self):
#         '-no docstring-'
#         #return Value
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#


class SeriesGradientStopColorFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{08D6CD0F-98AA-468B-81F3-A6B2CB6C84C9}')
    _idlflags_ = ['hidden', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_TintAndShade(self) -> hints.Incomplete: ...
        def _set_TintAndShade(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        TintAndShade = hints.normal_property(_get_TintAndShade, _set_TintAndShade)
        def _get_ObjectThemeColor(self) -> hints.Incomplete: ...
        def _set_ObjectThemeColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ObjectThemeColor = hints.normal_property(_get_ObjectThemeColor, _set_ObjectThemeColor)
        def _get_RGB(self) -> hints.Incomplete: ...
        def _set_RGB(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        RGB = hints.normal_property(_get_RGB, _set_RGB)
        def _get_Transparency(self) -> hints.Incomplete: ...
        def _set_Transparency(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Transparency = hints.normal_property(_get_Transparency, _set_Transparency)
        def _get_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.named_property('Type', _get_Type)


SeriesGradientStopData._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'StopColor',
        (
            ['out', 'retval'],
            POINTER(POINTER(SeriesGradientStopColorFormat)),
            'RHS',
        )
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'StopPositionType',
        (['out', 'retval'], POINTER(XlGradientStopPositionType), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'StopPositionType',
        (['in'], XlGradientStopPositionType, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'StopValue',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'StopValue',
        (['in'], BSTR, 'RHS')
    ),
]

################################################################
# code template for SeriesGradientStopData implementation
# class SeriesGradientStopData_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def StopColor(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     StopPositionType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     StopValue = property(_get, _set, doc = _set.__doc__)
#

FileTypes._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(MsoFileType), 'MsoFileTypeRet')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'iCountRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Add',
        (['in'], MsoFileType, 'FileType')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Remove',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for FileTypes implementation
# class FileTypes_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return MsoFileTypeRet
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return iCountRetVal
#
#     def Add(self, FileType):
#         '-no docstring-'
#         #return 
#
#     def Remove(self, Index):
#         '-no docstring-'
#         #return 
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class IMsoUpBars(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C172A-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


IMsoUpBars._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppfill')
    ),
    COMMETHOD(
        [dispid(1610743815), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(253)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(254)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoUpBars implementation
# class IMsoUpBars_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Delete(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppfill
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#

SeriesGradientStopColorFormat._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'TintAndShade',
        (['out', 'retval'], POINTER(c_float), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'TintAndShade',
        (['in'], c_float, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ObjectThemeColor',
        (['out', 'retval'], POINTER(MsoThemeColorIndex), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ObjectThemeColor',
        (['in'], MsoThemeColorIndex, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'RGB',
        (['out', 'retval'], POINTER(MsoRGBType), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'RGB',
        (['in'], MsoRGBType, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Transparency',
        (['out', 'retval'], POINTER(c_float), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Transparency',
        (['in'], c_float, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Type',
        (['in'], POINTER(MsoColorType), 'RHS')
    ),
]

################################################################
# code template for SeriesGradientStopColorFormat implementation
# class SeriesGradientStopColorFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     TintAndShade = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ObjectThemeColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     RGB = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Transparency = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self, RHS):
#         '-no docstring-'
#         #return 
#


class PickerFields(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03E1-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'PickerField': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


PickerFields._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(PickerField)), 'Field')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
]

################################################################
# code template for PickerFields implementation
# class PickerFields_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return Field
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#

PickerProperties._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(PickerProperty)), 'prop')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Id'),
        (['in'], BSTR, 'Value'),
        (['in'], MsoPickerField, 'Type'),
        (['out', 'retval'], POINTER(POINTER(PickerProperty)), 'prop')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Remove',
        (['in'], BSTR, 'Id')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
]

################################################################
# code template for PickerProperties implementation
# class PickerProperties_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return prop
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Add(self, Id, Value, Type):
#         '-no docstring-'
#         #return prop
#
#     def Remove(self, Id):
#         '-no docstring-'
#         #return 
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#


class _CustomXMLSchemaCollection(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB02-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, Index: hints.Incomplete) -> 'CustomXMLSchema': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_NamespaceURI(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        NamespaceURI = hints.named_property('NamespaceURI', _get_NamespaceURI)
        def Add(self, NamespaceURI: hints.Incomplete = ..., Alias: hints.Incomplete = ..., FileName: hints.Incomplete = ..., InstallForAllUsers: hints.Incomplete = ...) -> 'CustomXMLSchema': ...
        def AddCollection(self, SchemaCollection: hints.Incomplete) -> hints.Hresult: ...
        def Validate(self) -> hints.Incomplete: ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class CustomXMLSchemaCollection(CoClass):
    _reg_clsid_ = GUID('{000CDB0D-0000-0000-C000-000000000046}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}', 2, 8)


CustomXMLSchemaCollection._com_interfaces_ = [_CustomXMLSchemaCollection]

_CustomXMLSchemaCollection._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'plCount')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(CustomXMLSchema)), 'ppSchema')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'NamespaceURI',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrNamespaceURI')
    ),
    COMMETHOD(
        [dispid(1610809348)],
        HRESULT,
        'Add',
        (['in', 'optional'], BSTR, 'NamespaceURI', ''),
        (['in', 'optional'], BSTR, 'Alias', ''),
        (['in', 'optional'], BSTR, 'FileName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'InstallForAllUsers', False),
        (['out', 'retval'], POINTER(POINTER(CustomXMLSchema)), 'ppSchema')
    ),
    COMMETHOD(
        [dispid(1610809349)],
        HRESULT,
        'AddCollection',
        (['in'], POINTER(CustomXMLSchemaCollection), 'SchemaCollection')
    ),
    COMMETHOD(
        [dispid(1610809350)],
        HRESULT,
        'Validate',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfResult')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for _CustomXMLSchemaCollection implementation
# class _CustomXMLSchemaCollection_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return plCount
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppSchema
#
#     @property
#     def NamespaceURI(self, Index):
#         '-no docstring-'
#         #return pbstrNamespaceURI
#
#     def Add(self, NamespaceURI, Alias, FileName, InstallForAllUsers):
#         '-no docstring-'
#         #return ppSchema
#
#     def AddCollection(self, SchemaCollection):
#         '-no docstring-'
#         #return 
#
#     def Validate(self):
#         '-no docstring-'
#         #return pfResult
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class ICustomXMLPartEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB06-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def NodeAfterInsert(self, NewNode: hints.Incomplete, InUndoRedo: hints.Incomplete) -> hints.Hresult: ...
        def NodeAfterDelete(self, OldNode: hints.Incomplete, OldParentNode: hints.Incomplete, OldNextSibling: hints.Incomplete, InUndoRedo: hints.Incomplete) -> hints.Hresult: ...
        def NodeAfterReplace(self, OldNode: hints.Incomplete, NewNode: hints.Incomplete, InUndoRedo: hints.Incomplete) -> hints.Hresult: ...


ICustomXMLPartEvents._methods_ = [
    COMMETHOD(
        [dispid(1)],
        None,
        'NodeAfterInsert',
        (['in'], POINTER(CustomXMLNode), 'NewNode'),
        (['in'], VARIANT_BOOL, 'InUndoRedo')
    ),
    COMMETHOD(
        [dispid(2)],
        None,
        'NodeAfterDelete',
        (['in'], POINTER(CustomXMLNode), 'OldNode'),
        (['in'], POINTER(CustomXMLNode), 'OldParentNode'),
        (['in'], POINTER(CustomXMLNode), 'OldNextSibling'),
        (['in'], VARIANT_BOOL, 'InUndoRedo')
    ),
    COMMETHOD(
        [dispid(3)],
        None,
        'NodeAfterReplace',
        (['in'], POINTER(CustomXMLNode), 'OldNode'),
        (['in'], POINTER(CustomXMLNode), 'NewNode'),
        (['in'], VARIANT_BOOL, 'InUndoRedo')
    ),
]

################################################################
# code template for ICustomXMLPartEvents implementation
# class ICustomXMLPartEvents_Impl(object):
#     def NodeAfterInsert(self, NewNode, InUndoRedo):
#         '-no docstring-'
#         #return 
#
#     def NodeAfterDelete(self, OldNode, OldParentNode, OldNextSibling, InUndoRedo):
#         '-no docstring-'
#         #return 
#
#     def NodeAfterReplace(self, OldNode, NewNode, InUndoRedo):
#         '-no docstring-'
#         #return 
#


class _CommandBars(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0302-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ActionControl(self) -> 'CommandBarControl': ...
        ActionControl = hints.normal_property(_get_ActionControl)
        def _get_ActiveMenuBar(self) -> 'CommandBar': ...
        ActiveMenuBar = hints.normal_property(_get_ActiveMenuBar)
        def Add(self, Name: hints.Incomplete = ..., Position: hints.Incomplete = ..., MenuBar: hints.Incomplete = ..., Temporary: hints.Incomplete = ...) -> 'CommandBar': ...
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_DisplayTooltips(self) -> hints.Incomplete: ...
        def _set_DisplayTooltips(self, pvarfDisplayTooltips: hints.Incomplete) -> hints.Hresult: ...
        DisplayTooltips = hints.normal_property(_get_DisplayTooltips, _set_DisplayTooltips)
        def _get_DisplayKeysInTooltips(self) -> hints.Incomplete: ...
        def _set_DisplayKeysInTooltips(self, pvarfDisplayKeys: hints.Incomplete) -> hints.Hresult: ...
        DisplayKeysInTooltips = hints.normal_property(_get_DisplayKeysInTooltips, _set_DisplayKeysInTooltips)
        def FindControl(self, Type: hints.Incomplete = ..., Id: hints.Incomplete = ..., Tag: hints.Incomplete = ..., Visible: hints.Incomplete = ...) -> 'CommandBarControl': ...
        def _get_Item(self, Index: hints.Incomplete) -> 'CommandBar': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_LargeButtons(self) -> hints.Incomplete: ...
        def _set_LargeButtons(self, pvarfLargeButtons: hints.Incomplete) -> hints.Hresult: ...
        LargeButtons = hints.normal_property(_get_LargeButtons, _set_LargeButtons)
        def _get_MenuAnimationStyle(self) -> hints.Incomplete: ...
        def _set_MenuAnimationStyle(self, pma: hints.Incomplete) -> hints.Hresult: ...
        MenuAnimationStyle = hints.normal_property(_get_MenuAnimationStyle, _set_MenuAnimationStyle)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def ReleaseFocus(self) -> hints.Hresult: ...
        def _get_IdsString(self, ids: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        IdsString = hints.named_property('IdsString', _get_IdsString)
        def _get_TmcGetName(self, tmc: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        TmcGetName = hints.named_property('TmcGetName', _get_TmcGetName)
        def _get_AdaptiveMenus(self) -> hints.Incomplete: ...
        def _set_AdaptiveMenus(self, pvarfAdaptiveMenus: hints.Incomplete) -> hints.Hresult: ...
        AdaptiveMenus = hints.normal_property(_get_AdaptiveMenus, _set_AdaptiveMenus)
        def FindControls(self, Type: hints.Incomplete = ..., Id: hints.Incomplete = ..., Tag: hints.Incomplete = ..., Visible: hints.Incomplete = ...) -> 'CommandBarControls': ...
        def AddEx(self, TbidOrName: hints.Incomplete = ..., Position: hints.Incomplete = ..., MenuBar: hints.Incomplete = ..., Temporary: hints.Incomplete = ..., TbtrProtection: hints.Incomplete = ...) -> 'CommandBar': ...
        def _get_DisplayFonts(self) -> hints.Incomplete: ...
        def _set_DisplayFonts(self, pvarfDisplayFonts: hints.Incomplete) -> hints.Hresult: ...
        DisplayFonts = hints.normal_property(_get_DisplayFonts, _set_DisplayFonts)
        def _get_DisableCustomize(self) -> hints.Incomplete: ...
        def _set_DisableCustomize(self, pvarfDisableCustomize: hints.Incomplete) -> hints.Hresult: ...
        DisableCustomize = hints.normal_property(_get_DisableCustomize, _set_DisableCustomize)
        def _get_DisableAskAQuestionDropdown(self) -> hints.Incomplete: ...
        def _set_DisableAskAQuestionDropdown(self, pvarfDisableAskAQuestionDropdown: hints.Incomplete) -> hints.Hresult: ...
        DisableAskAQuestionDropdown = hints.normal_property(_get_DisableAskAQuestionDropdown, _set_DisableAskAQuestionDropdown)
        def ExecuteMso(self, idMso: hints.Incomplete) -> hints.Hresult: ...
        def GetEnabledMso(self, idMso: hints.Incomplete) -> hints.Incomplete: ...
        def GetVisibleMso(self, idMso: hints.Incomplete) -> hints.Incomplete: ...
        def GetPressedMso(self, idMso: hints.Incomplete) -> hints.Incomplete: ...
        def GetLabelMso(self, idMso: hints.Incomplete) -> hints.Incomplete: ...
        def GetScreentipMso(self, idMso: hints.Incomplete) -> hints.Incomplete: ...
        def GetSupertipMso(self, idMso: hints.Incomplete) -> hints.Incomplete: ...
        def GetImageMso(self, idMso: hints.Incomplete, Width: hints.Incomplete, Height: hints.Incomplete) -> hints.Incomplete: ...
        def CommitRenderingTransaction(self, hwnd: hints.Incomplete) -> hints.Hresult: ...


_CommandBars._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'ActionControl',
        (['out', 'retval'], POINTER(POINTER(CommandBarControl)), 'ppcbc')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'ActiveMenuBar',
        (['out', 'retval'], POINTER(POINTER(CommandBar)), 'ppcb')
    ),
    COMMETHOD(
        [dispid(1610809346)],
        HRESULT,
        'Add',
        (['in', 'optional'], VARIANT, 'Name'),
        (['in', 'optional'], VARIANT, 'Position'),
        (['in', 'optional'], VARIANT, 'MenuBar'),
        (['in', 'optional'], VARIANT, 'Temporary'),
        (['out', 'retval'], POINTER(POINTER(CommandBar)), 'ppcb')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcToolbars')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'DisplayTooltips',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfDisplayTooltips')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propput'],
        HRESULT,
        'DisplayTooltips',
        (['in'], VARIANT_BOOL, 'pvarfDisplayTooltips')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propget'],
        HRESULT,
        'DisplayKeysInTooltips',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfDisplayKeys')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propput'],
        HRESULT,
        'DisplayKeysInTooltips',
        (['in'], VARIANT_BOOL, 'pvarfDisplayKeys')
    ),
    COMMETHOD(
        [dispid(1610809352)],
        HRESULT,
        'FindControl',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Id'),
        (['in', 'optional'], VARIANT, 'Tag'),
        (['in', 'optional'], VARIANT, 'Visible'),
        (['out', 'retval'], POINTER(POINTER(CommandBarControl)), 'ppcbc')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(CommandBar)), 'ppcb')
    ),
    COMMETHOD(
        [dispid(1610809354), 'propget'],
        HRESULT,
        'LargeButtons',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfLargeButtons')
    ),
    COMMETHOD(
        [dispid(1610809354), 'propput'],
        HRESULT,
        'LargeButtons',
        (['in'], VARIANT_BOOL, 'pvarfLargeButtons')
    ),
    COMMETHOD(
        [dispid(1610809356), 'propget'],
        HRESULT,
        'MenuAnimationStyle',
        (['out', 'retval'], POINTER(MsoMenuAnimation), 'pma')
    ),
    COMMETHOD(
        [dispid(1610809356), 'propput'],
        HRESULT,
        'MenuAnimationStyle',
        (['in'], MsoMenuAnimation, 'pma')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD([dispid(1610809360)], HRESULT, 'ReleaseFocus'),
    COMMETHOD(
        [dispid(1610809361), 'hidden', 'propget'],
        HRESULT,
        'IdsString',
        (['in'], c_int, 'ids'),
        (['out'], POINTER(BSTR), 'pbstrName'),
        (['out', 'retval'], POINTER(c_int), 'pcch')
    ),
    COMMETHOD(
        [dispid(1610809362), 'hidden', 'propget'],
        HRESULT,
        'TmcGetName',
        (['in'], c_int, 'tmc'),
        (['out'], POINTER(BSTR), 'pbstrName'),
        (['out', 'retval'], POINTER(c_int), 'pcch')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propget'],
        HRESULT,
        'AdaptiveMenus',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfAdaptiveMenus')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propput'],
        HRESULT,
        'AdaptiveMenus',
        (['in'], VARIANT_BOOL, 'pvarfAdaptiveMenus')
    ),
    COMMETHOD(
        [dispid(1610809365)],
        HRESULT,
        'FindControls',
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Id'),
        (['in', 'optional'], VARIANT, 'Tag'),
        (['in', 'optional'], VARIANT, 'Visible'),
        (['out', 'retval'], POINTER(POINTER(CommandBarControls)), 'ppcbcs')
    ),
    COMMETHOD(
        [dispid(1610809366), 'hidden'],
        HRESULT,
        'AddEx',
        (['in', 'optional'], VARIANT, 'TbidOrName'),
        (['in', 'optional'], VARIANT, 'Position'),
        (['in', 'optional'], VARIANT, 'MenuBar'),
        (['in', 'optional'], VARIANT, 'Temporary'),
        (['in', 'optional'], VARIANT, 'TbtrProtection'),
        (['out', 'retval'], POINTER(POINTER(CommandBar)), 'ppcb')
    ),
    COMMETHOD(
        [dispid(1610809367), 'propget'],
        HRESULT,
        'DisplayFonts',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfDisplayFonts')
    ),
    COMMETHOD(
        [dispid(1610809367), 'propput'],
        HRESULT,
        'DisplayFonts',
        (['in'], VARIANT_BOOL, 'pvarfDisplayFonts')
    ),
    COMMETHOD(
        [dispid(1610809369), 'propget'],
        HRESULT,
        'DisableCustomize',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfDisableCustomize')
    ),
    COMMETHOD(
        [dispid(1610809369), 'propput'],
        HRESULT,
        'DisableCustomize',
        (['in'], VARIANT_BOOL, 'pvarfDisableCustomize')
    ),
    COMMETHOD(
        [dispid(1610809371), 'propget'],
        HRESULT,
        'DisableAskAQuestionDropdown',
        (
            ['out', 'retval'],
            POINTER(VARIANT_BOOL),
            'pvarfDisableAskAQuestionDropdown',
        )
    ),
    COMMETHOD(
        [dispid(1610809371), 'propput'],
        HRESULT,
        'DisableAskAQuestionDropdown',
        (['in'], VARIANT_BOOL, 'pvarfDisableAskAQuestionDropdown')
    ),
    COMMETHOD(
        [dispid(1610809373)],
        HRESULT,
        'ExecuteMso',
        (['in'], BSTR, 'idMso')
    ),
    COMMETHOD(
        [dispid(1610809374)],
        HRESULT,
        'GetEnabledMso',
        (['in'], BSTR, 'idMso'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Enabled')
    ),
    COMMETHOD(
        [dispid(1610809375)],
        HRESULT,
        'GetVisibleMso',
        (['in'], BSTR, 'idMso'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Visible')
    ),
    COMMETHOD(
        [dispid(1610809376)],
        HRESULT,
        'GetPressedMso',
        (['in'], BSTR, 'idMso'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Pressed')
    ),
    COMMETHOD(
        [dispid(1610809377)],
        HRESULT,
        'GetLabelMso',
        (['in'], BSTR, 'idMso'),
        (['out', 'retval'], POINTER(BSTR), 'Label')
    ),
    COMMETHOD(
        [dispid(1610809378)],
        HRESULT,
        'GetScreentipMso',
        (['in'], BSTR, 'idMso'),
        (['out', 'retval'], POINTER(BSTR), 'Screentip')
    ),
    COMMETHOD(
        [dispid(1610809379)],
        HRESULT,
        'GetSupertipMso',
        (['in'], BSTR, 'idMso'),
        (['out', 'retval'], POINTER(BSTR), 'Supertip')
    ),
    COMMETHOD(
        [dispid(1610809380)],
        HRESULT,
        'GetImageMso',
        (['in'], BSTR, 'idMso'),
        (['in'], c_int, 'Width'),
        (['in'], c_int, 'Height'),
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)),
            'Image',
        )
    ),
    COMMETHOD(
        [dispid(1610809381)],
        HRESULT,
        'CommitRenderingTransaction',
        (['in'], c_int, 'hwnd')
    ),
]

################################################################
# code template for _CommandBars implementation
# class _CommandBars_Impl(object):
#     @property
#     def ActionControl(self):
#         '-no docstring-'
#         #return ppcbc
#
#     @property
#     def ActiveMenuBar(self):
#         '-no docstring-'
#         #return ppcb
#
#     def Add(self, Name, Position, MenuBar, Temporary):
#         '-no docstring-'
#         #return ppcb
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcToolbars
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfDisplayTooltips
#     def _set(self, pvarfDisplayTooltips):
#         '-no docstring-'
#     DisplayTooltips = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfDisplayKeys
#     def _set(self, pvarfDisplayKeys):
#         '-no docstring-'
#     DisplayKeysInTooltips = property(_get, _set, doc = _set.__doc__)
#
#     def FindControl(self, Type, Id, Tag, Visible):
#         '-no docstring-'
#         #return ppcbc
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppcb
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfLargeButtons
#     def _set(self, pvarfLargeButtons):
#         '-no docstring-'
#     LargeButtons = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pma
#     def _set(self, pma):
#         '-no docstring-'
#     MenuAnimationStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def ReleaseFocus(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def IdsString(self, ids):
#         '-no docstring-'
#         #return pbstrName, pcch
#
#     @property
#     def TmcGetName(self, tmc):
#         '-no docstring-'
#         #return pbstrName, pcch
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfAdaptiveMenus
#     def _set(self, pvarfAdaptiveMenus):
#         '-no docstring-'
#     AdaptiveMenus = property(_get, _set, doc = _set.__doc__)
#
#     def FindControls(self, Type, Id, Tag, Visible):
#         '-no docstring-'
#         #return ppcbcs
#
#     def AddEx(self, TbidOrName, Position, MenuBar, Temporary, TbtrProtection):
#         '-no docstring-'
#         #return ppcb
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfDisplayFonts
#     def _set(self, pvarfDisplayFonts):
#         '-no docstring-'
#     DisplayFonts = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfDisableCustomize
#     def _set(self, pvarfDisableCustomize):
#         '-no docstring-'
#     DisableCustomize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfDisableAskAQuestionDropdown
#     def _set(self, pvarfDisableAskAQuestionDropdown):
#         '-no docstring-'
#     DisableAskAQuestionDropdown = property(_get, _set, doc = _set.__doc__)
#
#     def ExecuteMso(self, idMso):
#         '-no docstring-'
#         #return 
#
#     def GetEnabledMso(self, idMso):
#         '-no docstring-'
#         #return Enabled
#
#     def GetVisibleMso(self, idMso):
#         '-no docstring-'
#         #return Visible
#
#     def GetPressedMso(self, idMso):
#         '-no docstring-'
#         #return Pressed
#
#     def GetLabelMso(self, idMso):
#         '-no docstring-'
#         #return Label
#
#     def GetScreentipMso(self, idMso):
#         '-no docstring-'
#         #return Screentip
#
#     def GetSupertipMso(self, idMso):
#         '-no docstring-'
#         #return Supertip
#
#     def GetImageMso(self, idMso, Width, Height):
#         '-no docstring-'
#         #return Image
#
#     def CommitRenderingTransaction(self, hwnd):
#         '-no docstring-'
#         #return 
#

IMsoTickLabels._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(1610743809)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'ppval')
    ),
    COMMETHOD(
        [dispid(1610743811), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'NumberFormat',
        (['out', 'retval'], POINTER(BSTR), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'NumberFormat',
        (['in'], BSTR, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'NumberFormatLinked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'NumberFormatLinked',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'NumberFormatLocal',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propput'],
        HRESULT,
        'NumberFormatLocal',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(XlTickLabelOrientation), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propput'],
        HRESULT,
        'Orientation',
        (['in'], XlTickLabelOrientation, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743820)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743821), 'propget'],
        HRESULT,
        'ReadingOrder',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743821), 'propput'],
        HRESULT,
        'ReadingOrder',
        (['in'], c_int, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743823), 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743823), 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743825), 'propget'],
        HRESULT,
        'Depth',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propget'],
        HRESULT,
        'Offset',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propput'],
        HRESULT,
        'Offset',
        (['in'], c_int, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propget'],
        HRESULT,
        'Alignment',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propput'],
        HRESULT,
        'Alignment',
        (['in'], c_int, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743830), 'propget'],
        HRESULT,
        'MultiLevel',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743830), 'propput'],
        HRESULT,
        'MultiLevel',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(1610743832), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for IMsoTickLabels implementation
# class IMsoTickLabels_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppval
#
#     def Delete(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     NumberFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     NumberFormatLinked = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     NumberFormatLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     ReadingOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Depth(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Offset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     Alignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     MultiLevel = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#


class ICommandBarsEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{55F88892-7708-11D1-ACEB-006008961DA5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def OnUpdate(self) -> hints.Hresult: ...


ICommandBarsEvents._methods_ = [
    COMMETHOD([dispid(1)], None, 'OnUpdate'),
]

################################################################
# code template for ICommandBarsEvents implementation
# class ICommandBarsEvents_Impl(object):
#     def OnUpdate(self):
#         '-no docstring-'
#         #return 
#

Adjustments._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(c_float), 'Val')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['in'], c_float, 'Val')
    ),
]

################################################################
# code template for Adjustments implementation
# class Adjustments_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def _get(self, Index):
#         '-no docstring-'
#         #return Val
#     def _set(self, Index, Val):
#         '-no docstring-'
#     Item = property(_get, _set, doc = _set.__doc__)
#


class _CommandBarsEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0352-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        def OnUpdate(self) -> hints.Incomplete: ...


_CommandBarsEvents._disp_methods_ = [
    DISPMETHOD([dispid(1)], None, 'OnUpdate'),
]

GlowFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Radius',
        (['out', 'retval'], POINTER(c_float), 'Radius')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'Radius',
        (['in'], c_float, 'Radius')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'Color')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Transparency',
        (['out', 'retval'], POINTER(c_float), 'Transparency')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'Transparency',
        (['in'], c_float, 'Transparency')
    ),
]

################################################################
# code template for GlowFormat implementation
# class GlowFormat_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return Radius
#     def _set(self, Radius):
#         '-no docstring-'
#     Radius = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Color(self):
#         '-no docstring-'
#         #return Color
#
#     def _get(self):
#         '-no docstring-'
#         #return Transparency
#     def _set(self, Transparency):
#         '-no docstring-'
#     Transparency = property(_get, _set, doc = _set.__doc__)
#


class DocumentProperty(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2DF8D04E-5BFA-101B-BDE5-00AA0044DE52}')
    _idlflags_ = []

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Hresult: ...
        Parent = hints.normal_property(_get_Parent)
        def Delete(self) -> hints.Hresult: ...
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstrRetVal: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Value(self) -> hints.Incomplete: ...
        def _set_Value(self, pvargRetVal: hints.Incomplete) -> hints.Hresult: ...
        Value = hints.normal_property(_get_Value, _set_Value)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, ptypeRetVal: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_LinkToContent(self) -> hints.Incomplete: ...
        def _set_LinkToContent(self, pfLinkRetVal: hints.Incomplete) -> hints.Hresult: ...
        LinkToContent = hints.normal_property(_get_LinkToContent, _set_LinkToContent)
        def _get_LinkSource(self) -> hints.Incomplete: ...
        def _set_LinkSource(self, pbstrSourceRetVal: hints.Incomplete) -> hints.Hresult: ...
        LinkSource = hints.normal_property(_get_LinkSource, _set_LinkSource)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


DocumentProperty._methods_ = [
    COMMETHOD(['propget'], POINTER(IDispatch), 'Parent'),
    COMMETHOD([], HRESULT, 'Delete'),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Name',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(BSTR), 'pbstrRetVal')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Name',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], BSTR, 'pbstrRetVal')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Value',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(VARIANT), 'pvargRetVal')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Value',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], VARIANT, 'pvargRetVal')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Type',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(MsoDocProperties), 'ptypeRetVal')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Type',
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['in'], MsoDocProperties, 'ptypeRetVal')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'LinkToContent',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfLinkRetVal')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'LinkToContent',
        (['in'], VARIANT_BOOL, 'pfLinkRetVal')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'LinkSource',
        (['out', 'retval'], POINTER(BSTR), 'pbstrSourceRetVal')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'LinkSource',
        (['in'], BSTR, 'pbstrSourceRetVal')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
]

################################################################
# code template for DocumentProperty implementation
# class DocumentProperty_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return pbstrRetVal
#     def _set(self, lcid, pbstrRetVal):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return pvargRetVal
#     def _set(self, lcid, pvargRetVal):
#         '-no docstring-'
#     Value = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, lcid):
#         '-no docstring-'
#         #return ptypeRetVal
#     def _set(self, lcid, ptypeRetVal):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfLinkRetVal
#     def _set(self, pfLinkRetVal):
#         '-no docstring-'
#     LinkToContent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrSourceRetVal
#     def _set(self, pbstrSourceRetVal):
#         '-no docstring-'
#     LinkSource = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#

SignatureSetup._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'ReadOnly',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarf')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'SignatureProvider',
        (['out', 'retval'], POINTER(BSTR), 'pbstrSigProv')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'SuggestedSigner',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'SuggestedSigner',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'SuggestedSignerLine2',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'SuggestedSignerLine2',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'SuggestedSignerEmail',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'SuggestedSignerEmail',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'SigningInstructions',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'SigningInstructions',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'AllowComments',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarf')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'AllowComments',
        (['in'], VARIANT_BOOL, 'pvarf')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'ShowSignDate',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarf')
    ),
    COMMETHOD(
        [dispid(9), 'propput'],
        HRESULT,
        'ShowSignDate',
        (['in'], VARIANT_BOOL, 'pvarf')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'AdditionalXml',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(10), 'propput'],
        HRESULT,
        'AdditionalXml',
        (['in'], BSTR, 'pbstr')
    ),
]

################################################################
# code template for SignatureSetup implementation
# class SignatureSetup_Impl(object):
#     @property
#     def ReadOnly(self):
#         '-no docstring-'
#         #return pvarf
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def SignatureProvider(self):
#         '-no docstring-'
#         #return pbstrSigProv
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SuggestedSigner = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SuggestedSignerLine2 = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SuggestedSignerEmail = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SigningInstructions = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarf
#     def _set(self, pvarf):
#         '-no docstring-'
#     AllowComments = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarf
#     def _set(self, pvarf):
#         '-no docstring-'
#     ShowSignDate = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     AdditionalXml = property(_get, _set, doc = _set.__doc__)
#


class PickerResult(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03E4-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_DisplayName(self) -> hints.Incomplete: ...
        def _set_DisplayName(self, DisplayName: hints.Incomplete) -> hints.Hresult: ...
        DisplayName = hints.normal_property(_get_DisplayName, _set_DisplayName)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_SIPId(self) -> hints.Incomplete: ...
        def _set_SIPId(self, SIPId: hints.Incomplete) -> hints.Hresult: ...
        SIPId = hints.normal_property(_get_SIPId, _set_SIPId)
        def _get_ItemData(self) -> hints.Incomplete: ...
        def _set_ItemData(self, ItemData: hints.Incomplete) -> hints.Hresult: ...
        ItemData = hints.normal_property(_get_ItemData, _set_ItemData)
        def _get_SubItems(self) -> hints.Incomplete: ...
        def _set_SubItems(self, SubItems: hints.Incomplete) -> hints.Hresult: ...
        SubItems = hints.normal_property(_get_SubItems, _set_SubItems)
        def _get_DuplicateResults(self) -> hints.Incomplete: ...
        DuplicateResults = hints.normal_property(_get_DuplicateResults)
        def _get_Fields(self) -> 'PickerFields': ...
        def _set_Fields(self, Fields: hints.Incomplete) -> hints.Hresult: ...
        Fields = hints.normal_property(_get_Fields, _set_Fields)


PickerResults._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(PickerResult)), 'Result')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Id'),
        (['in'], BSTR, 'DisplayName'),
        (['in'], BSTR, 'Type'),
        (['in', 'optional'], BSTR, 'SIPId', ''),
        (['in', 'optional'], VARIANT, 'ItemData'),
        (['in', 'optional'], VARIANT, 'SubItems'),
        (['out', 'retval'], POINTER(POINTER(PickerResult)), 'Result')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
]

################################################################
# code template for PickerResults implementation
# class PickerResults_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return Result
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Add(self, Id, DisplayName, Type, SIPId, ItemData, SubItems):
#         '-no docstring-'
#         #return Result
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#

ReflectionFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoReflectionType), 'Type')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'Type',
        (['in'], MsoReflectionType, 'Type')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Transparency',
        (['out', 'retval'], POINTER(c_float), 'Transparency')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Transparency',
        (['in'], c_float, 'Transparency')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Size',
        (['out', 'retval'], POINTER(c_float), 'Size')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'Size',
        (['in'], c_float, 'Size')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Offset',
        (['out', 'retval'], POINTER(c_float), 'Offset')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'Offset',
        (['in'], c_float, 'Offset')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Blur',
        (['out', 'retval'], POINTER(c_float), 'Blur')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'Blur',
        (['in'], c_float, 'Blur')
    ),
]

################################################################
# code template for ReflectionFormat implementation
# class ReflectionFormat_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Transparency
#     def _set(self, Transparency):
#         '-no docstring-'
#     Transparency = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Size
#     def _set(self, Size):
#         '-no docstring-'
#     Size = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Offset
#     def _set(self, Offset):
#         '-no docstring-'
#     Offset = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Blur
#     def _set(self, Blur):
#         '-no docstring-'
#     Blur = property(_get, _set, doc = _set.__doc__)
#


class MsoDebugOptions_UTManager(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0389-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_UnitTests(self) -> 'MsoDebugOptions_UTs': ...
        UnitTests = hints.normal_property(_get_UnitTests)
        def NotifyStartOfTestSuiteRun(self) -> hints.Hresult: ...
        def NotifyEndOfTestSuiteRun(self) -> hints.Hresult: ...
        def _get_ReportErrors(self) -> hints.Incomplete: ...
        def _set_ReportErrors(self, pfReportErrors: hints.Incomplete) -> hints.Hresult: ...
        ReportErrors = hints.normal_property(_get_ReportErrors, _set_ReportErrors)


class MsoDebugOptions_UTs(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C038A-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'MsoDebugOptions_UT': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def GetUnitTestsInCollection(self, bstrCollectionName: hints.Incomplete) -> 'MsoDebugOptions_UTs': ...
        def GetUnitTest(self, bstrCollectionName: hints.Incomplete, bstrUnitTestName: hints.Incomplete) -> 'MsoDebugOptions_UT': ...
        def GetMatchingUnitTestsInCollection(self, bstrCollectionName: hints.Incomplete, bstrUnitTestNameFilter: hints.Incomplete) -> 'MsoDebugOptions_UTs': ...


MsoDebugOptions_UTManager._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'UnitTests',
        (
            ['out', 'retval'],
            POINTER(POINTER(MsoDebugOptions_UTs)),
            'ppMsoUnitTests',
        )
    ),
    COMMETHOD([dispid(1)], HRESULT, 'NotifyStartOfTestSuiteRun'),
    COMMETHOD([dispid(2)], HRESULT, 'NotifyEndOfTestSuiteRun'),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'ReportErrors',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfReportErrors')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'ReportErrors',
        (['in'], VARIANT_BOOL, 'pfReportErrors')
    ),
]

################################################################
# code template for MsoDebugOptions_UTManager implementation
# class MsoDebugOptions_UTManager_Impl(object):
#     @property
#     def UnitTests(self):
#         '-no docstring-'
#         #return ppMsoUnitTests
#
#     def NotifyStartOfTestSuiteRun(self):
#         '-no docstring-'
#         #return 
#
#     def NotifyEndOfTestSuiteRun(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pfReportErrors
#     def _set(self, pfReportErrors):
#         '-no docstring-'
#     ReportErrors = property(_get, _set, doc = _set.__doc__)
#

IMsoLegend._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'RHS')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(146), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'RHS')
    ),
    COMMETHOD(
        [dispid(173)],
        HRESULT,
        'LegendEntries',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(133), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlLegendPosition), 'RHS')
    ),
    COMMETHOD(
        [dispid(133), 'propput'],
        HRESULT,
        'Position',
        (['in'], XlLegendPosition, 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(111)],
        HRESULT,
        'Clear',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1663), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(126), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        [dispid(122), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1525), 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(2418), 'propget'],
        HRESULT,
        'IncludeInLayout',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(2418), 'propput'],
        HRESULT,
        'IncludeInLayout',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743834), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(253)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(254)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoLegend implementation
# class IMsoLegend_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return RHS
#
#     def LegendEntries(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def Clear(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     IncludeInLayout = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#

PickerResult._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'Id')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'DisplayName',
        (['out', 'retval'], POINTER(BSTR), 'DisplayName')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'DisplayName',
        (['in'], BSTR, 'DisplayName')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(BSTR), 'Type')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'Type',
        (['in'], BSTR, 'Type')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'SIPId',
        (['out', 'retval'], POINTER(BSTR), 'SIPId')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'SIPId',
        (['in'], BSTR, 'SIPId')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'ItemData',
        (['out', 'retval'], POINTER(VARIANT), 'ItemData')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'ItemData',
        (['in'], VARIANT, 'ItemData')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'SubItems',
        (['out', 'retval'], POINTER(VARIANT), 'SubItems')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'SubItems',
        (['in'], VARIANT, 'SubItems')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'DuplicateResults',
        (['out', 'retval'], POINTER(VARIANT), 'DuplicateResults')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'Fields',
        (['out', 'retval'], POINTER(POINTER(PickerFields)), 'Fields')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'Fields',
        (['in'], POINTER(PickerFields), 'Fields')
    ),
]

################################################################
# code template for PickerResult implementation
# class PickerResult_Impl(object):
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return Id
#
#     def _get(self):
#         '-no docstring-'
#         #return DisplayName
#     def _set(self, DisplayName):
#         '-no docstring-'
#     DisplayName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SIPId
#     def _set(self, SIPId):
#         '-no docstring-'
#     SIPId = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ItemData
#     def _set(self, ItemData):
#         '-no docstring-'
#     ItemData = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SubItems
#     def _set(self, SubItems):
#         '-no docstring-'
#     SubItems = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DuplicateResults(self):
#         '-no docstring-'
#         #return DuplicateResults
#
#     def _get(self):
#         '-no docstring-'
#         #return Fields
#     def _set(self, Fields):
#         '-no docstring-'
#     Fields = property(_get, _set, doc = _set.__doc__)
#


class _CustomXMLParts(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB09-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, Index: hints.Incomplete) -> hints.Annotated['_CustomXMLPart', hints.FirstComItfOf['CustomXMLPart']]: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, XML: hints.Incomplete = ..., SchemaCollection: hints.Incomplete = ...) -> hints.Annotated['_CustomXMLPart', hints.FirstComItfOf['CustomXMLPart']]: ...
        def SelectByID(self, Id: hints.Incomplete) -> hints.Annotated['_CustomXMLPart', hints.FirstComItfOf['CustomXMLPart']]: ...
        def SelectByNamespace(self, NamespaceURI: hints.Incomplete) -> hints.Annotated['_CustomXMLParts', hints.FirstComItfOf['CustomXMLParts']]: ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class CustomXMLPart(CoClass):
    _reg_clsid_ = GUID('{000CDB08-0000-0000-C000-000000000046}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}', 2, 8)


class _CustomXMLPart(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB05-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_DocumentElement(self) -> 'CustomXMLNode': ...
        DocumentElement = hints.normal_property(_get_DocumentElement)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_NamespaceURI(self) -> hints.Incomplete: ...
        NamespaceURI = hints.normal_property(_get_NamespaceURI)
        def _get_SchemaCollection(self) -> hints.Annotated['_CustomXMLSchemaCollection', hints.FirstComItfOf['CustomXMLSchemaCollection']]: ...
        def _set_SchemaCollection(self, ppSchemaCollection: hints.Incomplete) -> hints.Hresult: ...
        SchemaCollection = hints.normal_property(_get_SchemaCollection, _set_SchemaCollection)
        def _get_NamespaceManager(self) -> 'CustomXMLPrefixMappings': ...
        NamespaceManager = hints.normal_property(_get_NamespaceManager)
        def _get_XML(self) -> hints.Incomplete: ...
        XML = hints.normal_property(_get_XML)
        def AddNode(self, Parent: hints.Incomplete, Name: hints.Incomplete = ..., NamespaceURI: hints.Incomplete = ..., NextSibling: hints.Incomplete = ..., NodeType: hints.Incomplete = ..., NodeValue: hints.Incomplete = ...) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def Load(self, FilePath: hints.Incomplete) -> hints.Incomplete: ...
        def LoadXML(self, XML: hints.Incomplete) -> hints.Incomplete: ...
        def SelectNodes(self, XPath: hints.Incomplete) -> 'CustomXMLNodes': ...
        def SelectSingleNode(self, XPath: hints.Incomplete) -> 'CustomXMLNode': ...
        def _get_Errors(self) -> 'CustomXMLValidationErrors': ...
        Errors = hints.normal_property(_get_Errors)
        def _get_BuiltIn(self) -> hints.Incomplete: ...
        BuiltIn = hints.normal_property(_get_BuiltIn)


class _CustomXMLPartEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB07-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        def NodeAfterInsert(self, NewNode: hints.Incomplete, InUndoRedo: hints.Incomplete) -> hints.Incomplete: ...
        def NodeAfterDelete(self, OldNode: hints.Incomplete, OldParentNode: hints.Incomplete, OldNextSibling: hints.Incomplete, InUndoRedo: hints.Incomplete) -> hints.Incomplete: ...
        def NodeAfterReplace(self, OldNode: hints.Incomplete, NewNode: hints.Incomplete, InUndoRedo: hints.Incomplete) -> hints.Incomplete: ...


CustomXMLPart._com_interfaces_ = [_CustomXMLPart]
CustomXMLPart._outgoing_interfaces_ = [_CustomXMLPartEvents]


class CustomXMLParts(CoClass):
    _reg_clsid_ = GUID('{000CDB0C-0000-0000-C000-000000000046}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}', 2, 8)


class _CustomXMLPartsEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB0B-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        def PartAfterAdd(self, NewPart: hints.Incomplete) -> hints.Incomplete: ...
        def PartBeforeDelete(self, OldPart: hints.Incomplete) -> hints.Incomplete: ...
        def PartAfterLoad(self, Part: hints.Incomplete) -> hints.Incomplete: ...


CustomXMLParts._com_interfaces_ = [_CustomXMLParts]
CustomXMLParts._outgoing_interfaces_ = [_CustomXMLPartsEvents]

_CustomXMLParts._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'plCount')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(CustomXMLPart)), 'ppPart')
    ),
    COMMETHOD(
        [dispid(1610809347)],
        HRESULT,
        'Add',
        (['in', 'optional'], BSTR, 'XML', ''),
        (['in', 'optional'], VARIANT, 'SchemaCollection'),
        (['out', 'retval'], POINTER(POINTER(CustomXMLPart)), 'ppPart')
    ),
    COMMETHOD(
        [dispid(1610809348)],
        HRESULT,
        'SelectByID',
        (['in'], BSTR, 'Id'),
        (['out', 'retval'], POINTER(POINTER(CustomXMLPart)), 'ppPart')
    ),
    COMMETHOD(
        [dispid(1610809349)],
        HRESULT,
        'SelectByNamespace',
        (['in'], BSTR, 'NamespaceURI'),
        (['out', 'retval'], POINTER(POINTER(CustomXMLParts)), 'ppParts')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for _CustomXMLParts implementation
# class _CustomXMLParts_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return plCount
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppPart
#
#     def Add(self, XML, SchemaCollection):
#         '-no docstring-'
#         #return ppPart
#
#     def SelectByID(self, Id):
#         '-no docstring-'
#         #return ppPart
#
#     def SelectByNamespace(self, NamespaceURI):
#         '-no docstring-'
#         #return ppParts
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class ICustomXMLPartsEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB0A-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def PartAfterAdd(self, NewPart: hints.Incomplete) -> hints.Hresult: ...
        def PartBeforeDelete(self, OldPart: hints.Incomplete) -> hints.Hresult: ...
        def PartAfterLoad(self, Part: hints.Incomplete) -> hints.Hresult: ...


ICustomXMLPartsEvents._methods_ = [
    COMMETHOD(
        [dispid(1)],
        None,
        'PartAfterAdd',
        (['in'], POINTER(CustomXMLPart), 'NewPart')
    ),
    COMMETHOD(
        [dispid(2)],
        None,
        'PartBeforeDelete',
        (['in'], POINTER(CustomXMLPart), 'OldPart')
    ),
    COMMETHOD(
        [dispid(3)],
        None,
        'PartAfterLoad',
        (['in'], POINTER(CustomXMLPart), 'Part')
    ),
]

################################################################
# code template for ICustomXMLPartsEvents implementation
# class ICustomXMLPartsEvents_Impl(object):
#     def PartAfterAdd(self, NewPart):
#         '-no docstring-'
#         #return 
#
#     def PartBeforeDelete(self, OldPart):
#         '-no docstring-'
#         #return 
#
#     def PartAfterLoad(self, Part):
#         '-no docstring-'
#         #return 
#


class WebComponentWindowExternal(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD101-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_InterfaceVersion(self) -> hints.Incomplete: ...
        InterfaceVersion = hints.normal_property(_get_InterfaceVersion)
        def _get_ApplicationName(self) -> hints.Incomplete: ...
        ApplicationName = hints.normal_property(_get_ApplicationName)
        def _get_ApplicationVersion(self) -> hints.Incomplete: ...
        ApplicationVersion = hints.normal_property(_get_ApplicationVersion)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def CloseWindow(self) -> hints.Hresult: ...
        def _get_WebComponent(self) -> 'WebComponent': ...
        WebComponent = hints.normal_property(_get_WebComponent)


class WebComponent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD100-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Shape(self) -> hints.Incomplete: ...
        Shape = hints.normal_property(_get_Shape)
        def _get_URL(self) -> hints.Incomplete: ...
        def _set_URL(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        URL = hints.normal_property(_get_URL, _set_URL)
        def _get_HTML(self) -> hints.Incomplete: ...
        def _set_HTML(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        HTML = hints.normal_property(_get_HTML, _set_HTML)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def SetPlaceHolderGraphic(self, PlaceHolderGraphic: hints.Incomplete) -> hints.Hresult: ...
        def Commit(self) -> hints.Hresult: ...
        def Revert(self) -> hints.Hresult: ...


WebComponentWindowExternal._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'InterfaceVersion',
        (['out', 'retval'], POINTER(c_int), 'RetValue')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'ApplicationName',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'ApplicationVersion',
        (['out', 'retval'], POINTER(c_int), 'RetValue')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RetValue')
    ),
    COMMETHOD([dispid(5)], HRESULT, 'CloseWindow'),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'WebComponent',
        (['out', 'retval'], POINTER(POINTER(WebComponent)), 'RetValue')
    ),
]

################################################################
# code template for WebComponentWindowExternal implementation
# class WebComponentWindowExternal_Impl(object):
#     @property
#     def InterfaceVersion(self):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def ApplicationName(self):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def ApplicationVersion(self):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return RetValue
#
#     def CloseWindow(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def WebComponent(self):
#         '-no docstring-'
#         #return RetValue
#

CustomXMLNode._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Attributes',
        (['out', 'retval'], POINTER(POINTER(CustomXMLNodes)), 'ppAttributes')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'BaseName',
        (['out', 'retval'], POINTER(BSTR), 'pbstrBaseName')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'ChildNodes',
        (['out', 'retval'], POINTER(POINTER(CustomXMLNodes)), 'ppChildNodes')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'FirstChild',
        (['out', 'retval'], POINTER(POINTER(CustomXMLNode)), 'ppFirstChild')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'LastChild',
        (['out', 'retval'], POINTER(POINTER(CustomXMLNode)), 'ppLastChild')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propget'],
        HRESULT,
        'NamespaceURI',
        (['out', 'retval'], POINTER(BSTR), 'pbstrNamespaceURI')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propget'],
        HRESULT,
        'NextSibling',
        (['out', 'retval'], POINTER(POINTER(CustomXMLNode)), 'ppNextSibling')
    ),
    COMMETHOD(
        [dispid(1610809352), 'propget'],
        HRESULT,
        'NodeType',
        (['out', 'retval'], POINTER(MsoCustomXMLNodeType), 'pNodeType')
    ),
    COMMETHOD(
        [dispid(1610809353), 'propget'],
        HRESULT,
        'NodeValue',
        (['out', 'retval'], POINTER(BSTR), 'pbstrNodeValue')
    ),
    COMMETHOD(
        [dispid(1610809353), 'propput'],
        HRESULT,
        'NodeValue',
        (['in'], BSTR, 'pbstrNodeValue')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propget'],
        HRESULT,
        'OwnerDocument',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispDoc')
    ),
    COMMETHOD(
        [dispid(1610809356), 'propget'],
        HRESULT,
        'OwnerPart',
        (['out', 'retval'], POINTER(POINTER(CustomXMLPart)), 'ppOwnerPart')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propget'],
        HRESULT,
        'PreviousSibling',
        (
            ['out', 'retval'],
            POINTER(POINTER(CustomXMLNode)),
            'ppPreviousSibling',
        )
    ),
    COMMETHOD(
        [dispid(1610809358), 'propget'],
        HRESULT,
        'ParentNode',
        (['out', 'retval'], POINTER(POINTER(CustomXMLNode)), 'ppParentNode')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'pbstrText')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'pbstrText')
    ),
    COMMETHOD(
        [dispid(1610809361), 'propget'],
        HRESULT,
        'XPath',
        (['out', 'retval'], POINTER(BSTR), 'pbstrXPath')
    ),
    COMMETHOD(
        [dispid(1610809362), 'propget'],
        HRESULT,
        'XML',
        (['out', 'retval'], POINTER(BSTR), 'pbstrXML')
    ),
    COMMETHOD(
        [dispid(1610809363)],
        HRESULT,
        'AppendChildNode',
        (['in', 'optional'], BSTR, 'Name', ''),
        (['in', 'optional'], BSTR, 'NamespaceURI', ''),
        (['in', 'optional'], MsoCustomXMLNodeType, 'NodeType', 1),
        (['in', 'optional'], BSTR, 'NodeValue', '')
    ),
    COMMETHOD(
        [dispid(1610809364)],
        HRESULT,
        'AppendChildSubtree',
        (['in'], BSTR, 'XML')
    ),
    COMMETHOD([dispid(1610809365)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(1610809366)],
        HRESULT,
        'HasChildNodes',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfHasChildNodes')
    ),
    COMMETHOD(
        [dispid(1610809367)],
        HRESULT,
        'InsertNodeBefore',
        (['in', 'optional'], BSTR, 'Name', ''),
        (['in', 'optional'], BSTR, 'NamespaceURI', ''),
        (['in', 'optional'], MsoCustomXMLNodeType, 'NodeType', 1),
        (['in', 'optional'], BSTR, 'NodeValue', ''),
        (['in', 'optional'], POINTER(CustomXMLNode), 'NextSibling', 0)
    ),
    COMMETHOD(
        [dispid(1610809368)],
        HRESULT,
        'InsertSubtreeBefore',
        (['in'], BSTR, 'XML'),
        (['in', 'optional'], POINTER(CustomXMLNode), 'NextSibling', 0)
    ),
    COMMETHOD(
        [dispid(1610809369)],
        HRESULT,
        'RemoveChild',
        (['in'], POINTER(CustomXMLNode), 'Child')
    ),
    COMMETHOD(
        [dispid(1610809370)],
        HRESULT,
        'ReplaceChildNode',
        (['in'], POINTER(CustomXMLNode), 'OldNode'),
        (['in', 'optional'], BSTR, 'Name', ''),
        (['in', 'optional'], BSTR, 'NamespaceURI', ''),
        (['in', 'optional'], MsoCustomXMLNodeType, 'NodeType', 1),
        (['in', 'optional'], BSTR, 'NodeValue', '')
    ),
    COMMETHOD(
        [dispid(1610809371)],
        HRESULT,
        'ReplaceChildSubtree',
        (['in'], BSTR, 'XML'),
        (['in'], POINTER(CustomXMLNode), 'OldNode')
    ),
    COMMETHOD(
        [dispid(1610809372)],
        HRESULT,
        'SelectNodes',
        (['in'], BSTR, 'XPath'),
        (['out', 'retval'], POINTER(POINTER(CustomXMLNodes)), 'ppNodes')
    ),
    COMMETHOD(
        [dispid(1610809373)],
        HRESULT,
        'SelectSingleNode',
        (['in'], BSTR, 'XPath'),
        (['out', 'retval'], POINTER(POINTER(CustomXMLNode)), 'ppNode')
    ),
]

################################################################
# code template for CustomXMLNode implementation
# class CustomXMLNode_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def Attributes(self):
#         '-no docstring-'
#         #return ppAttributes
#
#     @property
#     def BaseName(self):
#         '-no docstring-'
#         #return pbstrBaseName
#
#     @property
#     def ChildNodes(self):
#         '-no docstring-'
#         #return ppChildNodes
#
#     @property
#     def FirstChild(self):
#         '-no docstring-'
#         #return ppFirstChild
#
#     @property
#     def LastChild(self):
#         '-no docstring-'
#         #return ppLastChild
#
#     @property
#     def NamespaceURI(self):
#         '-no docstring-'
#         #return pbstrNamespaceURI
#
#     @property
#     def NextSibling(self):
#         '-no docstring-'
#         #return ppNextSibling
#
#     @property
#     def NodeType(self):
#         '-no docstring-'
#         #return pNodeType
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrNodeValue
#     def _set(self, pbstrNodeValue):
#         '-no docstring-'
#     NodeValue = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def OwnerDocument(self):
#         '-no docstring-'
#         #return ppdispDoc
#
#     @property
#     def OwnerPart(self):
#         '-no docstring-'
#         #return ppOwnerPart
#
#     @property
#     def PreviousSibling(self):
#         '-no docstring-'
#         #return ppPreviousSibling
#
#     @property
#     def ParentNode(self):
#         '-no docstring-'
#         #return ppParentNode
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrText
#     def _set(self, pbstrText):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def XPath(self):
#         '-no docstring-'
#         #return pbstrXPath
#
#     @property
#     def XML(self):
#         '-no docstring-'
#         #return pbstrXML
#
#     def AppendChildNode(self, Name, NamespaceURI, NodeType, NodeValue):
#         '-no docstring-'
#         #return 
#
#     def AppendChildSubtree(self, XML):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def HasChildNodes(self):
#         '-no docstring-'
#         #return pfHasChildNodes
#
#     def InsertNodeBefore(self, Name, NamespaceURI, NodeType, NodeValue, NextSibling):
#         '-no docstring-'
#         #return 
#
#     def InsertSubtreeBefore(self, XML, NextSibling):
#         '-no docstring-'
#         #return 
#
#     def RemoveChild(self, Child):
#         '-no docstring-'
#         #return 
#
#     def ReplaceChildNode(self, OldNode, Name, NamespaceURI, NodeType, NodeValue):
#         '-no docstring-'
#         #return 
#
#     def ReplaceChildSubtree(self, XML, OldNode):
#         '-no docstring-'
#         #return 
#
#     def SelectNodes(self, XPath):
#         '-no docstring-'
#         #return ppNodes
#
#     def SelectSingleNode(self, XPath):
#         '-no docstring-'
#         #return ppNode
#


class MetaProperty(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C038F-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Value(self) -> hints.Incomplete: ...
        def _set_Value(self, pvarValue: hints.Incomplete) -> hints.Hresult: ...
        Value = hints.normal_property(_get_Value, _set_Value)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_IsReadOnly(self) -> hints.Incomplete: ...
        IsReadOnly = hints.normal_property(_get_IsReadOnly)
        def _get_IsRequired(self) -> hints.Incomplete: ...
        IsRequired = hints.normal_property(_get_IsRequired)
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def Validate(self) -> hints.Incomplete: ...
        def _get_ValidationError(self) -> hints.Incomplete: ...
        ValidationError = hints.normal_property(_get_ValidationError)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)



MetaProperty._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(VARIANT), 'pvarValue')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Value',
        (['in'], VARIANT, 'pvarValue')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'pbstrID')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'IsReadOnly',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfReadOnly')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'IsRequired',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfRequired')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoMetaPropertyType), 'ptype')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Validate',
        (['out', 'retval'], POINTER(BSTR), 'pbstrError')
    ),
    COMMETHOD(
        [dispid(7), 'hidden', 'propget'],
        HRESULT,
        'ValidationError',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for MetaProperty implementation
# class MetaProperty_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pvarValue
#     def _set(self, pvarValue):
#         '-no docstring-'
#     Value = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pbstrID
#
#     @property
#     def IsReadOnly(self):
#         '-no docstring-'
#         #return pfReadOnly
#
#     @property
#     def IsRequired(self):
#         '-no docstring-'
#         #return pfRequired
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return ptype
#
#     def Validate(self):
#         '-no docstring-'
#         #return pbstrError
#
#     @property
#     def ValidationError(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class CalloutFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0311-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def AutomaticLength(self) -> hints.Hresult: ...
        def CustomDrop(self, Drop: hints.Incomplete) -> hints.Hresult: ...
        def CustomLength(self, Length: hints.Incomplete) -> hints.Hresult: ...
        def PresetDrop(self, DropType: hints.Incomplete) -> hints.Hresult: ...
        def _get_Accent(self) -> hints.Incomplete: ...
        def _set_Accent(self, Accent: hints.Incomplete) -> hints.Hresult: ...
        Accent = hints.normal_property(_get_Accent, _set_Accent)
        def _get_Angle(self) -> hints.Incomplete: ...
        def _set_Angle(self, Angle: hints.Incomplete) -> hints.Hresult: ...
        Angle = hints.normal_property(_get_Angle, _set_Angle)
        def _get_AutoAttach(self) -> hints.Incomplete: ...
        def _set_AutoAttach(self, AutoAttach: hints.Incomplete) -> hints.Hresult: ...
        AutoAttach = hints.normal_property(_get_AutoAttach, _set_AutoAttach)
        def _get_AutoLength(self) -> hints.Incomplete: ...
        AutoLength = hints.normal_property(_get_AutoLength)
        def _get_Border(self) -> hints.Incomplete: ...
        def _set_Border(self, Border: hints.Incomplete) -> hints.Hresult: ...
        Border = hints.normal_property(_get_Border, _set_Border)
        def _get_Drop(self) -> hints.Incomplete: ...
        Drop = hints.normal_property(_get_Drop)
        def _get_DropType(self) -> hints.Incomplete: ...
        DropType = hints.normal_property(_get_DropType)
        def _get_Gap(self) -> hints.Incomplete: ...
        def _set_Gap(self, Gap: hints.Incomplete) -> hints.Hresult: ...
        Gap = hints.normal_property(_get_Gap, _set_Gap)
        def _get_Length(self) -> hints.Incomplete: ...
        Length = hints.normal_property(_get_Length)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)


CalloutFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'AutomaticLength'),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'CustomDrop',
        (['in'], c_float, 'Drop')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'CustomLength',
        (['in'], c_float, 'Length')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'PresetDrop',
        (['in'], MsoCalloutDropType, 'DropType')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Accent',
        (['out', 'retval'], POINTER(MsoTriState), 'Accent')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'Accent',
        (['in'], MsoTriState, 'Accent')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Angle',
        (['out', 'retval'], POINTER(MsoCalloutAngleType), 'Angle')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'Angle',
        (['in'], MsoCalloutAngleType, 'Angle')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'AutoAttach',
        (['out', 'retval'], POINTER(MsoTriState), 'AutoAttach')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'AutoAttach',
        (['in'], MsoTriState, 'AutoAttach')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'AutoLength',
        (['out', 'retval'], POINTER(MsoTriState), 'AutoLength')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(MsoTriState), 'Border')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'Border',
        (['in'], MsoTriState, 'Border')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Drop',
        (['out', 'retval'], POINTER(c_float), 'Drop')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'DropType',
        (['out', 'retval'], POINTER(MsoCalloutDropType), 'DropType')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'Gap',
        (['out', 'retval'], POINTER(c_float), 'Gap')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'Gap',
        (['in'], c_float, 'Gap')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(c_float), 'Length')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoCalloutType), 'Type')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'Type',
        (['in'], MsoCalloutType, 'Type')
    ),
]

################################################################
# code template for CalloutFormat implementation
# class CalloutFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def AutomaticLength(self):
#         '-no docstring-'
#         #return 
#
#     def CustomDrop(self, Drop):
#         '-no docstring-'
#         #return 
#
#     def CustomLength(self, Length):
#         '-no docstring-'
#         #return 
#
#     def PresetDrop(self, DropType):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Accent
#     def _set(self, Accent):
#         '-no docstring-'
#     Accent = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Angle
#     def _set(self, Angle):
#         '-no docstring-'
#     Angle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoAttach
#     def _set(self, AutoAttach):
#         '-no docstring-'
#     AutoAttach = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def AutoLength(self):
#         '-no docstring-'
#         #return AutoLength
#
#     def _get(self):
#         '-no docstring-'
#         #return Border
#     def _set(self, Border):
#         '-no docstring-'
#     Border = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Drop(self):
#         '-no docstring-'
#         #return Drop
#
#     @property
#     def DropType(self):
#         '-no docstring-'
#         #return DropType
#
#     def _get(self):
#         '-no docstring-'
#         #return Gap
#     def _set(self, Gap):
#         '-no docstring-'
#     Gap = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Length(self):
#         '-no docstring-'
#         #return Length
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#


class TabStop2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03BB-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Clear(self) -> hints.Hresult: ...
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, Position: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)



TabStops2._methods_ = [
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(TabStop2)), 'TabStop')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Add',
        (['in'], MsoTabStopType, 'Type'),
        (['in'], c_float, 'Position'),
        (['out', 'retval'], POINTER(POINTER(TabStop2)), 'TabStop')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'DefaultSpacing',
        (['out', 'retval'], POINTER(c_float), 'Spacing')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'DefaultSpacing',
        (['in'], c_float, 'Spacing')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
]

################################################################
# code template for TabStops2 implementation
# class TabStops2_Impl(object):
#     def Item(self, Index):
#         '-no docstring-'
#         #return TabStop
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Add(self, Type, Position):
#         '-no docstring-'
#         #return TabStop
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def _get(self):
#         '-no docstring-'
#         #return Spacing
#     def _set(self, Spacing):
#         '-no docstring-'
#     DefaultSpacing = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#

IMsoCorners._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for IMsoCorners implementation
# class IMsoCorners_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#


class Library(object):
    """Microsoft Office 16.0 Object Library"""
    name = 'Office'
    _reg_typelib_ = ('{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}', 2, 8)


class SharedWorkspaceFile(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C037B-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_URL(self) -> hints.Incomplete: ...
        URL = hints.normal_property(_get_URL)
        def _get_CreatedBy(self) -> hints.Incomplete: ...
        CreatedBy = hints.normal_property(_get_CreatedBy)
        def _get_CreatedDate(self) -> hints.Incomplete: ...
        CreatedDate = hints.normal_property(_get_CreatedDate)
        def _get_ModifiedBy(self) -> hints.Incomplete: ...
        ModifiedBy = hints.normal_property(_get_ModifiedBy)
        def _get_ModifiedDate(self) -> hints.Incomplete: ...
        ModifiedDate = hints.normal_property(_get_ModifiedDate)
        def Delete(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


SharedWorkspaceFile._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'URL',
        (['out', 'retval'], POINTER(BSTR), 'pbstrFilename')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'CreatedBy',
        (['out', 'retval'], POINTER(BSTR), 'pbstrCreatedBy')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'CreatedDate',
        (['out', 'retval'], POINTER(VARIANT), 'CreatedDate')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'ModifiedBy',
        (['out', 'retval'], POINTER(BSTR), 'pbstrModifiedBy')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ModifiedDate',
        (['out', 'retval'], POINTER(VARIANT), 'ModifiedDate')
    ),
    COMMETHOD([dispid(5)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for SharedWorkspaceFile implementation
# class SharedWorkspaceFile_Impl(object):
#     @property
#     def URL(self):
#         '-no docstring-'
#         #return pbstrFilename
#
#     @property
#     def CreatedBy(self):
#         '-no docstring-'
#         #return pbstrCreatedBy
#
#     @property
#     def CreatedDate(self):
#         '-no docstring-'
#         #return CreatedDate
#
#     @property
#     def ModifiedBy(self):
#         '-no docstring-'
#         #return pbstrModifiedBy
#
#     @property
#     def ModifiedDate(self):
#         '-no docstring-'
#         #return ModifiedDate
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class ICommandBarComboBoxEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{55F88896-7708-11D1-ACEB-006008961DA5}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Change(self, Ctrl: hints.Incomplete) -> hints.Hresult: ...


ICommandBarComboBoxEvents._methods_ = [
    COMMETHOD(
        [dispid(1)],
        None,
        'Change',
        (['in'], POINTER(CommandBarComboBox), 'Ctrl')
    ),
]

################################################################
# code template for ICommandBarComboBoxEvents implementation
# class ICommandBarComboBoxEvents_Impl(object):
#     def Change(self, Ctrl):
#         '-no docstring-'
#         #return 
#


class ConnectorFormat(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0313-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def BeginConnect(self, ConnectedShape: hints.Incomplete, ConnectionSite: hints.Incomplete) -> hints.Hresult: ...
        def BeginDisconnect(self) -> hints.Hresult: ...
        def EndConnect(self, ConnectedShape: hints.Incomplete, ConnectionSite: hints.Incomplete) -> hints.Hresult: ...
        def EndDisconnect(self) -> hints.Hresult: ...
        def _get_BeginConnected(self) -> hints.Incomplete: ...
        BeginConnected = hints.normal_property(_get_BeginConnected)
        def _get_BeginConnectedShape(self) -> 'Shape': ...
        BeginConnectedShape = hints.normal_property(_get_BeginConnectedShape)
        def _get_BeginConnectionSite(self) -> hints.Incomplete: ...
        BeginConnectionSite = hints.normal_property(_get_BeginConnectionSite)
        def _get_EndConnected(self) -> hints.Incomplete: ...
        EndConnected = hints.normal_property(_get_EndConnected)
        def _get_EndConnectedShape(self) -> 'Shape': ...
        EndConnectedShape = hints.normal_property(_get_EndConnectedShape)
        def _get_EndConnectionSite(self) -> hints.Incomplete: ...
        EndConnectionSite = hints.normal_property(_get_EndConnectionSite)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, Type: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)


ConnectorFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'BeginConnect',
        (['in'], POINTER(Shape), 'ConnectedShape'),
        (['in'], c_int, 'ConnectionSite')
    ),
    COMMETHOD([dispid(11)], HRESULT, 'BeginDisconnect'),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'EndConnect',
        (['in'], POINTER(Shape), 'ConnectedShape'),
        (['in'], c_int, 'ConnectionSite')
    ),
    COMMETHOD([dispid(13)], HRESULT, 'EndDisconnect'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'BeginConnected',
        (['out', 'retval'], POINTER(MsoTriState), 'BeginConnected')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'BeginConnectedShape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'BeginConnectedShape')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'BeginConnectionSite',
        (['out', 'retval'], POINTER(c_int), 'BeginConnectionSite')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'EndConnected',
        (['out', 'retval'], POINTER(MsoTriState), 'EndConnected')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'EndConnectedShape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'EndConnectedShape')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'EndConnectionSite',
        (['out', 'retval'], POINTER(c_int), 'EndConnectionSite')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoConnectorType), 'Type')
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'Type',
        (['in'], MsoConnectorType, 'Type')
    ),
]

################################################################
# code template for ConnectorFormat implementation
# class ConnectorFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def BeginConnect(self, ConnectedShape, ConnectionSite):
#         '-no docstring-'
#         #return 
#
#     def BeginDisconnect(self):
#         '-no docstring-'
#         #return 
#
#     def EndConnect(self, ConnectedShape, ConnectionSite):
#         '-no docstring-'
#         #return 
#
#     def EndDisconnect(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def BeginConnected(self):
#         '-no docstring-'
#         #return BeginConnected
#
#     @property
#     def BeginConnectedShape(self):
#         '-no docstring-'
#         #return BeginConnectedShape
#
#     @property
#     def BeginConnectionSite(self):
#         '-no docstring-'
#         #return BeginConnectionSite
#
#     @property
#     def EndConnected(self):
#         '-no docstring-'
#         #return EndConnected
#
#     @property
#     def EndConnectedShape(self):
#         '-no docstring-'
#         #return EndConnectedShape
#
#     @property
#     def EndConnectionSite(self):
#         '-no docstring-'
#         #return EndConnectionSite
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#


class WebComponentFormat(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD102-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_URL(self) -> hints.Incomplete: ...
        def _set_URL(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        URL = hints.normal_property(_get_URL, _set_URL)
        def _get_HTML(self) -> hints.Incomplete: ...
        def _set_HTML(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        HTML = hints.normal_property(_get_HTML, _set_HTML)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_PreviewGraphic(self) -> hints.Incomplete: ...
        def _set_PreviewGraphic(self, retval: hints.Incomplete) -> hints.Hresult: ...
        PreviewGraphic = hints.normal_property(_get_PreviewGraphic, _set_PreviewGraphic)
        def LaunchPropertiesWindow(self) -> hints.Hresult: ...


WebComponentFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RetValue')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'URL',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'URL',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'HTML',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'HTML',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_int), 'RetValue')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_int, 'RetValue')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_int), 'RetValue')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_int, 'RetValue')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'PreviewGraphic',
        (['out', 'retval'], POINTER(BSTR), 'retval')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'PreviewGraphic',
        (['in'], BSTR, 'retval')
    ),
    COMMETHOD([dispid(9)], HRESULT, 'LaunchPropertiesWindow'),
]

################################################################
# code template for WebComponentFormat implementation
# class WebComponentFormat_Impl(object):
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     URL = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     HTML = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return retval
#     def _set(self, retval):
#         '-no docstring-'
#     PreviewGraphic = property(_get, _set, doc = _set.__doc__)
#
#     def LaunchPropertiesWindow(self):
#         '-no docstring-'
#         #return 
#

FreeformBuilder._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'AddNodes',
        (['in'], MsoSegmentType, 'SegmentType'),
        (['in'], MsoEditingType, 'EditingType'),
        (['in'], c_float, 'X1'),
        (['in'], c_float, 'Y1'),
        (['in', 'optional'], c_float, 'X2', 0.0),
        (['in', 'optional'], c_float, 'Y2', 0.0),
        (['in', 'optional'], c_float, 'X3', 0.0),
        (['in', 'optional'], c_float, 'Y3', 0.0)
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'ConvertToShape',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Freeform')
    ),
]

################################################################
# code template for FreeformBuilder implementation
# class FreeformBuilder_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def AddNodes(self, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3):
#         '-no docstring-'
#         #return 
#
#     def ConvertToShape(self):
#         '-no docstring-'
#         #return Freeform
#


class GradientStops(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03C0-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'GradientStop': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Delete(self, Index: hints.Incomplete = ...) -> hints.Hresult: ...
        def Insert(self, RGB: hints.Incomplete, Position: hints.Incomplete, Transparency: hints.Incomplete = ..., Index: hints.Incomplete = ...) -> hints.Hresult: ...
        def Insert2(self, RGB: hints.Incomplete, Position: hints.Incomplete, Transparency: hints.Incomplete = ..., Index: hints.Incomplete = ..., Brightness: hints.Incomplete = ...) -> hints.Hresult: ...




class PictureEffects(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03D2-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'PictureEffect': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Insert(self, EffectType: hints.Incomplete, Position: hints.Incomplete = ...) -> 'PictureEffect': ...
        def Delete(self, Index: hints.Incomplete = ...) -> hints.Hresult: ...


FillFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'Background'),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'OneColorGradient',
        (['in'], MsoGradientStyle, 'Style'),
        (['in'], c_int, 'Variant'),
        (['in'], c_float, 'Degree')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'Patterned',
        (['in'], MsoPatternType, 'Pattern')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'PresetGradient',
        (['in'], MsoGradientStyle, 'Style'),
        (['in'], c_int, 'Variant'),
        (['in'], MsoPresetGradientType, 'PresetGradientType')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'PresetTextured',
        (['in'], MsoPresetTexture, 'PresetTexture')
    ),
    COMMETHOD([dispid(15)], HRESULT, 'Solid'),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'TwoColorGradient',
        (['in'], MsoGradientStyle, 'Style'),
        (['in'], c_int, 'Variant')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'UserPicture',
        (['in'], BSTR, 'PictureFile')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'UserTextured',
        (['in'], BSTR, 'TextureFile')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'BackColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'BackColor')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'BackColor',
        (['in'], POINTER(ColorFormat), 'BackColor')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'ForeColor',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'ForeColor',
        (['in'], POINTER(ColorFormat), 'ForeColor')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'GradientColorType',
        (['out', 'retval'], POINTER(MsoGradientColorType), 'GradientColorType')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'GradientDegree',
        (['out', 'retval'], POINTER(c_float), 'GradientDegree')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'GradientStyle',
        (['out', 'retval'], POINTER(MsoGradientStyle), 'GradientStyle')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'GradientVariant',
        (['out', 'retval'], POINTER(c_int), 'GradientVariant')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'Pattern',
        (['out', 'retval'], POINTER(MsoPatternType), 'Pattern')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'PresetGradientType',
        (
            ['out', 'retval'],
            POINTER(MsoPresetGradientType),
            'PresetGradientType',
        )
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'PresetTexture',
        (['out', 'retval'], POINTER(MsoPresetTexture), 'PresetTexture')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'TextureName',
        (['out', 'retval'], POINTER(BSTR), 'TextureName')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'TextureType',
        (['out', 'retval'], POINTER(MsoTextureType), 'TextureType')
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Transparency',
        (['out', 'retval'], POINTER(c_float), 'Transparency')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Transparency',
        (['in'], c_float, 'Transparency')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoFillType), 'Type')
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(MsoTriState), 'Visible')
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'Visible',
        (['in'], MsoTriState, 'Visible')
    ),
    COMMETHOD(
        [dispid(114), 'propget'],
        HRESULT,
        'GradientStops',
        (['out', 'retval'], POINTER(POINTER(GradientStops)), 'GradientStops')
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'TextureOffsetX',
        (['out', 'retval'], POINTER(c_float), 'TextureOffsetX')
    ),
    COMMETHOD(
        [dispid(115), 'propput'],
        HRESULT,
        'TextureOffsetX',
        (['in'], c_float, 'TextureOffsetX')
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'TextureOffsetY',
        (['out', 'retval'], POINTER(c_float), 'TextureOffsetY')
    ),
    COMMETHOD(
        [dispid(116), 'propput'],
        HRESULT,
        'TextureOffsetY',
        (['in'], c_float, 'TextureOffsetY')
    ),
    COMMETHOD(
        [dispid(117), 'propget'],
        HRESULT,
        'TextureAlignment',
        (['out', 'retval'], POINTER(MsoTextureAlignment), 'TextureAlignment')
    ),
    COMMETHOD(
        [dispid(117), 'propput'],
        HRESULT,
        'TextureAlignment',
        (['in'], MsoTextureAlignment, 'TextureAlignment')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'TextureHorizontalScale',
        (['out', 'retval'], POINTER(c_float), 'HorizontalScale')
    ),
    COMMETHOD(
        [dispid(118), 'propput'],
        HRESULT,
        'TextureHorizontalScale',
        (['in'], c_float, 'HorizontalScale')
    ),
    COMMETHOD(
        [dispid(119), 'propget'],
        HRESULT,
        'TextureVerticalScale',
        (['out', 'retval'], POINTER(c_float), 'VerticalScale')
    ),
    COMMETHOD(
        [dispid(119), 'propput'],
        HRESULT,
        'TextureVerticalScale',
        (['in'], c_float, 'VerticalScale')
    ),
    COMMETHOD(
        [dispid(120), 'propget'],
        HRESULT,
        'TextureTile',
        (['out', 'retval'], POINTER(MsoTriState), 'TextureTile')
    ),
    COMMETHOD(
        [dispid(120), 'propput'],
        HRESULT,
        'TextureTile',
        (['in'], MsoTriState, 'TextureTile')
    ),
    COMMETHOD(
        [dispid(121), 'propget'],
        HRESULT,
        'RotateWithObject',
        (['out', 'retval'], POINTER(MsoTriState), 'RotateWithObject')
    ),
    COMMETHOD(
        [dispid(121), 'propput'],
        HRESULT,
        'RotateWithObject',
        (['in'], MsoTriState, 'RotateWithObject')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'PictureEffects',
        (['out', 'retval'], POINTER(POINTER(PictureEffects)), 'PictureEffects')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'GradientAngle',
        (['out', 'retval'], POINTER(c_float), 'GradientAngle')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'GradientAngle',
        (['in'], c_float, 'GradientAngle')
    ),
]

################################################################
# code template for FillFormat implementation
# class FillFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Background(self):
#         '-no docstring-'
#         #return 
#
#     def OneColorGradient(self, Style, Variant, Degree):
#         '-no docstring-'
#         #return 
#
#     def Patterned(self, Pattern):
#         '-no docstring-'
#         #return 
#
#     def PresetGradient(self, Style, Variant, PresetGradientType):
#         '-no docstring-'
#         #return 
#
#     def PresetTextured(self, PresetTexture):
#         '-no docstring-'
#         #return 
#
#     def Solid(self):
#         '-no docstring-'
#         #return 
#
#     def TwoColorGradient(self, Style, Variant):
#         '-no docstring-'
#         #return 
#
#     def UserPicture(self, PictureFile):
#         '-no docstring-'
#         #return 
#
#     def UserTextured(self, TextureFile):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return BackColor
#     def _set(self, BackColor):
#         '-no docstring-'
#     BackColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ForeColor
#     def _set(self, ForeColor):
#         '-no docstring-'
#     ForeColor = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def GradientColorType(self):
#         '-no docstring-'
#         #return GradientColorType
#
#     @property
#     def GradientDegree(self):
#         '-no docstring-'
#         #return GradientDegree
#
#     @property
#     def GradientStyle(self):
#         '-no docstring-'
#         #return GradientStyle
#
#     @property
#     def GradientVariant(self):
#         '-no docstring-'
#         #return GradientVariant
#
#     @property
#     def Pattern(self):
#         '-no docstring-'
#         #return Pattern
#
#     @property
#     def PresetGradientType(self):
#         '-no docstring-'
#         #return PresetGradientType
#
#     @property
#     def PresetTexture(self):
#         '-no docstring-'
#         #return PresetTexture
#
#     @property
#     def TextureName(self):
#         '-no docstring-'
#         #return TextureName
#
#     @property
#     def TextureType(self):
#         '-no docstring-'
#         #return TextureType
#
#     def _get(self):
#         '-no docstring-'
#         #return Transparency
#     def _set(self, Transparency):
#         '-no docstring-'
#     Transparency = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def GradientStops(self):
#         '-no docstring-'
#         #return GradientStops
#
#     def _get(self):
#         '-no docstring-'
#         #return TextureOffsetX
#     def _set(self, TextureOffsetX):
#         '-no docstring-'
#     TextureOffsetX = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TextureOffsetY
#     def _set(self, TextureOffsetY):
#         '-no docstring-'
#     TextureOffsetY = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TextureAlignment
#     def _set(self, TextureAlignment):
#         '-no docstring-'
#     TextureAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HorizontalScale
#     def _set(self, HorizontalScale):
#         '-no docstring-'
#     TextureHorizontalScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return VerticalScale
#     def _set(self, VerticalScale):
#         '-no docstring-'
#     TextureVerticalScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return TextureTile
#     def _set(self, TextureTile):
#         '-no docstring-'
#     TextureTile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RotateWithObject
#     def _set(self, RotateWithObject):
#         '-no docstring-'
#     RotateWithObject = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PictureEffects(self):
#         '-no docstring-'
#         #return PictureEffects
#
#     def _get(self):
#         '-no docstring-'
#         #return GradientAngle
#     def _set(self, GradientAngle):
#         '-no docstring-'
#     GradientAngle = property(_get, _set, doc = _set.__doc__)
#


class GroupShapes(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0316-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'Shape': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Range(self, Index: hints.Incomplete) -> 'ShapeRange': ...


GroupShapes._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pnShapes')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'Range',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Range')
    ),
]

################################################################
# code template for GroupShapes implementation
# class GroupShapes_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pnShapes
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     def Range(self, Index):
#         '-no docstring-'
#         #return Range
#

TabStop2._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(2)], HRESULT, 'Clear'),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(c_float), 'Position')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'Position',
        (['in'], c_float, 'Position')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoTabStopType), 'Type')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'Type',
        (['in'], MsoTabStopType, 'Type')
    ),
]

################################################################
# code template for TabStop2 implementation
# class TabStop2_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Clear(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Position
#     def _set(self, Position):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Type
#     def _set(self, Type):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#

Shapes._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'AddCallout',
        (['in'], MsoCalloutType, 'Type'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Callout')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'AddConnector',
        (['in'], MsoConnectorType, 'Type'),
        (['in'], c_float, 'BeginX'),
        (['in'], c_float, 'BeginY'),
        (['in'], c_float, 'EndX'),
        (['in'], c_float, 'EndY'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Connector')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'AddCurve',
        (['in'], VARIANT, 'SafeArrayOfPoints'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Curve')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'AddLabel',
        (['in'], MsoTextOrientation, 'Orientation'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Label')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'AddLine',
        (['in'], c_float, 'BeginX'),
        (['in'], c_float, 'BeginY'),
        (['in'], c_float, 'EndX'),
        (['in'], c_float, 'EndY'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Line')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'AddPicture',
        (['in'], BSTR, 'FileName'),
        (['in'], MsoTriState, 'LinkToFile'),
        (['in'], MsoTriState, 'SaveWithDocument'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Picture')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'AddPolyline',
        (['in'], VARIANT, 'SafeArrayOfPoints'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Polyline')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'AddShape',
        (['in'], MsoAutoShapeType, 'Type'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'AddTextEffect',
        (['in'], MsoPresetTextEffect, 'PresetTextEffect'),
        (['in'], BSTR, 'Text'),
        (['in'], BSTR, 'FontName'),
        (['in'], c_float, 'FontSize'),
        (['in'], MsoTriState, 'FontBold'),
        (['in'], MsoTriState, 'FontItalic'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'TextEffect')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'AddTextbox',
        (['in'], MsoTextOrientation, 'Orientation'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Textbox')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'BuildFreeform',
        (['in'], MsoEditingType, 'EditingType'),
        (['in'], c_float, 'X1'),
        (['in'], c_float, 'Y1'),
        (
            ['out', 'retval'],
            POINTER(POINTER(FreeformBuilder)),
            'FreeformBuilder',
        )
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'Range',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Range')
    ),
    COMMETHOD([dispid(22)], HRESULT, 'SelectAll'),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Background',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Background')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Default',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Default')
    ),
    COMMETHOD(
        [dispid(23), 'hidden'],
        HRESULT,
        'AddDiagram',
        (['in'], MsoDiagramType, 'Type'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Diagram')
    ),
    COMMETHOD(
        [dispid(25), 'hidden'],
        HRESULT,
        'AddCanvas',
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Shape')
    ),
    COMMETHOD(
        [dispid(26), 'hidden'],
        HRESULT,
        'AddChart',
        (['in', 'optional'], XlChartType, 'Type', -1),
        (['in', 'optional'], c_float, 'Left', -1.0),
        (['in', 'optional'], c_float, 'Top', -1.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Chart')
    ),
    COMMETHOD(
        [dispid(27), 'hidden'],
        HRESULT,
        'AddTable',
        (['in'], c_int, 'NumRows'),
        (['in'], c_int, 'NumColumns'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in'], c_float, 'Width'),
        (['in'], c_float, 'Height'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Table')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'AddSmartArt',
        (['in'], POINTER(SmartArtLayout), 'Layout'),
        (['in', 'optional'], c_float, 'Left', -1.0),
        (['in', 'optional'], c_float, 'Top', -1.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'SmartArt')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'AddChart2',
        (['in', 'optional'], c_int, 'Style', -1),
        (['in', 'optional'], XlChartType, 'Type', -1),
        (['in', 'optional'], c_float, 'Left', -1.0),
        (['in', 'optional'], c_float, 'Top', -1.0),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['in', 'optional'], VARIANT_BOOL, 'NewLayout', True),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Chart')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'AddPicture2',
        (['in'], BSTR, 'FileName'),
        (['in'], MsoTriState, 'LinkToFile'),
        (['in'], MsoTriState, 'SaveWithDocument'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['in', 'optional'], MsoPictureCompress, 'Compress', -1),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Picture')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'Add3DModel',
        (['in'], BSTR, 'FileName'),
        (['in'], MsoTriState, 'LinkToFile'),
        (['in'], MsoTriState, 'SaveWithDocument'),
        (['in'], c_float, 'Left'),
        (['in'], c_float, 'Top'),
        (['in', 'optional'], c_float, 'Width', -1.0),
        (['in', 'optional'], c_float, 'Height', -1.0),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Model')
    ),
]

################################################################
# code template for Shapes implementation
# class Shapes_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def AddCallout(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Callout
#
#     def AddConnector(self, Type, BeginX, BeginY, EndX, EndY):
#         '-no docstring-'
#         #return Connector
#
#     def AddCurve(self, SafeArrayOfPoints):
#         '-no docstring-'
#         #return Curve
#
#     def AddLabel(self, Orientation, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Label
#
#     def AddLine(self, BeginX, BeginY, EndX, EndY):
#         '-no docstring-'
#         #return Line
#
#     def AddPicture(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Picture
#
#     def AddPolyline(self, SafeArrayOfPoints):
#         '-no docstring-'
#         #return Polyline
#
#     def AddShape(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Shape
#
#     def AddTextEffect(self, PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top):
#         '-no docstring-'
#         #return TextEffect
#
#     def AddTextbox(self, Orientation, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Textbox
#
#     def BuildFreeform(self, EditingType, X1, Y1):
#         '-no docstring-'
#         #return FreeformBuilder
#
#     def Range(self, Index):
#         '-no docstring-'
#         #return Range
#
#     def SelectAll(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Background(self):
#         '-no docstring-'
#         #return Background
#
#     @property
#     def Default(self):
#         '-no docstring-'
#         #return Default
#
#     def AddDiagram(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Diagram
#
#     def AddCanvas(self, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Shape
#
#     def AddChart(self, Type, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Chart
#
#     def AddTable(self, NumRows, NumColumns, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Table
#
#     def AddSmartArt(self, Layout, Left, Top, Width, Height):
#         '-no docstring-'
#         #return SmartArt
#
#     def AddChart2(self, Style, Type, Left, Top, Width, Height, NewLayout):
#         '-no docstring-'
#         #return Chart
#
#     def AddPicture2(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, Compress):
#         '-no docstring-'
#         #return Picture
#
#     def Add3DModel(self, FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height):
#         '-no docstring-'
#         #return Model
#


class ChartGroups(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C172B-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'IMsoChartGroup': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


ChartGroups._methods_ = [
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(170)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoChartGroup)), 'RHS')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for ChartGroups implementation
# class ChartGroups_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#


class HTMLProjectItem(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0358-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_IsOpen(self) -> hints.Incomplete: ...
        IsOpen = hints.normal_property(_get_IsOpen)
        def LoadFromFile(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def Open(self, OpenKind: hints.Incomplete = ...) -> hints.Hresult: ...
        def SaveCopyAs(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, Text: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)



HTMLProjectItem._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'IsOpen',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RetValue')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'LoadFromFile',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Open',
        (['in', 'optional'], MsoHTMLProjectOpen, 'OpenKind', 0)
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SaveCopyAs',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'Text')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'Text')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for HTMLProjectItem implementation
# class HTMLProjectItem_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def IsOpen(self):
#         '-no docstring-'
#         #return RetValue
#
#     def LoadFromFile(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def Open(self, OpenKind):
#         '-no docstring-'
#         #return 
#
#     def SaveCopyAs(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Text
#     def _set(self, Text):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class CommandBars(CoClass):
    _reg_clsid_ = GUID('{55F88893-7708-11D1-ACEB-006008961DA5}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}', 2, 8)


CommandBars._com_interfaces_ = [_CommandBars]
CommandBars._outgoing_interfaces_ = [_CommandBarsEvents]


class TextRange2(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0397-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, pbstrText: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'TextRange2': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Paragraphs(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange2': ...
        Paragraphs = hints.named_property('Paragraphs', _get_Paragraphs)
        def _get_Sentences(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange2': ...
        Sentences = hints.named_property('Sentences', _get_Sentences)
        def _get_Words(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange2': ...
        Words = hints.named_property('Words', _get_Words)
        def _get_Characters(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange2': ...
        Characters = hints.named_property('Characters', _get_Characters)
        def _get_Lines(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange2': ...
        Lines = hints.named_property('Lines', _get_Lines)
        def _get_Runs(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange2': ...
        Runs = hints.named_property('Runs', _get_Runs)
        def _get_ParagraphFormat(self) -> 'ParagraphFormat2': ...
        ParagraphFormat = hints.normal_property(_get_ParagraphFormat)
        def _get_Font(self) -> 'Font2': ...
        Font = hints.normal_property(_get_Font)
        def _get_Length(self) -> hints.Incomplete: ...
        Length = hints.normal_property(_get_Length)
        def _get_Start(self) -> hints.Incomplete: ...
        Start = hints.normal_property(_get_Start)
        def _get_BoundLeft(self) -> hints.Incomplete: ...
        BoundLeft = hints.normal_property(_get_BoundLeft)
        def _get_BoundTop(self) -> hints.Incomplete: ...
        BoundTop = hints.normal_property(_get_BoundTop)
        def _get_BoundWidth(self) -> hints.Incomplete: ...
        BoundWidth = hints.normal_property(_get_BoundWidth)
        def _get_BoundHeight(self) -> hints.Incomplete: ...
        BoundHeight = hints.normal_property(_get_BoundHeight)
        def TrimText(self) -> 'TextRange2': ...
        def InsertAfter(self, NewText: hints.Incomplete = ...) -> 'TextRange2': ...
        def InsertBefore(self, NewText: hints.Incomplete = ...) -> 'TextRange2': ...
        def InsertSymbol(self, FontName: hints.Incomplete, CharNumber: hints.Incomplete, Unicode: hints.Incomplete = ...) -> 'TextRange2': ...
        def Select(self) -> hints.Hresult: ...
        def Cut(self) -> hints.Hresult: ...
        def Copy(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def Paste(self) -> 'TextRange2': ...
        def PasteSpecial(self, Format: hints.Incomplete) -> 'TextRange2': ...
        def ChangeCase(self, Type: hints.Incomplete) -> hints.Hresult: ...
        def AddPeriods(self) -> hints.Hresult: ...
        def RemovePeriods(self) -> hints.Hresult: ...
        def Find(self, FindWhat: hints.Incomplete, After: hints.Incomplete = ..., MatchCase: hints.Incomplete = ..., WholeWords: hints.Incomplete = ...) -> 'TextRange2': ...
        def Replace(self, FindWhat: hints.Incomplete, ReplaceWhat: hints.Incomplete, After: hints.Incomplete = ..., MatchCase: hints.Incomplete = ..., WholeWords: hints.Incomplete = ...) -> 'TextRange2': ...
        def RotatedBounds(self) -> hints.Tuple[hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete, hints.Incomplete]: ...
        def _get_LanguageID(self) -> hints.Incomplete: ...
        def _set_LanguageID(self, LanguageID: hints.Incomplete) -> hints.Hresult: ...
        LanguageID = hints.normal_property(_get_LanguageID, _set_LanguageID)
        def RtlRun(self) -> hints.Hresult: ...
        def LtrRun(self) -> hints.Hresult: ...
        def _get_MathZones(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'TextRange2': ...
        MathZones = hints.named_property('MathZones', _get_MathZones)
        def InsertChartField(self, ChartFieldType: hints.Incomplete, Formula: hints.Incomplete = ..., Position: hints.Incomplete = ...) -> 'TextRange2': ...



TextRange2._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'pbstrText')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'pbstrText')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Paragraphs',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'Range')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Sentences',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'Range')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'Words',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'Range')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'Characters',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'Range')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'Lines',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'Range')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'Runs',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'Range')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'ParagraphFormat',
        (['out', 'retval'], POINTER(POINTER(ParagraphFormat2)), 'Format')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(Font2)), 'Font')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'Length',
        (['out', 'retval'], POINTER(c_int), 'Length')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'Start',
        (['out', 'retval'], POINTER(c_int), 'Start')
    ),
    COMMETHOD(
        [dispid(14), 'propget'],
        HRESULT,
        'BoundLeft',
        (['out', 'retval'], POINTER(c_float), 'BoundLeft')
    ),
    COMMETHOD(
        [dispid(15), 'propget'],
        HRESULT,
        'BoundTop',
        (['out', 'retval'], POINTER(c_float), 'BoundTop')
    ),
    COMMETHOD(
        [dispid(16), 'propget'],
        HRESULT,
        'BoundWidth',
        (['out', 'retval'], POINTER(c_float), 'BoundWidth')
    ),
    COMMETHOD(
        [dispid(17), 'propget'],
        HRESULT,
        'BoundHeight',
        (['out', 'retval'], POINTER(c_float), 'BoundHeight')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'TrimText',
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'TrimText')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'InsertAfter',
        (['in', 'optional'], BSTR, 'NewText', ''),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'TextRange')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'InsertBefore',
        (['in', 'optional'], BSTR, 'NewText', ''),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'TextRange')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'InsertSymbol',
        (['in'], BSTR, 'FontName'),
        (['in'], c_int, 'CharNumber'),
        (['in', 'optional'], MsoTriState, 'Unicode', 0),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'TextRange')
    ),
    COMMETHOD([dispid(22)], HRESULT, 'Select'),
    COMMETHOD([dispid(23)], HRESULT, 'Cut'),
    COMMETHOD([dispid(24)], HRESULT, 'Copy'),
    COMMETHOD([dispid(25)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'Paste',
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'TextRange')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'PasteSpecial',
        (['in'], MsoClipboardFormat, 'Format'),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'TextRange')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'ChangeCase',
        (['in'], MsoTextChangeCase, 'Type')
    ),
    COMMETHOD([dispid(29)], HRESULT, 'AddPeriods'),
    COMMETHOD([dispid(30)], HRESULT, 'RemovePeriods'),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'Find',
        (['in'], BSTR, 'FindWhat'),
        (['in', 'optional'], c_int, 'After', 0),
        (['in', 'optional'], MsoTriState, 'MatchCase', 0),
        (['in', 'optional'], MsoTriState, 'WholeWords', 0),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'TextRange')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'Replace',
        (['in'], BSTR, 'FindWhat'),
        (['in'], BSTR, 'ReplaceWhat'),
        (['in', 'optional'], c_int, 'After', 0),
        (['in', 'optional'], MsoTriState, 'MatchCase', 0),
        (['in', 'optional'], MsoTriState, 'WholeWords', 0),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'TextRange')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'RotatedBounds',
        (['out'], POINTER(c_float), 'X1'),
        (['out'], POINTER(c_float), 'Y1'),
        (['out'], POINTER(c_float), 'X2'),
        (['out'], POINTER(c_float), 'Y2'),
        (['out'], POINTER(c_float), 'X3'),
        (['out'], POINTER(c_float), 'Y3'),
        (['out'], POINTER(c_float), 'x4'),
        (['out'], POINTER(c_float), 'y4')
    ),
    COMMETHOD(
        [dispid(34), 'propget'],
        HRESULT,
        'LanguageID',
        (['out', 'retval'], POINTER(MsoLanguageID), 'LanguageID')
    ),
    COMMETHOD(
        [dispid(34), 'propput'],
        HRESULT,
        'LanguageID',
        (['in'], MsoLanguageID, 'LanguageID')
    ),
    COMMETHOD([dispid(35)], HRESULT, 'RtlRun'),
    COMMETHOD([dispid(36)], HRESULT, 'LtrRun'),
    COMMETHOD(
        [dispid(37), 'propget'],
        HRESULT,
        'MathZones',
        (['in', 'optional'], c_int, 'Start', -1),
        (['in', 'optional'], c_int, 'Length', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'Range')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'InsertChartField',
        (['in'], MsoChartFieldType, 'ChartFieldType'),
        (['in', 'optional'], BSTR, 'Formula', ''),
        (['in', 'optional'], c_int, 'Position', -1),
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'Range')
    ),
]

################################################################
# code template for TextRange2 implementation
# class TextRange2_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstrText
#     def _set(self, pbstrText):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Paragraphs(self, Start, Length):
#         '-no docstring-'
#         #return Range
#
#     @property
#     def Sentences(self, Start, Length):
#         '-no docstring-'
#         #return Range
#
#     @property
#     def Words(self, Start, Length):
#         '-no docstring-'
#         #return Range
#
#     @property
#     def Characters(self, Start, Length):
#         '-no docstring-'
#         #return Range
#
#     @property
#     def Lines(self, Start, Length):
#         '-no docstring-'
#         #return Range
#
#     @property
#     def Runs(self, Start, Length):
#         '-no docstring-'
#         #return Range
#
#     @property
#     def ParagraphFormat(self):
#         '-no docstring-'
#         #return Format
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return Font
#
#     @property
#     def Length(self):
#         '-no docstring-'
#         #return Length
#
#     @property
#     def Start(self):
#         '-no docstring-'
#         #return Start
#
#     @property
#     def BoundLeft(self):
#         '-no docstring-'
#         #return BoundLeft
#
#     @property
#     def BoundTop(self):
#         '-no docstring-'
#         #return BoundTop
#
#     @property
#     def BoundWidth(self):
#         '-no docstring-'
#         #return BoundWidth
#
#     @property
#     def BoundHeight(self):
#         '-no docstring-'
#         #return BoundHeight
#
#     def TrimText(self):
#         '-no docstring-'
#         #return TrimText
#
#     def InsertAfter(self, NewText):
#         '-no docstring-'
#         #return TextRange
#
#     def InsertBefore(self, NewText):
#         '-no docstring-'
#         #return TextRange
#
#     def InsertSymbol(self, FontName, CharNumber, Unicode):
#         '-no docstring-'
#         #return TextRange
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     def Cut(self):
#         '-no docstring-'
#         #return 
#
#     def Copy(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Paste(self):
#         '-no docstring-'
#         #return TextRange
#
#     def PasteSpecial(self, Format):
#         '-no docstring-'
#         #return TextRange
#
#     def ChangeCase(self, Type):
#         '-no docstring-'
#         #return 
#
#     def AddPeriods(self):
#         '-no docstring-'
#         #return 
#
#     def RemovePeriods(self):
#         '-no docstring-'
#         #return 
#
#     def Find(self, FindWhat, After, MatchCase, WholeWords):
#         '-no docstring-'
#         #return TextRange
#
#     def Replace(self, FindWhat, ReplaceWhat, After, MatchCase, WholeWords):
#         '-no docstring-'
#         #return TextRange
#
#     def RotatedBounds(self):
#         '-no docstring-'
#         #return X1, Y1, X2, Y2, X3, Y3, x4, y4
#
#     def _get(self):
#         '-no docstring-'
#         #return LanguageID
#     def _set(self, LanguageID):
#         '-no docstring-'
#     LanguageID = property(_get, _set, doc = _set.__doc__)
#
#     def RtlRun(self):
#         '-no docstring-'
#         #return 
#
#     def LtrRun(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def MathZones(self, Start, Length):
#         '-no docstring-'
#         #return Range
#
#     def InsertChartField(self, ChartFieldType, Formula, Position):
#         '-no docstring-'
#         #return Range
#


class BalloonCheckbox(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0328-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self) -> hints.Incomplete: ...
        Item = hints.normal_property(_get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Checked(self) -> hints.Incomplete: ...
        def _set_Checked(self, pvarfChecked: hints.Incomplete) -> hints.Hresult: ...
        Checked = hints.normal_property(_get_Checked, _set_Checked)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)


BalloonCheckbox._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'Checked',
        (['in'], VARIANT_BOOL, 'pvarfChecked')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Checked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfChecked')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
]

################################################################
# code template for BalloonCheckbox implementation
# class BalloonCheckbox_Impl(object):
#     @property
#     def Item(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfChecked
#     def _set(self, pvarfChecked):
#         '-no docstring-'
#     Checked = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#

_CustomXMLPartsEvents._disp_methods_ = [
    DISPMETHOD(
        [dispid(1)],
        None,
        'PartAfterAdd',
        (['in'], POINTER(CustomXMLPart), 'NewPart')
    ),
    DISPMETHOD(
        [dispid(2)],
        None,
        'PartBeforeDelete',
        (['in'], POINTER(CustomXMLPart), 'OldPart')
    ),
    DISPMETHOD(
        [dispid(3)],
        None,
        'PartAfterLoad',
        (['in'], POINTER(CustomXMLPart), 'Part')
    ),
]

IMsoWalls._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppfill')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'PictureType',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(161), 'propput'],
        HRESULT,
        'PictureType',
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD([dispid(211)], HRESULT, 'Paste'),
    COMMETHOD(
        [dispid(162), 'propget'],
        HRESULT,
        'PictureUnit',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(162), 'propput'],
        HRESULT,
        'PictureUnit',
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD(
        [dispid(2419), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2419), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for IMsoWalls implementation
# class IMsoWalls_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppfill
#
#     def _get(self):
#         '-no docstring-'
#         #return pvar
#     def _set(self, pvar):
#         '-no docstring-'
#     PictureType = property(_get, _set, doc = _set.__doc__)
#
#     def Paste(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pvar
#     def _set(self, pvar):
#         '-no docstring-'
#     PictureUnit = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#


class SharedWorkspaceFiles(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C037C-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Item(self, Index: hints.Incomplete) -> 'SharedWorkspaceFile': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, FileName: hints.Incomplete, ParentFolder: hints.Incomplete = ..., OverwriteIfFileAlreadyExists: hints.Incomplete = ..., KeepInSync: hints.Incomplete = ...) -> 'SharedWorkspaceFile': ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ItemCountExceeded(self) -> hints.Incomplete: ...
        ItemCountExceeded = hints.normal_property(_get_ItemCountExceeded)


SharedWorkspaceFiles._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceFile)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcItems')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'FileName'),
        (['in', 'optional'], VARIANT, 'ParentFolder'),
        (['in', 'optional'], VARIANT, 'OverwriteIfFileAlreadyExists'),
        (['in', 'optional'], VARIANT, 'KeepInSync'),
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceFile)), 'ppFile')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ItemCountExceeded',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pf')
    ),
]

################################################################
# code template for SharedWorkspaceFiles implementation
# class SharedWorkspaceFiles_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcItems
#
#     def Add(self, FileName, ParentFolder, OverwriteIfFileAlreadyExists, KeepInSync):
#         '-no docstring-'
#         #return ppFile
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def ItemCountExceeded(self):
#         '-no docstring-'
#         #return pf
#


class IFind(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0337-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_SearchPath(self) -> hints.Incomplete: ...
        def _set_SearchPath(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SearchPath = hints.normal_property(_get_SearchPath, _set_SearchPath)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_SubDir(self) -> hints.Incomplete: ...
        def _set_SubDir(self, retval: hints.Incomplete) -> hints.Hresult: ...
        SubDir = hints.normal_property(_get_SubDir, _set_SubDir)
        def _get_Title(self) -> hints.Incomplete: ...
        def _set_Title(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Title = hints.normal_property(_get_Title, _set_Title)
        def _get_Author(self) -> hints.Incomplete: ...
        def _set_Author(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Author = hints.normal_property(_get_Author, _set_Author)
        def _get_Keywords(self) -> hints.Incomplete: ...
        def _set_Keywords(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Keywords = hints.normal_property(_get_Keywords, _set_Keywords)
        def _get_Subject(self) -> hints.Incomplete: ...
        def _set_Subject(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Subject = hints.normal_property(_get_Subject, _set_Subject)
        def _get_Options(self) -> hints.Incomplete: ...
        def _set_Options(self, penmOptions: hints.Incomplete) -> hints.Hresult: ...
        Options = hints.normal_property(_get_Options, _set_Options)
        def _get_MatchCase(self) -> hints.Incomplete: ...
        def _set_MatchCase(self, retval: hints.Incomplete) -> hints.Hresult: ...
        MatchCase = hints.normal_property(_get_MatchCase, _set_MatchCase)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_PatternMatch(self) -> hints.Incomplete: ...
        def _set_PatternMatch(self, retval: hints.Incomplete) -> hints.Hresult: ...
        PatternMatch = hints.normal_property(_get_PatternMatch, _set_PatternMatch)
        def _get_DateSavedFrom(self) -> hints.Incomplete: ...
        def _set_DateSavedFrom(self, pdatSavedFrom: hints.Incomplete) -> hints.Hresult: ...
        DateSavedFrom = hints.normal_property(_get_DateSavedFrom, _set_DateSavedFrom)
        def _get_DateSavedTo(self) -> hints.Incomplete: ...
        def _set_DateSavedTo(self, pdatSavedTo: hints.Incomplete) -> hints.Hresult: ...
        DateSavedTo = hints.normal_property(_get_DateSavedTo, _set_DateSavedTo)
        def _get_SavedBy(self) -> hints.Incomplete: ...
        def _set_SavedBy(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        SavedBy = hints.normal_property(_get_SavedBy, _set_SavedBy)
        def _get_DateCreatedFrom(self) -> hints.Incomplete: ...
        def _set_DateCreatedFrom(self, pdatCreatedFrom: hints.Incomplete) -> hints.Hresult: ...
        DateCreatedFrom = hints.normal_property(_get_DateCreatedFrom, _set_DateCreatedFrom)
        def _get_DateCreatedTo(self) -> hints.Incomplete: ...
        def _set_DateCreatedTo(self, pdatCreatedTo: hints.Incomplete) -> hints.Hresult: ...
        DateCreatedTo = hints.normal_property(_get_DateCreatedTo, _set_DateCreatedTo)
        def _get_View(self) -> hints.Incomplete: ...
        def _set_View(self, penmView: hints.Incomplete) -> hints.Hresult: ...
        View = hints.normal_property(_get_View, _set_View)
        def _get_SortBy(self) -> hints.Incomplete: ...
        def _set_SortBy(self, penmSortBy: hints.Incomplete) -> hints.Hresult: ...
        SortBy = hints.normal_property(_get_SortBy, _set_SortBy)
        def _get_ListBy(self) -> hints.Incomplete: ...
        def _set_ListBy(self, penmListBy: hints.Incomplete) -> hints.Hresult: ...
        ListBy = hints.normal_property(_get_ListBy, _set_ListBy)
        def _get_SelectedFile(self) -> hints.Incomplete: ...
        def _set_SelectedFile(self, pintSelectedFile: hints.Incomplete) -> hints.Hresult: ...
        SelectedFile = hints.normal_property(_get_SelectedFile, _set_SelectedFile)
        def _get_Results(self) -> 'IFoundFiles': ...
        Results = hints.normal_property(_get_Results)
        def Show(self) -> hints.Incomplete: ...
        def Execute(self) -> hints.Hresult: ...
        def Load(self, bstrQueryName: hints.Incomplete) -> hints.Hresult: ...
        def Save(self, bstrQueryName: hints.Incomplete) -> hints.Hresult: ...
        def Delete(self, bstrQueryName: hints.Incomplete) -> hints.Hresult: ...
        def _get_FileType(self) -> hints.Incomplete: ...
        def _set_FileType(self, plFileType: hints.Incomplete) -> hints.Hresult: ...
        FileType = hints.normal_property(_get_FileType, _set_FileType)




class IFoundFiles(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0338-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


IFind._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'SearchPath',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'SubDir',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'retval')
    ),
    COMMETHOD(
        [dispid(1610743811), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'Author',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743813), 'propget'],
        HRESULT,
        'Keywords',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'Subject',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743815), 'propget'],
        HRESULT,
        'Options',
        (['out', 'retval'], POINTER(MsoFileFindOptions), 'penmOptions')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'MatchCase',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'retval')
    ),
    COMMETHOD(
        [dispid(1610743817), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propget'],
        HRESULT,
        'PatternMatch',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'retval')
    ),
    COMMETHOD(
        [dispid(1610743819), 'propget'],
        HRESULT,
        'DateSavedFrom',
        (['out', 'retval'], POINTER(VARIANT), 'pdatSavedFrom')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propget'],
        HRESULT,
        'DateSavedTo',
        (['out', 'retval'], POINTER(VARIANT), 'pdatSavedTo')
    ),
    COMMETHOD(
        [dispid(1610743821), 'propget'],
        HRESULT,
        'SavedBy',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propget'],
        HRESULT,
        'DateCreatedFrom',
        (['out', 'retval'], POINTER(VARIANT), 'pdatCreatedFrom')
    ),
    COMMETHOD(
        [dispid(1610743823), 'propget'],
        HRESULT,
        'DateCreatedTo',
        (['out', 'retval'], POINTER(VARIANT), 'pdatCreatedTo')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propget'],
        HRESULT,
        'View',
        (['out', 'retval'], POINTER(MsoFileFindView), 'penmView')
    ),
    COMMETHOD(
        [dispid(1610743825), 'propget'],
        HRESULT,
        'SortBy',
        (['out', 'retval'], POINTER(MsoFileFindSortBy), 'penmSortBy')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propget'],
        HRESULT,
        'ListBy',
        (['out', 'retval'], POINTER(MsoFileFindListBy), 'penmListBy')
    ),
    COMMETHOD(
        [dispid(1610743827), 'propget'],
        HRESULT,
        'SelectedFile',
        (['out', 'retval'], POINTER(c_int), 'pintSelectedFile')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propget'],
        HRESULT,
        'Results',
        (['out', 'retval'], POINTER(POINTER(IFoundFiles)), 'pdisp')
    ),
    COMMETHOD(
        [dispid(1610743829)],
        HRESULT,
        'Show',
        (['out', 'retval'], POINTER(c_int), 'pRows')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'SearchPath',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propput'],
        HRESULT,
        'SubDir',
        (['in'], VARIANT_BOOL, 'retval')
    ),
    COMMETHOD(
        [dispid(1610743811), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'Author',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743813), 'propput'],
        HRESULT,
        'Keywords',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'Subject',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743815), 'propput'],
        HRESULT,
        'Options',
        (['in'], MsoFileFindOptions, 'penmOptions')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propput'],
        HRESULT,
        'MatchCase',
        (['in'], VARIANT_BOOL, 'retval')
    ),
    COMMETHOD(
        [dispid(1610743817), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propput'],
        HRESULT,
        'PatternMatch',
        (['in'], VARIANT_BOOL, 'retval')
    ),
    COMMETHOD(
        [dispid(1610743819), 'propput'],
        HRESULT,
        'DateSavedFrom',
        (['in'], VARIANT, 'pdatSavedFrom')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propput'],
        HRESULT,
        'DateSavedTo',
        (['in'], VARIANT, 'pdatSavedTo')
    ),
    COMMETHOD(
        [dispid(1610743821), 'propput'],
        HRESULT,
        'SavedBy',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propput'],
        HRESULT,
        'DateCreatedFrom',
        (['in'], VARIANT, 'pdatCreatedFrom')
    ),
    COMMETHOD(
        [dispid(1610743823), 'propput'],
        HRESULT,
        'DateCreatedTo',
        (['in'], VARIANT, 'pdatCreatedTo')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propput'],
        HRESULT,
        'View',
        (['in'], MsoFileFindView, 'penmView')
    ),
    COMMETHOD(
        [dispid(1610743825), 'propput'],
        HRESULT,
        'SortBy',
        (['in'], MsoFileFindSortBy, 'penmSortBy')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propput'],
        HRESULT,
        'ListBy',
        (['in'], MsoFileFindListBy, 'penmListBy')
    ),
    COMMETHOD(
        [dispid(1610743827), 'propput'],
        HRESULT,
        'SelectedFile',
        (['in'], c_int, 'pintSelectedFile')
    ),
    COMMETHOD([dispid(1610743850)], HRESULT, 'Execute'),
    COMMETHOD(
        [dispid(1610743851)],
        HRESULT,
        'Load',
        (['in'], BSTR, 'bstrQueryName')
    ),
    COMMETHOD(
        [dispid(1610743852)],
        HRESULT,
        'Save',
        (['in'], BSTR, 'bstrQueryName')
    ),
    COMMETHOD(
        [dispid(1610743853)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'bstrQueryName')
    ),
    COMMETHOD(
        [dispid(1610743854), 'propget'],
        HRESULT,
        'FileType',
        (['out', 'retval'], POINTER(c_int), 'plFileType')
    ),
    COMMETHOD(
        [dispid(1610743854), 'propput'],
        HRESULT,
        'FileType',
        (['in'], c_int, 'plFileType')
    ),
]

################################################################
# code template for IFind implementation
# class IFind_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SearchPath = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return retval
#     def _set(self, retval):
#         '-no docstring-'
#     SubDir = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Title = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Author = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Keywords = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Subject = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return penmOptions
#     def _set(self, penmOptions):
#         '-no docstring-'
#     Options = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return retval
#     def _set(self, retval):
#         '-no docstring-'
#     MatchCase = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return retval
#     def _set(self, retval):
#         '-no docstring-'
#     PatternMatch = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pdatSavedFrom
#     def _set(self, pdatSavedFrom):
#         '-no docstring-'
#     DateSavedFrom = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pdatSavedTo
#     def _set(self, pdatSavedTo):
#         '-no docstring-'
#     DateSavedTo = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SavedBy = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pdatCreatedFrom
#     def _set(self, pdatCreatedFrom):
#         '-no docstring-'
#     DateCreatedFrom = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pdatCreatedTo
#     def _set(self, pdatCreatedTo):
#         '-no docstring-'
#     DateCreatedTo = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return penmView
#     def _set(self, penmView):
#         '-no docstring-'
#     View = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return penmSortBy
#     def _set(self, penmSortBy):
#         '-no docstring-'
#     SortBy = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return penmListBy
#     def _set(self, penmListBy):
#         '-no docstring-'
#     ListBy = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pintSelectedFile
#     def _set(self, pintSelectedFile):
#         '-no docstring-'
#     SelectedFile = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Results(self):
#         '-no docstring-'
#         #return pdisp
#
#     def Show(self):
#         '-no docstring-'
#         #return pRows
#
#     def Execute(self):
#         '-no docstring-'
#         #return 
#
#     def Load(self, bstrQueryName):
#         '-no docstring-'
#         #return 
#
#     def Save(self, bstrQueryName):
#         '-no docstring-'
#         #return 
#
#     def Delete(self, bstrQueryName):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return plFileType
#     def _set(self, plFileType):
#         '-no docstring-'
#     FileType = property(_get, _set, doc = _set.__doc__)
#


class ThemeColor(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03A1-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_RGB(self) -> hints.Incomplete: ...
        def _set_RGB(self, RGB: hints.Incomplete) -> hints.Hresult: ...
        RGB = hints.normal_property(_get_RGB, _set_RGB)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ThemeColorSchemeIndex(self) -> hints.Incomplete: ...
        ThemeColorSchemeIndex = hints.normal_property(_get_ThemeColorSchemeIndex)



ThemeColor._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'RGB',
        (['out', 'retval'], POINTER(MsoRGBType), 'RGB')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'RGB',
        (['in'], MsoRGBType, 'RGB')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'ThemeColorSchemeIndex',
        (['out', 'retval'], POINTER(MsoThemeColorSchemeIndex), 'pValue')
    ),
]

################################################################
# code template for ThemeColor implementation
# class ThemeColor_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return RGB
#     def _set(self, RGB):
#         '-no docstring-'
#     RGB = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def ThemeColorSchemeIndex(self):
#         '-no docstring-'
#         #return pValue
#

IMsoChartGroup._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propput'],
        HRESULT,
        'AxisGroup',
        (['in'], c_int, 'piGroup')
    ),
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'AxisGroup',
        (['out', 'retval'], POINTER(c_int), 'piGroup')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propput'],
        HRESULT,
        'DoughnutHoleSize',
        (['in'], c_int, 'pDoughnutHoleSize')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'DoughnutHoleSize',
        (['out', 'retval'], POINTER(c_int), 'pDoughnutHoleSize')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'DownBars',
        (['out', 'retval'], POINTER(POINTER(IMsoDownBars)), 'ppdownbars')
    ),
    COMMETHOD(
        [dispid(1610743813), 'propget'],
        HRESULT,
        'DropLines',
        (['out', 'retval'], POINTER(POINTER(IMsoDropLines)), 'ppdroplines')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'FirstSliceAngle',
        (['in'], c_int, 'pFirstSliceAngle')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'FirstSliceAngle',
        (['out', 'retval'], POINTER(c_int), 'pFirstSliceAngle')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propput'],
        HRESULT,
        'GapWidth',
        (['in'], c_int, 'pGapWidth')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'GapWidth',
        (['out', 'retval'], POINTER(c_int), 'pGapWidth')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propput'],
        HRESULT,
        'HasDropLines',
        (['in'], VARIANT_BOOL, 'pfHasDropLines')
    ),
    COMMETHOD(
        [dispid(1610743818), 'propget'],
        HRESULT,
        'HasDropLines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfHasDropLines')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propput'],
        HRESULT,
        'HasHiLoLines',
        (['in'], VARIANT_BOOL, 'pfHasHiLoLines')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propget'],
        HRESULT,
        'HasHiLoLines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfHasHiLoLines')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propput'],
        HRESULT,
        'HasRadarAxisLabels',
        (['in'], VARIANT_BOOL, 'pfHasRadarAxisLabels')
    ),
    COMMETHOD(
        [dispid(1610743822), 'propget'],
        HRESULT,
        'HasRadarAxisLabels',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfHasRadarAxisLabels')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propput'],
        HRESULT,
        'HasSeriesLines',
        (['in'], VARIANT_BOOL, 'pfHasSeriesLines')
    ),
    COMMETHOD(
        [dispid(1610743824), 'propget'],
        HRESULT,
        'HasSeriesLines',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfHasSeriesLines')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propput'],
        HRESULT,
        'HasUpDownBars',
        (['in'], VARIANT_BOOL, 'pfHasUpDownBars')
    ),
    COMMETHOD(
        [dispid(1610743826), 'propget'],
        HRESULT,
        'HasUpDownBars',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfHasUpDownBars')
    ),
    COMMETHOD(
        [dispid(1610743828), 'propget'],
        HRESULT,
        'HiLoLines',
        (['out', 'retval'], POINTER(POINTER(IMsoHiLoLines)), 'ppHiLoLines')
    ),
    COMMETHOD(
        [dispid(1610743829), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'pIndex')
    ),
    COMMETHOD(
        [dispid(1610743830), 'propput'],
        HRESULT,
        'Overlap',
        (['in'], c_int, 'pOverlap')
    ),
    COMMETHOD(
        [dispid(1610743830), 'propget'],
        HRESULT,
        'Overlap',
        (['out', 'retval'], POINTER(c_int), 'pOverlap')
    ),
    COMMETHOD(
        [dispid(1610743832), 'propget'],
        HRESULT,
        'RadarAxisLabels',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppRadarAxisLabels')
    ),
    COMMETHOD(
        [dispid(1610743833)],
        HRESULT,
        'SeriesCollection',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppSeriesCollection')
    ),
    COMMETHOD(
        [dispid(1610743834), 'propget'],
        HRESULT,
        'SeriesLines',
        (['out', 'retval'], POINTER(POINTER(IMsoSeriesLines)), 'ppSeriesLines')
    ),
    COMMETHOD(
        [dispid(1610743835), 'hidden', 'propput'],
        HRESULT,
        'SubType',
        (['in'], c_int, 'pSubType')
    ),
    COMMETHOD(
        [dispid(1610743835), 'hidden', 'propget'],
        HRESULT,
        'SubType',
        (['out', 'retval'], POINTER(c_int), 'pSubType')
    ),
    COMMETHOD(
        [dispid(1610743837), 'hidden', 'propput'],
        HRESULT,
        'Type',
        (['in'], c_int, 'ptype')
    ),
    COMMETHOD(
        [dispid(1610743837), 'hidden', 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(c_int), 'ptype')
    ),
    COMMETHOD(
        [dispid(1610743839), 'propget'],
        HRESULT,
        'UpBars',
        (['out', 'retval'], POINTER(POINTER(IMsoUpBars)), 'ppUpBars')
    ),
    COMMETHOD(
        [dispid(1610743840), 'propput'],
        HRESULT,
        'VaryByCategories',
        (['in'], VARIANT_BOOL, 'pfVaryByCategories')
    ),
    COMMETHOD(
        [dispid(1610743840), 'propget'],
        HRESULT,
        'VaryByCategories',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfVaryByCategories')
    ),
    COMMETHOD(
        [dispid(1610743842), 'propget'],
        HRESULT,
        'SizeRepresents',
        (['out', 'retval'], POINTER(XlSizeRepresents), 'pXlSizeRepresents')
    ),
    COMMETHOD(
        [dispid(1610743842), 'propput'],
        HRESULT,
        'SizeRepresents',
        (['in'], XlSizeRepresents, 'pXlSizeRepresents')
    ),
    COMMETHOD(
        [dispid(1610743844), 'propput'],
        HRESULT,
        'BubbleScale',
        (['in'], c_int, 'pbubblescale')
    ),
    COMMETHOD(
        [dispid(1610743844), 'propget'],
        HRESULT,
        'BubbleScale',
        (['out', 'retval'], POINTER(c_int), 'pbubblescale')
    ),
    COMMETHOD(
        [dispid(1610743846), 'propput'],
        HRESULT,
        'ShowNegativeBubbles',
        (['in'], VARIANT_BOOL, 'pfShowNegativeBubbles')
    ),
    COMMETHOD(
        [dispid(1610743846), 'propget'],
        HRESULT,
        'ShowNegativeBubbles',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfShowNegativeBubbles')
    ),
    COMMETHOD(
        [dispid(1610743848), 'propput'],
        HRESULT,
        'SplitType',
        (['in'], XlChartSplitType, 'pChartSplitType')
    ),
    COMMETHOD(
        [dispid(1610743848), 'propget'],
        HRESULT,
        'SplitType',
        (['out', 'retval'], POINTER(XlChartSplitType), 'pChartSplitType')
    ),
    COMMETHOD(
        [dispid(1610743850), 'propget'],
        HRESULT,
        'SplitValue',
        (['out', 'retval'], POINTER(VARIANT), 'pSplitValue')
    ),
    COMMETHOD(
        [dispid(1610743850), 'propput'],
        HRESULT,
        'SplitValue',
        (['in'], VARIANT, 'pSplitValue')
    ),
    COMMETHOD(
        [dispid(1610743852), 'propget'],
        HRESULT,
        'SecondPlotSize',
        (['out', 'retval'], POINTER(c_int), 'pSecondPlotSize')
    ),
    COMMETHOD(
        [dispid(1610743852), 'propput'],
        HRESULT,
        'SecondPlotSize',
        (['in'], c_int, 'pSecondPlotSize')
    ),
    COMMETHOD(
        [dispid(1610743854), 'propget'],
        HRESULT,
        'Has3DShading',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743854), 'propput'],
        HRESULT,
        'Has3DShading',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [dispid(151)],
        HRESULT,
        'CategoryCollection',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppcatcollection')
    ),
    COMMETHOD(
        [dispid(152)],
        HRESULT,
        'FullCategoryCollection',
        (['in', 'optional'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppcatcollection')
    ),
    COMMETHOD(
        [dispid(2891), 'propget'],
        HRESULT,
        'BinsType',
        (['out', 'retval'], POINTER(XlBinsType), 'RHS')
    ),
    COMMETHOD(
        [dispid(2891), 'propput'],
        HRESULT,
        'BinsType',
        (['in'], XlBinsType, 'RHS')
    ),
    COMMETHOD(
        [dispid(2892), 'propget'],
        HRESULT,
        'BinWidthValue',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2892), 'propput'],
        HRESULT,
        'BinWidthValue',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(2893), 'propget'],
        HRESULT,
        'BinsCountValue',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(2893), 'propput'],
        HRESULT,
        'BinsCountValue',
        (['in'], c_int, 'pval')
    ),
    COMMETHOD(
        [dispid(2894), 'propget'],
        HRESULT,
        'BinsOverflowEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(2894), 'propput'],
        HRESULT,
        'BinsOverflowEnabled',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(2895), 'propget'],
        HRESULT,
        'BinsOverflowValue',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2895), 'propput'],
        HRESULT,
        'BinsOverflowValue',
        (['in'], c_double, 'pval')
    ),
    COMMETHOD(
        [dispid(2896), 'propget'],
        HRESULT,
        'BinsUnderflowEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        [dispid(2896), 'propput'],
        HRESULT,
        'BinsUnderflowEnabled',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [dispid(2897), 'propget'],
        HRESULT,
        'BinsUnderflowValue',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [dispid(2897), 'propput'],
        HRESULT,
        'BinsUnderflowValue',
        (['in'], c_double, 'pval')
    ),
]

################################################################
# code template for IMsoChartGroup implementation
# class IMsoChartGroup_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return piGroup
#     def _set(self, piGroup):
#         '-no docstring-'
#     AxisGroup = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pDoughnutHoleSize
#     def _set(self, pDoughnutHoleSize):
#         '-no docstring-'
#     DoughnutHoleSize = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def DownBars(self):
#         '-no docstring-'
#         #return ppdownbars
#
#     @property
#     def DropLines(self):
#         '-no docstring-'
#         #return ppdroplines
#
#     def _get(self):
#         '-no docstring-'
#         #return pFirstSliceAngle
#     def _set(self, pFirstSliceAngle):
#         '-no docstring-'
#     FirstSliceAngle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pGapWidth
#     def _set(self, pGapWidth):
#         '-no docstring-'
#     GapWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfHasDropLines
#     def _set(self, pfHasDropLines):
#         '-no docstring-'
#     HasDropLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfHasHiLoLines
#     def _set(self, pfHasHiLoLines):
#         '-no docstring-'
#     HasHiLoLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfHasRadarAxisLabels
#     def _set(self, pfHasRadarAxisLabels):
#         '-no docstring-'
#     HasRadarAxisLabels = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfHasSeriesLines
#     def _set(self, pfHasSeriesLines):
#         '-no docstring-'
#     HasSeriesLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfHasUpDownBars
#     def _set(self, pfHasUpDownBars):
#         '-no docstring-'
#     HasUpDownBars = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HiLoLines(self):
#         '-no docstring-'
#         #return ppHiLoLines
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return pIndex
#
#     def _get(self):
#         '-no docstring-'
#         #return pOverlap
#     def _set(self, pOverlap):
#         '-no docstring-'
#     Overlap = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def RadarAxisLabels(self):
#         '-no docstring-'
#         #return ppRadarAxisLabels
#
#     def SeriesCollection(self, Index):
#         '-no docstring-'
#         #return ppSeriesCollection
#
#     @property
#     def SeriesLines(self):
#         '-no docstring-'
#         #return ppSeriesLines
#
#     def _get(self):
#         '-no docstring-'
#         #return pSubType
#     def _set(self, pSubType):
#         '-no docstring-'
#     SubType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ptype
#     def _set(self, ptype):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def UpBars(self):
#         '-no docstring-'
#         #return ppUpBars
#
#     def _get(self):
#         '-no docstring-'
#         #return pfVaryByCategories
#     def _set(self, pfVaryByCategories):
#         '-no docstring-'
#     VaryByCategories = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pXlSizeRepresents
#     def _set(self, pXlSizeRepresents):
#         '-no docstring-'
#     SizeRepresents = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbubblescale
#     def _set(self, pbubblescale):
#         '-no docstring-'
#     BubbleScale = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfShowNegativeBubbles
#     def _set(self, pfShowNegativeBubbles):
#         '-no docstring-'
#     ShowNegativeBubbles = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pChartSplitType
#     def _set(self, pChartSplitType):
#         '-no docstring-'
#     SplitType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pSplitValue
#     def _set(self, pSplitValue):
#         '-no docstring-'
#     SplitValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pSecondPlotSize
#     def _set(self, pSecondPlotSize):
#         '-no docstring-'
#     SecondPlotSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Has3DShading = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def CategoryCollection(self, Index):
#         '-no docstring-'
#         #return ppcatcollection
#
#     def FullCategoryCollection(self, Index):
#         '-no docstring-'
#         #return ppcatcollection
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     BinsType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinWidthValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinsCountValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinsOverflowEnabled = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinsOverflowValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinsUnderflowEnabled = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     BinsUnderflowValue = property(_get, _set, doc = _set.__doc__)
#


class ILicValidator(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{919AA22C-B9AD-11D3-8D59-0050048384E3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Products(self) -> hints.Incomplete: ...
        Products = hints.normal_property(_get_Products)
        def _get_Selection(self) -> hints.Incomplete: ...
        def _set_Selection(self, piSel: hints.Incomplete) -> hints.Hresult: ...
        Selection = hints.normal_property(_get_Selection, _set_Selection)


ILicValidator._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Products',
        (['out', 'retval'], POINTER(VARIANT), 'pVariant')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Selection',
        (['out', 'retval'], POINTER(c_int), 'piSel')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Selection',
        (['in'], c_int, 'piSel')
    ),
]

################################################################
# code template for ILicValidator implementation
# class ILicValidator_Impl(object):
#     @property
#     def Products(self):
#         '-no docstring-'
#         #return pVariant
#
#     def _get(self):
#         '-no docstring-'
#         #return piSel
#     def _set(self, piSel):
#         '-no docstring-'
#     Selection = property(_get, _set, doc = _set.__doc__)
#


class BalloonLabel(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0330-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self) -> hints.Incomplete: ...
        Item = hints.normal_property(_get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)


BalloonLabel._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
]

################################################################
# code template for BalloonLabel implementation
# class BalloonLabel_Impl(object):
#     @property
#     def Item(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#


class IMsoEnvelopeVB(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000672AC-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Introduction(self) -> hints.Incomplete: ...
        def _set_Introduction(self, pbstrIntro: hints.Incomplete) -> hints.Hresult: ...
        Introduction = hints.normal_property(_get_Introduction, _set_Introduction)
        def _get_Item(self) -> hints.Incomplete: ...
        Item = hints.normal_property(_get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_CommandBars(self) -> hints.Incomplete: ...
        CommandBars = hints.normal_property(_get_CommandBars)


IMsoEnvelopeVB._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Introduction',
        (['out', 'retval'], POINTER(BSTR), 'pbstrIntro')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'Introduction',
        (['in'], BSTR, 'pbstrIntro')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Item',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdisp')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdisp')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'CommandBars',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdisp')
    ),
]

################################################################
# code template for IMsoEnvelopeVB implementation
# class IMsoEnvelopeVB_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstrIntro
#     def _set(self, pbstrIntro):
#         '-no docstring-'
#     Introduction = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Item(self):
#         '-no docstring-'
#         #return ppdisp
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdisp
#
#     @property
#     def CommandBars(self):
#         '-no docstring-'
#         #return ppdisp
#


class IMsoEnvelopeVBEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000672AD-0000-0000-C000-000000000046}')
    _idlflags_ = []
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        def EnvelopeShow(self) -> hints.Incomplete: ...
        def EnvelopeHide(self) -> hints.Incomplete: ...


IMsoEnvelopeVBEvents._disp_methods_ = [
    DISPMETHOD([dispid(1)], None, 'EnvelopeShow'),
    DISPMETHOD([dispid(2)], None, 'EnvelopeHide'),
]


class DocumentLibraryVersions(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0388-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, lIndex: hints.Incomplete) -> 'DocumentLibraryVersion': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_IsVersioningEnabled(self) -> hints.Incomplete: ...
        IsVersioningEnabled = hints.normal_property(_get_IsVersioningEnabled)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class DocumentLibraryVersion(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0387-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Modified(self) -> hints.Incomplete: ...
        Modified = hints.normal_property(_get_Modified)
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ModifiedBy(self) -> hints.Incomplete: ...
        ModifiedBy = hints.normal_property(_get_ModifiedBy)
        def _get_Comments(self) -> hints.Incomplete: ...
        Comments = hints.normal_property(_get_Comments)
        def Delete(self) -> hints.Hresult: ...
        def Open(self) -> hints.Incomplete: ...
        def Restore(self) -> hints.Incomplete: ...


DocumentLibraryVersions._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'lIndex'),
        (['out', 'retval'], POINTER(POINTER(DocumentLibraryVersion)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'lCount')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'IsVersioningEnabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfVersioningOn')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
]

################################################################
# code template for DocumentLibraryVersions implementation
# class DocumentLibraryVersions_Impl(object):
#     @property
#     def Item(self, lIndex):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return lCount
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def IsVersioningEnabled(self):
#         '-no docstring-'
#         #return pvarfVersioningOn
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#


class LegendEntries(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1719-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'LegendEntry': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__Default(self, Index: hints.Incomplete) -> 'LegendEntry': ...
        _Default = hints.named_property('_Default', _get__Default)


class LegendEntry(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C171A-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_LegendKey(self) -> 'IMsoLegendKey': ...
        LegendKey = hints.normal_property(_get_LegendKey)
        def Select(self) -> hints.Incomplete: ...
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_Left(self) -> hints.Incomplete: ...
        Left = hints.normal_property(_get_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        Top = hints.normal_property(_get_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


LegendEntries._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(LegendEntry)), 'RHS')
    ),
    COMMETHOD(
        ['nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['nonbrowsable', 'propget'],
        HRESULT,
        '_Default',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(LegendEntry)), 'RHS')
    ),
]

################################################################
# code template for LegendEntries implementation
# class LegendEntries_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#


class SeriesCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C170A-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Add(self, Source: hints.Incomplete, Rowcol: hints.Incomplete = ..., SeriesLabels: hints.Incomplete = ..., CategoryLabels: hints.Incomplete = ..., Replace: hints.Incomplete = ...) -> 'IMsoSeries': ...
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Extend(self, Source: hints.Incomplete, Rowcol: hints.Incomplete = ..., CategoryLabels: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Item(self, Index: hints.Incomplete) -> 'IMsoSeries': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Paste(self, Rowcol: hints.Incomplete = ..., SeriesLabels: hints.Incomplete = ..., CategoryLabels: hints.Incomplete = ..., Replace: hints.Incomplete = ..., NewSeries: hints.Incomplete = ...) -> hints.Incomplete: ...
        def NewSeries(self) -> 'IMsoSeries': ...
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__Default(self, Index: hints.Incomplete) -> 'IMsoSeries': ...
        _Default = hints.named_property('_Default', _get__Default)


SeriesCollection._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Add',
        (['in'], VARIANT, 'Source'),
        (['in', 'optional'], XlRowCol, 'Rowcol', 2),
        (['in', 'optional'], VARIANT, 'SeriesLabels'),
        (['in', 'optional'], VARIANT, 'CategoryLabels'),
        (['in', 'optional'], VARIANT, 'Replace'),
        (['out', 'retval'], POINTER(POINTER(IMsoSeries)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Extend',
        (['in'], VARIANT, 'Source'),
        (['in', 'optional'], VARIANT, 'Rowcol'),
        (['in', 'optional'], VARIANT, 'CategoryLabels'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoSeries)), 'RHS')
    ),
    COMMETHOD(
        ['nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Paste',
        (['in', 'optional'], XlRowCol, 'Rowcol', 2),
        (['in', 'optional'], VARIANT, 'SeriesLabels'),
        (['in', 'optional'], VARIANT, 'CategoryLabels'),
        (['in', 'optional'], VARIANT, 'Replace'),
        (['in', 'optional'], VARIANT, 'NewSeries'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'NewSeries',
        (['out', 'retval'], POINTER(POINTER(IMsoSeries)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['nonbrowsable', 'propget'],
        HRESULT,
        '_Default',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoSeries)), 'RHS')
    ),
]

################################################################
# code template for SeriesCollection implementation
# class SeriesCollection_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def Add(self, Source, Rowcol, SeriesLabels, CategoryLabels, Replace):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Extend(self, Source, Rowcol, CategoryLabels):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     def Paste(self, Rowcol, SeriesLabels, CategoryLabels, Replace, NewSeries):
#         '-no docstring-'
#         #return RHS
#
#     def NewSeries(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#

_CommandBarButtonEvents._disp_methods_ = [
    DISPMETHOD(
        [dispid(1)],
        None,
        'Click',
        (['in'], POINTER(CommandBarButton), 'Ctrl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'CancelDefault')
    ),
]


class Signature(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0411-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Signer(self) -> hints.Incomplete: ...
        Signer = hints.normal_property(_get_Signer)
        def _get_Issuer(self) -> hints.Incomplete: ...
        Issuer = hints.normal_property(_get_Issuer)
        def _get_ExpireDate(self) -> hints.Incomplete: ...
        ExpireDate = hints.normal_property(_get_ExpireDate)
        def _get_IsValid(self) -> hints.Incomplete: ...
        IsValid = hints.normal_property(_get_IsValid)
        def _get_AttachCertificate(self) -> hints.Incomplete: ...
        def _set_AttachCertificate(self, pvarfAttach: hints.Incomplete) -> hints.Hresult: ...
        AttachCertificate = hints.normal_property(_get_AttachCertificate, _set_AttachCertificate)
        def Delete(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_IsCertificateExpired(self) -> hints.Incomplete: ...
        IsCertificateExpired = hints.normal_property(_get_IsCertificateExpired)
        def _get_IsCertificateRevoked(self) -> hints.Incomplete: ...
        IsCertificateRevoked = hints.normal_property(_get_IsCertificateRevoked)
        def _get_SignDate(self) -> hints.Incomplete: ...
        SignDate = hints.normal_property(_get_SignDate)
        def _get_IsSigned(self) -> hints.Incomplete: ...
        IsSigned = hints.normal_property(_get_IsSigned)
        def Sign(self, varSigImg: hints.Incomplete = ..., varDelSuggSigner: hints.Incomplete = ..., varDelSuggSignerLine2: hints.Incomplete = ..., varDelSuggSignerEmail: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_Details(self) -> 'SignatureInfo': ...
        Details = hints.normal_property(_get_Details)
        def ShowDetails(self) -> hints.Hresult: ...
        def _get_CanSetup(self) -> hints.Incomplete: ...
        CanSetup = hints.normal_property(_get_CanSetup)
        def _get_Setup(self) -> 'SignatureSetup': ...
        Setup = hints.normal_property(_get_Setup)
        def _get_IsSignatureLine(self) -> hints.Incomplete: ...
        IsSignatureLine = hints.normal_property(_get_IsSignatureLine)
        def _get_SignatureLineShape(self) -> hints.Incomplete: ...
        SignatureLineShape = hints.normal_property(_get_SignatureLineShape)
        def _get_SortHint(self) -> hints.Incomplete: ...
        SortHint = hints.normal_property(_get_SortHint)


Signature._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'hidden', 'propget'],
        HRESULT,
        'Signer',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809345), 'hidden', 'propget'],
        HRESULT,
        'Issuer',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'hidden', 'propget'],
        HRESULT,
        'ExpireDate',
        (['out', 'retval'], POINTER(VARIANT), 'pvarDate')
    ),
    COMMETHOD(
        [dispid(1610809347), 'hidden', 'propget'],
        HRESULT,
        'IsValid',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfValid')
    ),
    COMMETHOD(
        [dispid(1610809348), 'hidden', 'propget'],
        HRESULT,
        'AttachCertificate',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfAttach')
    ),
    COMMETHOD(
        [dispid(1610809348), 'hidden', 'propput'],
        HRESULT,
        'AttachCertificate',
        (['in'], VARIANT_BOOL, 'pvarfAttach')
    ),
    COMMETHOD([dispid(1610809350)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(1610809351), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809352), 'hidden', 'propget'],
        HRESULT,
        'IsCertificateExpired',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfExpired')
    ),
    COMMETHOD(
        [dispid(1610809353), 'hidden', 'propget'],
        HRESULT,
        'IsCertificateRevoked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfRevoked')
    ),
    COMMETHOD(
        [dispid(1610809354), 'hidden', 'propget'],
        HRESULT,
        'SignDate',
        (['out', 'retval'], POINTER(VARIANT), 'pvarDate')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propget'],
        HRESULT,
        'IsSigned',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfSigned')
    ),
    COMMETHOD(
        [dispid(1610809356)],
        HRESULT,
        'Sign',
        (['in', 'optional'], VARIANT, 'varSigImg'),
        (['in', 'optional'], VARIANT, 'varDelSuggSigner'),
        (['in', 'optional'], VARIANT, 'varDelSuggSignerLine2'),
        (['in', 'optional'], VARIANT, 'varDelSuggSignerEmail')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propget'],
        HRESULT,
        'Details',
        (['out', 'retval'], POINTER(POINTER(SignatureInfo)), 'ppsiginfo')
    ),
    COMMETHOD([dispid(1610809358)], HRESULT, 'ShowDetails'),
    COMMETHOD(
        [dispid(1610809359), 'propget'],
        HRESULT,
        'CanSetup',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfCanSetup')
    ),
    COMMETHOD(
        [dispid(1610809360), 'propget'],
        HRESULT,
        'Setup',
        (['out', 'retval'], POINTER(POINTER(SignatureSetup)), 'ppsigsetup')
    ),
    COMMETHOD(
        [dispid(1610809361), 'propget'],
        HRESULT,
        'IsSignatureLine',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfSignatureLine')
    ),
    COMMETHOD(
        [dispid(1610809362), 'propget'],
        HRESULT,
        'SignatureLineShape',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidispShape')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propget'],
        HRESULT,
        'SortHint',
        (['out', 'retval'], POINTER(c_int), 'plSortHint')
    ),
]

################################################################
# code template for Signature implementation
# class Signature_Impl(object):
#     @property
#     def Signer(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Issuer(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def ExpireDate(self):
#         '-no docstring-'
#         #return pvarDate
#
#     @property
#     def IsValid(self):
#         '-no docstring-'
#         #return pvarfValid
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfAttach
#     def _set(self, pvarfAttach):
#         '-no docstring-'
#     AttachCertificate = property(_get, _set, doc = _set.__doc__)
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def IsCertificateExpired(self):
#         '-no docstring-'
#         #return pvarfExpired
#
#     @property
#     def IsCertificateRevoked(self):
#         '-no docstring-'
#         #return pvarfRevoked
#
#     @property
#     def SignDate(self):
#         '-no docstring-'
#         #return pvarDate
#
#     @property
#     def IsSigned(self):
#         '-no docstring-'
#         #return pvarfSigned
#
#     def Sign(self, varSigImg, varDelSuggSigner, varDelSuggSignerLine2, varDelSuggSignerEmail):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Details(self):
#         '-no docstring-'
#         #return ppsiginfo
#
#     def ShowDetails(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def CanSetup(self):
#         '-no docstring-'
#         #return pvarfCanSetup
#
#     @property
#     def Setup(self):
#         '-no docstring-'
#         #return ppsigsetup
#
#     @property
#     def IsSignatureLine(self):
#         '-no docstring-'
#         #return pvarfSignatureLine
#
#     @property
#     def SignatureLineShape(self):
#         '-no docstring-'
#         #return ppidispShape
#
#     @property
#     def SortHint(self):
#         '-no docstring-'
#         #return plSortHint
#


class ILicWizExternal(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4CAC6328-B9B0-11D3-8D59-0050048384E3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def PrintHtmlDocument(self, punkHtmlDoc: hints.Incomplete) -> hints.Hresult: ...
        def InvokeDateTimeApplet(self) -> hints.Hresult: ...
        def FormatDate(self, date: hints.Incomplete, pFormat: hints.Incomplete = ...) -> hints.Incomplete: ...
        def ShowHelp(self, pvarId: hints.Incomplete = ...) -> hints.Hresult: ...
        def Terminate(self) -> hints.Hresult: ...
        def DisableVORWReminder(self, BPC: hints.Incomplete) -> hints.Hresult: ...
        def SaveReceipt(self, bstrReceipt: hints.Incomplete) -> hints.Incomplete: ...
        def OpenInDefaultBrowser(self, bstrUrl: hints.Incomplete) -> hints.Hresult: ...
        def MsoAlert(self, bstrText: hints.Incomplete, bstrButtons: hints.Incomplete, bstrIcon: hints.Incomplete) -> hints.Incomplete: ...
        def DepositPidKey(self, bstrKey: hints.Incomplete, fMORW: hints.Incomplete) -> hints.Incomplete: ...
        def WriteLog(self, bstrMessage: hints.Incomplete) -> hints.Hresult: ...
        def ResignDpc(self, bstrProductCode: hints.Incomplete) -> hints.Hresult: ...
        def ResetPID(self) -> hints.Hresult: ...
        def SetDialogSize(self, dx: hints.Incomplete, dy: hints.Incomplete) -> hints.Hresult: ...
        def VerifyClock(self, lMode: hints.Incomplete) -> hints.Incomplete: ...
        def SortSelectOptions(self, pdispSelect: hints.Incomplete) -> hints.Hresult: ...
        def InternetDisconnect(self) -> hints.Hresult: ...
        def GetConnectedState(self) -> hints.Incomplete: ...
        def _get_Context(self) -> hints.Incomplete: ...
        Context = hints.normal_property(_get_Context)
        def _get_Validator(self) -> hints.Incomplete: ...
        Validator = hints.normal_property(_get_Validator)
        def _get_LicAgent(self) -> hints.Incomplete: ...
        LicAgent = hints.normal_property(_get_LicAgent)
        def _get_CountryInfo(self) -> hints.Incomplete: ...
        CountryInfo = hints.normal_property(_get_CountryInfo)
        def _set_WizardVisible(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        WizardVisible = hints.normal_property(fset=_set_WizardVisible)
        def _set_WizardTitle(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        WizardTitle = hints.normal_property(fset=_set_WizardTitle)
        def _get_AnimationEnabled(self) -> hints.Incomplete: ...
        AnimationEnabled = hints.normal_property(_get_AnimationEnabled)
        def _set_CurrentHelpId(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        CurrentHelpId = hints.normal_property(fset=_set_CurrentHelpId)
        def _get_OfficeOnTheWebUrl(self) -> hints.Incomplete: ...
        OfficeOnTheWebUrl = hints.normal_property(_get_OfficeOnTheWebUrl)


ILicWizExternal._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'PrintHtmlDocument',
        (['in'], POINTER(IUnknown), 'punkHtmlDoc')
    ),
    COMMETHOD([dispid(2)], HRESULT, 'InvokeDateTimeApplet'),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'FormatDate',
        (['in'], c_double, 'date'),
        (['in', 'optional'], BSTR, 'pFormat'),
        (['out', 'retval'], POINTER(BSTR), 'pDateString')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'ShowHelp',
        (['in', 'optional'], POINTER(VARIANT), 'pvarId')
    ),
    COMMETHOD([dispid(5)], HRESULT, 'Terminate'),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'DisableVORWReminder',
        (['in'], c_int, 'BPC')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SaveReceipt',
        (['in'], BSTR, 'bstrReceipt'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrPath')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'OpenInDefaultBrowser',
        (['in'], BSTR, 'bstrUrl')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'MsoAlert',
        (['in'], BSTR, 'bstrText'),
        (['in'], BSTR, 'bstrButtons'),
        (['in'], BSTR, 'bstrIcon'),
        (['out', 'retval'], POINTER(c_int), 'plRet')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'DepositPidKey',
        (['in'], BSTR, 'bstrKey'),
        (['in'], c_int, 'fMORW'),
        (['out', 'retval'], POINTER(c_int), 'plRet')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'WriteLog',
        (['in'], BSTR, 'bstrMessage')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'ResignDpc',
        (['in'], BSTR, 'bstrProductCode')
    ),
    COMMETHOD([dispid(13)], HRESULT, 'ResetPID'),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetDialogSize',
        (['in'], c_int, 'dx'),
        (['in'], c_int, 'dy')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'VerifyClock',
        (['in'], c_int, 'lMode'),
        (['out', 'retval'], POINTER(c_int), 'plRet')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SortSelectOptions',
        (['in'], POINTER(IDispatch), 'pdispSelect')
    ),
    COMMETHOD([dispid(17)], HRESULT, 'InternetDisconnect'),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetConnectedState',
        (['out', 'retval'], POINTER(c_int), 'pfConnected')
    ),
    COMMETHOD(
        [dispid(20), 'propget'],
        HRESULT,
        'Context',
        (['out', 'retval'], POINTER(c_int), 'plwctx')
    ),
    COMMETHOD(
        [dispid(21), 'propget'],
        HRESULT,
        'Validator',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispValidator')
    ),
    COMMETHOD(
        [dispid(22), 'propget'],
        HRESULT,
        'LicAgent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispLicAgent')
    ),
    COMMETHOD(
        [dispid(23), 'propget'],
        HRESULT,
        'CountryInfo',
        (['out', 'retval'], POINTER(BSTR), 'pbstrUrl')
    ),
    COMMETHOD(
        [dispid(24), 'propput'],
        HRESULT,
        'WizardVisible',
        (['in'], c_int, 'rhs')
    ),
    COMMETHOD(
        [dispid(25), 'propput'],
        HRESULT,
        'WizardTitle',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(26), 'propget'],
        HRESULT,
        'AnimationEnabled',
        (['out', 'retval'], POINTER(c_int), 'fEnabled')
    ),
    COMMETHOD(
        [dispid(27), 'propput'],
        HRESULT,
        'CurrentHelpId',
        (['in'], c_int, 'rhs')
    ),
    COMMETHOD(
        [dispid(28), 'propget'],
        HRESULT,
        'OfficeOnTheWebUrl',
        (['out', 'retval'], POINTER(BSTR), 'bstrUrl')
    ),
]

################################################################
# code template for ILicWizExternal implementation
# class ILicWizExternal_Impl(object):
#     def PrintHtmlDocument(self, punkHtmlDoc):
#         '-no docstring-'
#         #return 
#
#     def InvokeDateTimeApplet(self):
#         '-no docstring-'
#         #return 
#
#     def FormatDate(self, date, pFormat):
#         '-no docstring-'
#         #return pDateString
#
#     def ShowHelp(self, pvarId):
#         '-no docstring-'
#         #return 
#
#     def Terminate(self):
#         '-no docstring-'
#         #return 
#
#     def DisableVORWReminder(self, BPC):
#         '-no docstring-'
#         #return 
#
#     def SaveReceipt(self, bstrReceipt):
#         '-no docstring-'
#         #return pbstrPath
#
#     def OpenInDefaultBrowser(self, bstrUrl):
#         '-no docstring-'
#         #return 
#
#     def MsoAlert(self, bstrText, bstrButtons, bstrIcon):
#         '-no docstring-'
#         #return plRet
#
#     def DepositPidKey(self, bstrKey, fMORW):
#         '-no docstring-'
#         #return plRet
#
#     def WriteLog(self, bstrMessage):
#         '-no docstring-'
#         #return 
#
#     def ResignDpc(self, bstrProductCode):
#         '-no docstring-'
#         #return 
#
#     def ResetPID(self):
#         '-no docstring-'
#         #return 
#
#     def SetDialogSize(self, dx, dy):
#         '-no docstring-'
#         #return 
#
#     def VerifyClock(self, lMode):
#         '-no docstring-'
#         #return plRet
#
#     def SortSelectOptions(self, pdispSelect):
#         '-no docstring-'
#         #return 
#
#     def InternetDisconnect(self):
#         '-no docstring-'
#         #return 
#
#     def GetConnectedState(self):
#         '-no docstring-'
#         #return pfConnected
#
#     @property
#     def Context(self):
#         '-no docstring-'
#         #return plwctx
#
#     @property
#     def Validator(self):
#         '-no docstring-'
#         #return ppdispValidator
#
#     @property
#     def LicAgent(self):
#         '-no docstring-'
#         #return ppdispLicAgent
#
#     @property
#     def CountryInfo(self):
#         '-no docstring-'
#         #return pbstrUrl
#
#     def _set(self, rhs):
#         '-no docstring-'
#     WizardVisible = property(fset = _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         '-no docstring-'
#     WizardTitle = property(fset = _set, doc = _set.__doc__)
#
#     @property
#     def AnimationEnabled(self):
#         '-no docstring-'
#         #return fEnabled
#
#     def _set(self, rhs):
#         '-no docstring-'
#     CurrentHelpId = property(fset = _set, doc = _set.__doc__)
#
#     @property
#     def OfficeOnTheWebUrl(self):
#         '-no docstring-'
#         #return bstrUrl
#


class CustomXMLValidationErrors(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CDB0F-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, Index: hints.Incomplete) -> 'CustomXMLValidationError': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Node: hints.Incomplete, ErrorName: hints.Incomplete, ErrorText: hints.Incomplete = ..., ClearedOnUpdate: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


_CustomXMLPart._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'DocumentElement',
        (
            ['out', 'retval'],
            POINTER(POINTER(CustomXMLNode)),
            'ppDocumentElement',
        )
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'pbstrID')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'NamespaceURI',
        (['out', 'retval'], POINTER(BSTR), 'pbstrNamespaceURI')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'SchemaCollection',
        (
            ['out', 'retval'],
            POINTER(POINTER(CustomXMLSchemaCollection)),
            'ppSchemaCollection',
        )
    ),
    COMMETHOD(
        [dispid(1610809348), 'propput'],
        HRESULT,
        'SchemaCollection',
        (['in'], POINTER(CustomXMLSchemaCollection), 'ppSchemaCollection')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propget'],
        HRESULT,
        'NamespaceManager',
        (
            ['out', 'retval'],
            POINTER(POINTER(CustomXMLPrefixMappings)),
            'ppPrefixMappings',
        )
    ),
    COMMETHOD(
        [dispid(1610809351), 'propget'],
        HRESULT,
        'XML',
        (['out', 'retval'], POINTER(BSTR), 'pbstrXML')
    ),
    COMMETHOD(
        [dispid(1610809352)],
        HRESULT,
        'AddNode',
        (['in'], POINTER(CustomXMLNode), 'Parent'),
        (['in', 'optional'], BSTR, 'Name', ''),
        (['in', 'optional'], BSTR, 'NamespaceURI', ''),
        (['in', 'optional'], POINTER(CustomXMLNode), 'NextSibling', 0),
        (['in', 'optional'], MsoCustomXMLNodeType, 'NodeType', 1),
        (['in', 'optional'], BSTR, 'NodeValue', '')
    ),
    COMMETHOD([dispid(1610809353)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(1610809354)],
        HRESULT,
        'Load',
        (['in'], BSTR, 'FilePath'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfRet')
    ),
    COMMETHOD(
        [dispid(1610809355)],
        HRESULT,
        'LoadXML',
        (['in'], BSTR, 'XML'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfRet')
    ),
    COMMETHOD(
        [dispid(1610809356)],
        HRESULT,
        'SelectNodes',
        (['in'], BSTR, 'XPath'),
        (['out', 'retval'], POINTER(POINTER(CustomXMLNodes)), 'ppNodes')
    ),
    COMMETHOD(
        [dispid(1610809357)],
        HRESULT,
        'SelectSingleNode',
        (['in'], BSTR, 'XPath'),
        (['out', 'retval'], POINTER(POINTER(CustomXMLNode)), 'ppNode')
    ),
    COMMETHOD(
        [dispid(1610809358), 'propget'],
        HRESULT,
        'Errors',
        (
            ['out', 'retval'],
            POINTER(POINTER(CustomXMLValidationErrors)),
            'ppErrors',
        )
    ),
    COMMETHOD(
        [dispid(1610809359), 'propget'],
        HRESULT,
        'BuiltIn',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfRet')
    ),
]

################################################################
# code template for _CustomXMLPart implementation
# class _CustomXMLPart_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def DocumentElement(self):
#         '-no docstring-'
#         #return ppDocumentElement
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pbstrID
#
#     @property
#     def NamespaceURI(self):
#         '-no docstring-'
#         #return pbstrNamespaceURI
#
#     def _get(self):
#         '-no docstring-'
#         #return ppSchemaCollection
#     def _set(self, ppSchemaCollection):
#         '-no docstring-'
#     SchemaCollection = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def NamespaceManager(self):
#         '-no docstring-'
#         #return ppPrefixMappings
#
#     @property
#     def XML(self):
#         '-no docstring-'
#         #return pbstrXML
#
#     def AddNode(self, Parent, Name, NamespaceURI, NextSibling, NodeType, NodeValue):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Load(self, FilePath):
#         '-no docstring-'
#         #return pfRet
#
#     def LoadXML(self, XML):
#         '-no docstring-'
#         #return pfRet
#
#     def SelectNodes(self, XPath):
#         '-no docstring-'
#         #return ppNodes
#
#     def SelectSingleNode(self, XPath):
#         '-no docstring-'
#         #return ppNode
#
#     @property
#     def Errors(self):
#         '-no docstring-'
#         #return ppErrors
#
#     @property
#     def BuiltIn(self):
#         '-no docstring-'
#         #return pfRet
#

IMsoChartData._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Workbook',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispWorkbook')
    ),
    COMMETHOD([dispid(1610743809)], HRESULT, 'Activate'),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'IsLinked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfIsLinked')
    ),
    COMMETHOD([dispid(1610743811)], HRESULT, 'BreakLink'),
    COMMETHOD([dispid(1610743812)], HRESULT, 'ActivateChartDataWindow'),
]

################################################################
# code template for IMsoChartData implementation
# class IMsoChartData_Impl(object):
#     @property
#     def Workbook(self):
#         '-no docstring-'
#         #return ppdispWorkbook
#
#     def Activate(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def IsLinked(self):
#         '-no docstring-'
#         #return pfIsLinked
#
#     def BreakLink(self):
#         '-no docstring-'
#         #return 
#
#     def ActivateChartDataWindow(self):
#         '-no docstring-'
#         #return 
#


class SharedWorkspaceFolder(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C037D-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_FolderName(self) -> hints.Incomplete: ...
        FolderName = hints.normal_property(_get_FolderName)
        def Delete(self, DeleteEventIfFolderContainsFiles: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


SharedWorkspaceFolder._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'FolderName',
        (['out', 'retval'], POINTER(BSTR), 'FolderName')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Delete',
        (['in', 'optional'], VARIANT, 'DeleteEventIfFolderContainsFiles')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for SharedWorkspaceFolder implementation
# class SharedWorkspaceFolder_Impl(object):
#     @property
#     def FolderName(self):
#         '-no docstring-'
#         #return FolderName
#
#     def Delete(self, DeleteEventIfFolderContainsFiles):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class SharedWorkspaceLink(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C037F-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_URL(self) -> hints.Incomplete: ...
        def _set_URL(self, URL: hints.Incomplete) -> hints.Hresult: ...
        URL = hints.normal_property(_get_URL, _set_URL)
        def _get_Description(self) -> hints.Incomplete: ...
        def _set_Description(self, Description: hints.Incomplete) -> hints.Hresult: ...
        Description = hints.normal_property(_get_Description, _set_Description)
        def _get_Notes(self) -> hints.Incomplete: ...
        def _set_Notes(self, Notes: hints.Incomplete) -> hints.Hresult: ...
        Notes = hints.normal_property(_get_Notes, _set_Notes)
        def _get_CreatedBy(self) -> hints.Incomplete: ...
        CreatedBy = hints.normal_property(_get_CreatedBy)
        def _get_CreatedDate(self) -> hints.Incomplete: ...
        CreatedDate = hints.normal_property(_get_CreatedDate)
        def _get_ModifiedBy(self) -> hints.Incomplete: ...
        ModifiedBy = hints.normal_property(_get_ModifiedBy)
        def _get_ModifiedDate(self) -> hints.Incomplete: ...
        ModifiedDate = hints.normal_property(_get_ModifiedDate)
        def Save(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


SharedWorkspaceLink._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'URL',
        (['out', 'retval'], POINTER(BSTR), 'URL')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'URL',
        (['in'], BSTR, 'URL')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'Description',
        (['in'], BSTR, 'Description')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Notes',
        (['out', 'retval'], POINTER(BSTR), 'Notes')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Notes',
        (['in'], BSTR, 'Notes')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'CreatedBy',
        (['out', 'retval'], POINTER(BSTR), 'CreatedBy')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'CreatedDate',
        (['out', 'retval'], POINTER(VARIANT), 'CreatedDate')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'ModifiedBy',
        (['out', 'retval'], POINTER(BSTR), 'ModifiedBy')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'ModifiedDate',
        (['out', 'retval'], POINTER(VARIANT), 'ModifiedDate')
    ),
    COMMETHOD([dispid(7)], HRESULT, 'Save'),
    COMMETHOD([dispid(8)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for SharedWorkspaceLink implementation
# class SharedWorkspaceLink_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return URL
#     def _set(self, URL):
#         '-no docstring-'
#     URL = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Description
#     def _set(self, Description):
#         '-no docstring-'
#     Description = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Notes
#     def _set(self, Notes):
#         '-no docstring-'
#     Notes = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def CreatedBy(self):
#         '-no docstring-'
#         #return CreatedBy
#
#     @property
#     def CreatedDate(self):
#         '-no docstring-'
#         #return CreatedDate
#
#     @property
#     def ModifiedBy(self):
#         '-no docstring-'
#         #return ModifiedBy
#
#     @property
#     def ModifiedDate(self):
#         '-no docstring-'
#         #return ModifiedDate
#
#     def Save(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class Sync(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0386-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Status(self) -> hints.Incomplete: ...
        Status = hints.normal_property(_get_Status)
        def _get_WorkspaceLastChangedBy(self) -> hints.Incomplete: ...
        WorkspaceLastChangedBy = hints.normal_property(_get_WorkspaceLastChangedBy)
        def _get_LastSyncTime(self) -> hints.Incomplete: ...
        LastSyncTime = hints.normal_property(_get_LastSyncTime)
        def _get_ErrorType(self) -> hints.Incomplete: ...
        ErrorType = hints.normal_property(_get_ErrorType)
        def GetUpdate(self) -> hints.Hresult: ...
        def PutUpdate(self) -> hints.Hresult: ...
        def OpenVersion(self, SyncVersionType: hints.Incomplete) -> hints.Hresult: ...
        def ResolveConflict(self, SyncConflictResolution: hints.Incomplete) -> hints.Hresult: ...
        def Unsuspend(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


Sync._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Status',
        (['out', 'retval'], POINTER(MsoSyncStatusType), 'pStatusType')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'WorkspaceLastChangedBy',
        (['out', 'retval'], POINTER(BSTR), 'pbstrWorkspaceLastChangedBy')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'LastSyncTime',
        (['out', 'retval'], POINTER(VARIANT), 'pdatSavedTo')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ErrorType',
        (['out', 'retval'], POINTER(MsoSyncErrorType), 'pErrorType')
    ),
    COMMETHOD([dispid(6)], HRESULT, 'GetUpdate'),
    COMMETHOD([dispid(7)], HRESULT, 'PutUpdate'),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'OpenVersion',
        (['in'], MsoSyncVersionType, 'SyncVersionType')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'ResolveConflict',
        (['in'], MsoSyncConflictResolutionType, 'SyncConflictResolution')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'Unsuspend'),
    COMMETHOD(
        [dispid(14), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for Sync implementation
# class Sync_Impl(object):
#     @property
#     def Status(self):
#         '-no docstring-'
#         #return pStatusType
#
#     @property
#     def WorkspaceLastChangedBy(self):
#         '-no docstring-'
#         #return pbstrWorkspaceLastChangedBy
#
#     @property
#     def LastSyncTime(self):
#         '-no docstring-'
#         #return pdatSavedTo
#
#     @property
#     def ErrorType(self):
#         '-no docstring-'
#         #return pErrorType
#
#     def GetUpdate(self):
#         '-no docstring-'
#         #return 
#
#     def PutUpdate(self):
#         '-no docstring-'
#         #return 
#
#     def OpenVersion(self, SyncVersionType):
#         '-no docstring-'
#         #return 
#
#     def ResolveConflict(self, SyncConflictResolution):
#         '-no docstring-'
#         #return 
#
#     def Unsuspend(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class UserPermission(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0375-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_UserId(self) -> hints.Incomplete: ...
        UserId = hints.normal_property(_get_UserId)
        def _get_Permission(self) -> hints.Incomplete: ...
        def _set_Permission(self, Permission: hints.Incomplete) -> hints.Hresult: ...
        Permission = hints.normal_property(_get_Permission, _set_Permission)
        def _get_ExpirationDate(self) -> hints.Incomplete: ...
        def _set_ExpirationDate(self, ExpirationDate: hints.Incomplete) -> hints.Hresult: ...
        ExpirationDate = hints.normal_property(_get_ExpirationDate, _set_ExpirationDate)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Remove(self) -> hints.Hresult: ...


UserPermission._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'UserId',
        (['out', 'retval'], POINTER(BSTR), 'UserId')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Permission',
        (['out', 'retval'], POINTER(c_int), 'Permission')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'Permission',
        (['in'], c_int, 'Permission')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'ExpirationDate',
        (['out', 'retval'], POINTER(VARIANT), 'ExpirationDate')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'ExpirationDate',
        (['in'], VARIANT, 'ExpirationDate')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD([dispid(4)], HRESULT, 'Remove'),
]

################################################################
# code template for UserPermission implementation
# class UserPermission_Impl(object):
#     @property
#     def UserId(self):
#         '-no docstring-'
#         #return UserId
#
#     def _get(self):
#         '-no docstring-'
#         #return Permission
#     def _set(self, Permission):
#         '-no docstring-'
#     Permission = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ExpirationDate
#     def _set(self, ExpirationDate):
#         '-no docstring-'
#     ExpirationDate = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def Remove(self):
#         '-no docstring-'
#         #return 
#


class MetaProperties(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C038E-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'MetaProperty': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def GetItemByInternalName(self, InternalName: hints.Incomplete) -> 'MetaProperty': ...
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Validate(self) -> hints.Incomplete: ...
        def _get_ValidationError(self) -> hints.Incomplete: ...
        ValidationError = hints.normal_property(_get_ValidationError)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_SchemaXml(self) -> hints.Incomplete: ...
        SchemaXml = hints.normal_property(_get_SchemaXml)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


MetaProperties._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(MetaProperty)), 'ppmp')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetItemByInternalName',
        (['in'], BSTR, 'InternalName'),
        (['out', 'retval'], POINTER(POINTER(MetaProperty)), 'ppmp')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pc')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Validate',
        (['out', 'retval'], POINTER(BSTR), 'pbstrError')
    ),
    COMMETHOD(
        [dispid(4), 'hidden', 'propget'],
        HRESULT,
        'ValidationError',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'SchemaXml',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for MetaProperties implementation
# class MetaProperties_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppmp
#
#     def GetItemByInternalName(self, InternalName):
#         '-no docstring-'
#         #return ppmp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pc
#
#     def Validate(self):
#         '-no docstring-'
#         #return pbstrError
#
#     @property
#     def ValidationError(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def SchemaXml(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class CustomTaskPane(CoClass):
    _reg_clsid_ = GUID('{C5771BE5-A188-466B-AB31-00A6A32B1B1C}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}', 2, 8)


class _CustomTaskPane(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C033B-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Title(self) -> hints.Incomplete: ...
        Title = hints.normal_property(_get_Title)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Window(self) -> hints.Incomplete: ...
        Window = hints.normal_property(_get_Window)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, prop: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_ContentControl(self) -> hints.Incomplete: ...
        ContentControl = hints.normal_property(_get_ContentControl)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, prop: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, prop: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_DockPosition(self) -> hints.Incomplete: ...
        def _set_DockPosition(self, prop: hints.Incomplete) -> hints.Hresult: ...
        DockPosition = hints.normal_property(_get_DockPosition, _set_DockPosition)
        def _get_DockPositionRestrict(self) -> hints.Incomplete: ...
        def _set_DockPositionRestrict(self, prop: hints.Incomplete) -> hints.Hresult: ...
        DockPositionRestrict = hints.normal_property(_get_DockPositionRestrict, _set_DockPositionRestrict)
        def Delete(self) -> hints.Hresult: ...


class _CustomTaskPaneEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C033C-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']
    _methods_ = []

    if TYPE_CHECKING:  # dispmembers
        def VisibleStateChange(self, CustomTaskPaneInst: hints.Incomplete) -> hints.Incomplete: ...
        def DockPositionStateChange(self, CustomTaskPaneInst: hints.Incomplete) -> hints.Incomplete: ...


CustomTaskPane._com_interfaces_ = [_CustomTaskPane]
CustomTaskPane._outgoing_interfaces_ = [_CustomTaskPaneEvents]


class IRibbonControl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0395-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_Context(self) -> hints.Incomplete: ...
        Context = hints.normal_property(_get_Context)
        def _get_Tag(self) -> hints.Incomplete: ...
        Tag = hints.normal_property(_get_Tag)


IRibbonControl._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'Id')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Context',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Context')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Tag',
        (['out', 'retval'], POINTER(BSTR), 'Tag')
    ),
]

################################################################
# code template for IRibbonControl implementation
# class IRibbonControl_Impl(object):
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return Id
#
#     @property
#     def Context(self):
#         '-no docstring-'
#         #return Context
#
#     @property
#     def Tag(self):
#         '-no docstring-'
#         #return Tag
#


class SharedWorkspaceFolders(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C037E-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Item(self, Index: hints.Incomplete) -> 'SharedWorkspaceFolder': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, FolderName: hints.Incomplete, ParentFolder: hints.Incomplete = ...) -> 'SharedWorkspaceFolder': ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ItemCountExceeded(self) -> hints.Incomplete: ...
        ItemCountExceeded = hints.normal_property(_get_ItemCountExceeded)


SharedWorkspaceFolders._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceFolder)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcItems')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'FolderName'),
        (['in', 'optional'], VARIANT, 'ParentFolder'),
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceFolder)), 'ppFolder')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ItemCountExceeded',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pf')
    ),
]

################################################################
# code template for SharedWorkspaceFolders implementation
# class SharedWorkspaceFolders_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcItems
#
#     def Add(self, FolderName, ParentFolder):
#         '-no docstring-'
#         #return ppFolder
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def ItemCountExceeded(self):
#         '-no docstring-'
#         #return pf
#


class PolicyItem(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0391-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Description(self) -> hints.Incomplete: ...
        Description = hints.normal_property(_get_Description)
        def _get_Data(self) -> hints.Incomplete: ...
        Data = hints.normal_property(_get_Data)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


PolicyItem._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'pbstrID')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'pbstrDescription')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Data',
        (['out', 'retval'], POINTER(BSTR), 'pbstrStatement')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for PolicyItem implementation
# class PolicyItem_Impl(object):
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pbstrID
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Description(self):
#         '-no docstring-'
#         #return pbstrDescription
#
#     @property
#     def Data(self):
#         '-no docstring-'
#         #return pbstrStatement
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class IRibbonUI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03A7-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Invalidate(self) -> hints.Hresult: ...
        def InvalidateControl(self, ControlID: hints.Incomplete) -> hints.Hresult: ...
        def InvalidateControlMso(self, ControlID: hints.Incomplete) -> hints.Hresult: ...
        def ActivateTab(self, ControlID: hints.Incomplete) -> hints.Hresult: ...
        def ActivateTabMso(self, ControlID: hints.Incomplete) -> hints.Hresult: ...
        def ActivateTabQ(self, ControlID: hints.Incomplete, Namespace: hints.Incomplete) -> hints.Hresult: ...


IRibbonUI._methods_ = [
    COMMETHOD([dispid(1)], HRESULT, 'Invalidate'),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'InvalidateControl',
        (['in'], BSTR, 'ControlID')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'InvalidateControlMso',
        (['in'], BSTR, 'ControlID')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'ActivateTab',
        (['in'], BSTR, 'ControlID')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'ActivateTabMso',
        (['in'], BSTR, 'ControlID')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'ActivateTabQ',
        (['in'], BSTR, 'ControlID'),
        (['in'], BSTR, 'Namespace')
    ),
]

################################################################
# code template for IRibbonUI implementation
# class IRibbonUI_Impl(object):
#     def Invalidate(self):
#         '-no docstring-'
#         #return 
#
#     def InvalidateControl(self, ControlID):
#         '-no docstring-'
#         #return 
#
#     def InvalidateControlMso(self, ControlID):
#         '-no docstring-'
#         #return 
#
#     def ActivateTab(self, ControlID):
#         '-no docstring-'
#         #return 
#
#     def ActivateTabMso(self, ControlID):
#         '-no docstring-'
#         #return 
#
#     def ActivateTabQ(self, ControlID, Namespace):
#         '-no docstring-'
#         #return 
#


class DocumentInspector(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0393-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Description(self) -> hints.Incomplete: ...
        Description = hints.normal_property(_get_Description)
        def Inspect(self) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        def Fix(self) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


DocumentInspector._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Inspect',
        (['out'], POINTER(MsoDocInspectorStatus), 'Status'),
        (['out'], POINTER(BSTR), 'Results')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Fix',
        (['out'], POINTER(MsoDocInspectorStatus), 'Status'),
        (['out'], POINTER(BSTR), 'Results')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for DocumentInspector implementation
# class DocumentInspector_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Description(self):
#         '-no docstring-'
#         #return Description
#
#     def Inspect(self):
#         '-no docstring-'
#         #return Status, Results
#
#     def Fix(self):
#         '-no docstring-'
#         #return Status, Results
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class Axes(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1712-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, Type: hints.Incomplete, AxisGroup: hints.Incomplete = ...) -> 'IMsoAxis': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__Default(self, Type: hints.Incomplete, AxisGroup: hints.Incomplete = ...) -> 'IMsoAxis': ...
        _Default = hints.named_property('_Default', _get__Default)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


Axes._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propget'],
        HRESULT,
        'Item',
        (['in'], XlAxisType, 'Type'),
        (['in', 'optional'], XlAxisGroup, 'AxisGroup', 1),
        (['out', 'retval'], POINTER(POINTER(IMsoAxis)), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'pval')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(0), 'nonbrowsable', 'propget'],
        HRESULT,
        '_Default',
        (['in'], XlAxisType, 'Type'),
        (['in', 'optional'], XlAxisGroup, 'AxisGroup', 1),
        (['out', 'retval'], POINTER(POINTER(IMsoAxis)), 'RHS')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
]

################################################################
# code template for Axes implementation
# class Axes_Impl(object):
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Item(self, Type, AxisGroup):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def _Default(self, Type, AxisGroup):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#


class WebComponentProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0373-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Shape(self) -> hints.Incomplete: ...
        Shape = hints.normal_property(_get_Shape)
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_URL(self) -> hints.Incomplete: ...
        def _set_URL(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        URL = hints.normal_property(_get_URL, _set_URL)
        def _get_HTML(self) -> hints.Incomplete: ...
        def _set_HTML(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        HTML = hints.normal_property(_get_HTML, _set_HTML)
        def _get_PreviewGraphic(self) -> hints.Incomplete: ...
        def _set_PreviewGraphic(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        PreviewGraphic = hints.normal_property(_get_PreviewGraphic, _set_PreviewGraphic)
        def _get_PreviewHTML(self) -> hints.Incomplete: ...
        def _set_PreviewHTML(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        PreviewHTML = hints.normal_property(_get_PreviewHTML, _set_PreviewHTML)
        def _get_Width(self) -> hints.Incomplete: ...
        def _set_Width(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Width = hints.normal_property(_get_Width, _set_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        def _set_Height(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Height = hints.normal_property(_get_Height, _set_Height)
        def _get_Tag(self) -> hints.Incomplete: ...
        def _set_Tag(self, RetValue: hints.Incomplete) -> hints.Hresult: ...
        Tag = hints.normal_property(_get_Tag, _set_Tag)


WebComponentProperties._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Shape',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RetValue')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'URL',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'URL',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'HTML',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'HTML',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'PreviewGraphic',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'PreviewGraphic',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'PreviewHTML',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'PreviewHTML',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_int), 'RetValue')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_int, 'RetValue')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_int), 'RetValue')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_int, 'RetValue')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'Tag',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(9), 'propput'],
        HRESULT,
        'Tag',
        (['in'], BSTR, 'RetValue')
    ),
]

################################################################
# code template for WebComponentProperties implementation
# class WebComponentProperties_Impl(object):
#     @property
#     def Shape(self):
#         '-no docstring-'
#         #return RetValue
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     URL = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     HTML = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     PreviewGraphic = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     PreviewHTML = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Tag = property(_get, _set, doc = _set.__doc__)
#


class SharedWorkspaceMember(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0381-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_DomainName(self) -> hints.Incomplete: ...
        DomainName = hints.normal_property(_get_DomainName)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Email(self) -> hints.Incomplete: ...
        Email = hints.normal_property(_get_Email)
        def Delete(self) -> hints.Hresult: ...
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


SharedWorkspaceMember._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'DomainName',
        (['out', 'retval'], POINTER(BSTR), 'pbstrDomainName')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Email',
        (['out', 'retval'], POINTER(BSTR), 'pbstrEmail')
    ),
    COMMETHOD([dispid(3)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(4), 'hidden', 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'Id')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for SharedWorkspaceMember implementation
# class SharedWorkspaceMember_Impl(object):
#     @property
#     def DomainName(self):
#         '-no docstring-'
#         #return pbstrDomainName
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Email(self):
#         '-no docstring-'
#         #return pbstrEmail
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return Id
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class IAssistance(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4291224C-DEFE-485B-8E69-6CF8AA85CB76}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def ShowHelp(self, HelpId: hints.Incomplete = ..., Scope: hints.Incomplete = ...) -> hints.Hresult: ...
        def SearchHelp(self, Query: hints.Incomplete, Scope: hints.Incomplete = ...) -> hints.Hresult: ...
        def SetDefaultContext(self, HelpId: hints.Incomplete) -> hints.Hresult: ...
        def ClearDefaultContext(self, HelpId: hints.Incomplete) -> hints.Hresult: ...


IAssistance._methods_ = [
    COMMETHOD(
        [dispid(1610743808), helpstring('ShowHelp Method')],
        HRESULT,
        'ShowHelp',
        (['in', 'optional'], BSTR, 'HelpId', ''),
        (['in', 'optional'], BSTR, 'Scope', '')
    ),
    COMMETHOD(
        [dispid(1610743809), helpstring('SearchHelp Method')],
        HRESULT,
        'SearchHelp',
        (['in'], BSTR, 'Query'),
        (['in', 'optional'], BSTR, 'Scope', '')
    ),
    COMMETHOD(
        [dispid(1610743810), helpstring('SetDefaultContext Method')],
        HRESULT,
        'SetDefaultContext',
        (['in'], BSTR, 'HelpId')
    ),
    COMMETHOD(
        [dispid(1610743811), helpstring('ClearDefaultContext Method')],
        HRESULT,
        'ClearDefaultContext',
        (['in'], BSTR, 'HelpId')
    ),
]

################################################################
# code template for IAssistance implementation
# class IAssistance_Impl(object):
#     def ShowHelp(self, HelpId, Scope):
#         'ShowHelp Method'
#         #return 
#
#     def SearchHelp(self, Query, Scope):
#         'SearchHelp Method'
#         #return 
#
#     def SetDefaultContext(self, HelpId):
#         'SetDefaultContext Method'
#         #return 
#
#     def ClearDefaultContext(self, HelpId):
#         'ClearDefaultContext Method'
#         #return 
#


class Points(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C170D-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'ChartPoint': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__Default(self, Index: hints.Incomplete) -> 'ChartPoint': ...
        _Default = hints.named_property('_Default', _get__Default)


class ChartPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C170C-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _ApplyDataLabels(self, Type: hints.Incomplete = ..., IMsoLegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def Copy(self) -> hints.Incomplete: ...
        def _get_DataLabel(self) -> 'IMsoDataLabel': ...
        DataLabel = hints.normal_property(_get_DataLabel)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Explosion(self) -> hints.Incomplete: ...
        def _set_Explosion(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Explosion = hints.normal_property(_get_Explosion, _set_Explosion)
        def _get_HasDataLabel(self) -> hints.Incomplete: ...
        def _set_HasDataLabel(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HasDataLabel = hints.normal_property(_get_HasDataLabel, _set_HasDataLabel)
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_InvertIfNegative(self) -> hints.Incomplete: ...
        def _set_InvertIfNegative(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertIfNegative = hints.normal_property(_get_InvertIfNegative, _set_InvertIfNegative)
        def _get_MarkerBackgroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColor = hints.normal_property(_get_MarkerBackgroundColor, _set_MarkerBackgroundColor)
        def _get_MarkerBackgroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColorIndex = hints.normal_property(_get_MarkerBackgroundColorIndex, _set_MarkerBackgroundColorIndex)
        def _get_MarkerForegroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColor = hints.normal_property(_get_MarkerForegroundColor, _set_MarkerForegroundColor)
        def _get_MarkerForegroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColorIndex = hints.normal_property(_get_MarkerForegroundColorIndex, _set_MarkerForegroundColorIndex)
        def _get_MarkerSize(self) -> hints.Incomplete: ...
        def _set_MarkerSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerSize = hints.normal_property(_get_MarkerSize, _set_MarkerSize)
        def _get_MarkerStyle(self) -> hints.Incomplete: ...
        def _set_MarkerStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerStyle = hints.normal_property(_get_MarkerStyle, _set_MarkerStyle)
        def Paste(self) -> hints.Incomplete: ...
        def _get_PictureType(self) -> hints.Incomplete: ...
        def _set_PictureType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureType = hints.normal_property(_get_PictureType, _set_PictureType)
        def _get_PictureUnit(self) -> hints.Incomplete: ...
        def _set_PictureUnit(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit = hints.normal_property(_get_PictureUnit, _set_PictureUnit)
        def Select(self) -> hints.Incomplete: ...
        def _get_ApplyPictToSides(self) -> hints.Incomplete: ...
        def _set_ApplyPictToSides(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToSides = hints.normal_property(_get_ApplyPictToSides, _set_ApplyPictToSides)
        def _get_ApplyPictToFront(self) -> hints.Incomplete: ...
        def _set_ApplyPictToFront(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToFront = hints.normal_property(_get_ApplyPictToFront, _set_ApplyPictToFront)
        def _get_ApplyPictToEnd(self) -> hints.Incomplete: ...
        def _set_ApplyPictToEnd(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ApplyPictToEnd = hints.normal_property(_get_ApplyPictToEnd, _set_ApplyPictToEnd)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_SecondaryPlot(self) -> hints.Incomplete: ...
        def _set_SecondaryPlot(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        SecondaryPlot = hints.normal_property(_get_SecondaryPlot, _set_SecondaryPlot)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def ApplyDataLabels(self, Type: hints.Incomplete = ..., IMsoLegendKey: hints.Incomplete = ..., AutoText: hints.Incomplete = ..., HasLeaderLines: hints.Incomplete = ..., ShowSeriesName: hints.Incomplete = ..., ShowCategoryName: hints.Incomplete = ..., ShowValue: hints.Incomplete = ..., ShowPercentage: hints.Incomplete = ..., ShowBubbleSize: hints.Incomplete = ..., Separator: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_Has3DEffect(self) -> hints.Incomplete: ...
        def _set_Has3DEffect(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Has3DEffect = hints.normal_property(_get_Has3DEffect, _set_Has3DEffect)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_PictureUnit2(self) -> hints.Incomplete: ...
        def _set_PictureUnit2(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit2 = hints.normal_property(_get_PictureUnit2, _set_PictureUnit2)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Left(self) -> hints.Incomplete: ...
        Left = hints.normal_property(_get_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        Top = hints.normal_property(_get_Top)
        def PieSliceLocation(self, loc: hints.Incomplete, Index: hints.Incomplete = ...) -> hints.Incomplete: ...
        def _get_IsTotal(self) -> hints.Incomplete: ...
        def _set_IsTotal(self, pval: hints.Incomplete) -> hints.Hresult: ...
        IsTotal = hints.normal_property(_get_IsTotal, _set_IsTotal)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


Points._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ChartPoint)), 'RHS')
    ),
    COMMETHOD(
        ['nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['nonbrowsable', 'propget'],
        HRESULT,
        '_Default',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ChartPoint)), 'RHS')
    ),
]

################################################################
# code template for Points implementation
# class Points_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#


class IMsoHyperlinks(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A98639A1-CB0C-4A5C-A511-96547F752ACD}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']


IMsoHyperlinks._methods_ = [
]

################################################################
# code template for IMsoHyperlinks implementation
# class IMsoHyperlinks_Impl(object):


class Balloon(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0324-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Checkboxes(self) -> hints.Incomplete: ...
        Checkboxes = hints.normal_property(_get_Checkboxes)
        def _get_Labels(self) -> hints.Incomplete: ...
        Labels = hints.normal_property(_get_Labels)
        def _get_BalloonType(self) -> hints.Incomplete: ...
        def _set_BalloonType(self, pbty: hints.Incomplete) -> hints.Hresult: ...
        BalloonType = hints.normal_property(_get_BalloonType, _set_BalloonType)
        def _get_Icon(self) -> hints.Incomplete: ...
        def _set_Icon(self, picn: hints.Incomplete) -> hints.Hresult: ...
        Icon = hints.normal_property(_get_Icon, _set_Icon)
        def _get_Heading(self) -> hints.Incomplete: ...
        def _set_Heading(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Heading = hints.normal_property(_get_Heading, _set_Heading)
        def _get_Text(self) -> hints.Incomplete: ...
        def _set_Text(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Text = hints.normal_property(_get_Text, _set_Text)
        def _get_Mode(self) -> hints.Incomplete: ...
        def _set_Mode(self, pmd: hints.Incomplete) -> hints.Hresult: ...
        Mode = hints.normal_property(_get_Mode, _set_Mode)
        def _get_Animation(self) -> hints.Incomplete: ...
        def _set_Animation(self, pfca: hints.Incomplete) -> hints.Hresult: ...
        Animation = hints.normal_property(_get_Animation, _set_Animation)
        def _get_Button(self) -> hints.Incomplete: ...
        def _set_Button(self, psbs: hints.Incomplete) -> hints.Hresult: ...
        Button = hints.normal_property(_get_Button, _set_Button)
        def _get_Callback(self) -> hints.Incomplete: ...
        def _set_Callback(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        Callback = hints.normal_property(_get_Callback, _set_Callback)
        def _get_Private(self) -> hints.Incomplete: ...
        def _set_Private(self, plPrivate: hints.Incomplete) -> hints.Hresult: ...
        Private = hints.normal_property(_get_Private, _set_Private)
        def SetAvoidRectangle(self, Left: hints.Incomplete, Top: hints.Incomplete, Right: hints.Incomplete, Bottom: hints.Incomplete) -> hints.Hresult: ...
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Show(self) -> hints.Incomplete: ...
        def Close(self) -> hints.Hresult: ...


Balloon._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Checkboxes',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Labels',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'BalloonType',
        (['in'], MsoBalloonType, 'pbty')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'BalloonType',
        (['out', 'retval'], POINTER(MsoBalloonType), 'pbty')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propput'],
        HRESULT,
        'Icon',
        (['in'], MsoIconType, 'picn')
    ),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'Icon',
        (['out', 'retval'], POINTER(MsoIconType), 'picn')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propput'],
        HRESULT,
        'Heading',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propget'],
        HRESULT,
        'Heading',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809353), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809353), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propput'],
        HRESULT,
        'Mode',
        (['in'], MsoModeType, 'pmd')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propget'],
        HRESULT,
        'Mode',
        (['out', 'retval'], POINTER(MsoModeType), 'pmd')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propput'],
        HRESULT,
        'Animation',
        (['in'], MsoAnimationType, 'pfca')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propget'],
        HRESULT,
        'Animation',
        (['out', 'retval'], POINTER(MsoAnimationType), 'pfca')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propput'],
        HRESULT,
        'Button',
        (['in'], MsoButtonSetType, 'psbs')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propget'],
        HRESULT,
        'Button',
        (['out', 'retval'], POINTER(MsoButtonSetType), 'psbs')
    ),
    COMMETHOD(
        [dispid(1610809361), 'propput'],
        HRESULT,
        'Callback',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809361), 'propget'],
        HRESULT,
        'Callback',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propput'],
        HRESULT,
        'Private',
        (['in'], c_int, 'plPrivate')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propget'],
        HRESULT,
        'Private',
        (['out', 'retval'], POINTER(c_int), 'plPrivate')
    ),
    COMMETHOD(
        [dispid(1610809365)],
        HRESULT,
        'SetAvoidRectangle',
        (['in'], c_int, 'Left'),
        (['in'], c_int, 'Top'),
        (['in'], c_int, 'Right'),
        (['in'], c_int, 'Bottom')
    ),
    COMMETHOD(
        [dispid(1610809366), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610809367)],
        HRESULT,
        'Show',
        (['out', 'retval'], POINTER(MsoBalloonButtonType), 'pibtn')
    ),
    COMMETHOD([dispid(1610809368)], HRESULT, 'Close'),
]

################################################################
# code template for Balloon implementation
# class Balloon_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Checkboxes(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Labels(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def _get(self):
#         '-no docstring-'
#         #return pbty
#     def _set(self, pbty):
#         '-no docstring-'
#     BalloonType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return picn
#     def _set(self, picn):
#         '-no docstring-'
#     Icon = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Heading = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pmd
#     def _set(self, pmd):
#         '-no docstring-'
#     Mode = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfca
#     def _set(self, pfca):
#         '-no docstring-'
#     Animation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return psbs
#     def _set(self, psbs):
#         '-no docstring-'
#     Button = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     Callback = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return plPrivate
#     def _set(self, plPrivate):
#         '-no docstring-'
#     Private = property(_get, _set, doc = _set.__doc__)
#
#     def SetAvoidRectangle(self, Left, Top, Right, Bottom):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     def Show(self):
#         '-no docstring-'
#         #return pibtn
#
#     def Close(self):
#         '-no docstring-'
#         #return 
#


class OfficeDataSourceObject(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1530-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ConnectString(self) -> hints.Incomplete: ...
        def _set_ConnectString(self, pbstrConnect: hints.Incomplete) -> hints.Hresult: ...
        ConnectString = hints.normal_property(_get_ConnectString, _set_ConnectString)
        def _get_Table(self) -> hints.Incomplete: ...
        def _set_Table(self, pbstrTable: hints.Incomplete) -> hints.Hresult: ...
        Table = hints.normal_property(_get_Table, _set_Table)
        def _get_DataSource(self) -> hints.Incomplete: ...
        def _set_DataSource(self, pbstrSrc: hints.Incomplete) -> hints.Hresult: ...
        DataSource = hints.normal_property(_get_DataSource, _set_DataSource)
        def _get_Columns(self) -> hints.Incomplete: ...
        Columns = hints.normal_property(_get_Columns)
        def _get_RowCount(self) -> hints.Incomplete: ...
        RowCount = hints.normal_property(_get_RowCount)
        def _get_Filters(self) -> hints.Incomplete: ...
        Filters = hints.normal_property(_get_Filters)
        def Move(self, MsoMoveRow: hints.Incomplete, RowNbr: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Open(self, bstrSrc: hints.Incomplete = ..., bstrConnect: hints.Incomplete = ..., bstrTable: hints.Incomplete = ..., fOpenExclusive: hints.Incomplete = ..., fNeverPrompt: hints.Incomplete = ...) -> hints.Hresult: ...
        def SetSortOrder(self, SortField1: hints.Incomplete, SortAscending1: hints.Incomplete = ..., SortField2: hints.Incomplete = ..., SortAscending2: hints.Incomplete = ..., SortField3: hints.Incomplete = ..., SortAscending3: hints.Incomplete = ...) -> hints.Hresult: ...
        def ApplyFilter(self) -> hints.Hresult: ...



OfficeDataSourceObject._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'ConnectString',
        (['out', 'retval'], POINTER(BSTR), 'pbstrConnect')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'ConnectString',
        (['in'], BSTR, 'pbstrConnect')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Table',
        (['out', 'retval'], POINTER(BSTR), 'pbstrTable')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Table',
        (['in'], BSTR, 'pbstrTable')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'DataSource',
        (['out', 'retval'], POINTER(BSTR), 'pbstrSrc')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'DataSource',
        (['in'], BSTR, 'pbstrSrc')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Columns',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppColumns')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'RowCount',
        (['out', 'retval'], POINTER(c_int), 'pcRows')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'Filters',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppFilters')
    ),
    COMMETHOD(
        [dispid(1610743817)],
        HRESULT,
        'Move',
        (['in'], MsoMoveRow, 'MsoMoveRow'),
        (['in', 'optional'], c_int, 'RowNbr', 1),
        (['out', 'retval'], POINTER(c_int), 'rval')
    ),
    COMMETHOD(
        [dispid(1610743818)],
        HRESULT,
        'Open',
        (['in', 'optional'], BSTR, 'bstrSrc', ''),
        (['in', 'optional'], BSTR, 'bstrConnect', ''),
        (['in', 'optional'], BSTR, 'bstrTable', ''),
        (['in', 'optional'], c_int, 'fOpenExclusive', 0),
        (['in', 'optional'], c_int, 'fNeverPrompt', 1)
    ),
    COMMETHOD(
        [dispid(1610743819)],
        HRESULT,
        'SetSortOrder',
        (['in'], BSTR, 'SortField1'),
        (['in', 'optional'], VARIANT_BOOL, 'SortAscending1', True),
        (['in', 'optional'], BSTR, 'SortField2', ''),
        (['in', 'optional'], VARIANT_BOOL, 'SortAscending2', True),
        (['in', 'optional'], BSTR, 'SortField3', ''),
        (['in', 'optional'], VARIANT_BOOL, 'SortAscending3', True)
    ),
    COMMETHOD([dispid(1610743820)], HRESULT, 'ApplyFilter'),
]

################################################################
# code template for OfficeDataSourceObject implementation
# class OfficeDataSourceObject_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstrConnect
#     def _set(self, pbstrConnect):
#         '-no docstring-'
#     ConnectString = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrTable
#     def _set(self, pbstrTable):
#         '-no docstring-'
#     Table = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrSrc
#     def _set(self, pbstrSrc):
#         '-no docstring-'
#     DataSource = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Columns(self):
#         '-no docstring-'
#         #return ppColumns
#
#     @property
#     def RowCount(self):
#         '-no docstring-'
#         #return pcRows
#
#     @property
#     def Filters(self):
#         '-no docstring-'
#         #return ppFilters
#
#     def Move(self, MsoMoveRow, RowNbr):
#         '-no docstring-'
#         #return rval
#
#     def Open(self, bstrSrc, bstrConnect, bstrTable, fOpenExclusive, fNeverPrompt):
#         '-no docstring-'
#         #return 
#
#     def SetSortOrder(self, SortField1, SortAscending1, SortField2, SortAscending2, SortField3, SortAscending3):
#         '-no docstring-'
#         #return 
#
#     def ApplyFilter(self):
#         '-no docstring-'
#         #return 
#


class EncryptionProvider(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD809-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def GetProviderDetail(self, encprovdet: hints.Incomplete) -> hints.Incomplete: ...
        def NewSession(self, ParentWindow: hints.Incomplete) -> hints.Incomplete: ...
        def Authenticate(self, ParentWindow: hints.Incomplete, EncryptionData: hints.Incomplete) -> hints.Tuple[hints.Incomplete, hints.Incomplete]: ...
        def CloneSession(self, SessionHandle: hints.Incomplete) -> hints.Incomplete: ...
        def EndSession(self, SessionHandle: hints.Incomplete) -> hints.Hresult: ...
        def Save(self, SessionHandle: hints.Incomplete, EncryptionData: hints.Incomplete) -> hints.Incomplete: ...
        def EncryptStream(self, SessionHandle: hints.Incomplete, StreamName: hints.Incomplete, UnencryptedStream: hints.Incomplete, EncryptedStream: hints.Incomplete) -> hints.Hresult: ...
        def DecryptStream(self, SessionHandle: hints.Incomplete, StreamName: hints.Incomplete, EncryptedStream: hints.Incomplete, UnencryptedStream: hints.Incomplete) -> hints.Hresult: ...
        def ShowSettings(self, SessionHandle: hints.Incomplete, ParentWindow: hints.Incomplete, ReadOnly: hints.Incomplete) -> hints.Incomplete: ...



EncryptionProvider._methods_ = [
    COMMETHOD(
        [dispid(1610743808)],
        HRESULT,
        'GetProviderDetail',
        (['in'], EncryptionProviderDetail, 'encprovdet'),
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610743809)],
        HRESULT,
        'NewSession',
        (['in'], POINTER(IUnknown), 'ParentWindow'),
        (['out', 'retval'], POINTER(c_int), 'SessionHandle')
    ),
    COMMETHOD(
        [dispid(1610743810)],
        HRESULT,
        'Authenticate',
        (['in'], POINTER(IUnknown), 'ParentWindow'),
        (['in'], POINTER(IUnknown), 'EncryptionData'),
        (['out'], POINTER(c_uint), 'PermissionsMask'),
        (['out', 'retval'], POINTER(c_int), 'SessionHandle')
    ),
    COMMETHOD(
        [dispid(1610743811)],
        HRESULT,
        'CloneSession',
        (['in'], c_int, 'SessionHandle'),
        (['out', 'retval'], POINTER(c_int), 'SessionHandleClone')
    ),
    COMMETHOD(
        [dispid(1610743812)],
        HRESULT,
        'EndSession',
        (['in'], c_int, 'SessionHandle')
    ),
    COMMETHOD(
        [dispid(1610743813)],
        HRESULT,
        'Save',
        (['in'], c_int, 'SessionHandle'),
        (['in'], POINTER(IUnknown), 'EncryptionData'),
        (['out', 'retval'], POINTER(c_int), 'EncryptionDataSize')
    ),
    COMMETHOD(
        [dispid(1610743814)],
        HRESULT,
        'EncryptStream',
        (['in'], c_int, 'SessionHandle'),
        (['in'], BSTR, 'StreamName'),
        (['in'], POINTER(IUnknown), 'UnencryptedStream'),
        (['in'], POINTER(IUnknown), 'EncryptedStream')
    ),
    COMMETHOD(
        [dispid(1610743815)],
        HRESULT,
        'DecryptStream',
        (['in'], c_int, 'SessionHandle'),
        (['in'], BSTR, 'StreamName'),
        (['in'], POINTER(IUnknown), 'EncryptedStream'),
        (['in'], POINTER(IUnknown), 'UnencryptedStream')
    ),
    COMMETHOD(
        [dispid(1610743816)],
        HRESULT,
        'ShowSettings',
        (['in'], c_int, 'SessionHandle'),
        (['in'], POINTER(IUnknown), 'ParentWindow'),
        (['in'], VARIANT_BOOL, 'ReadOnly'),
        (['out'], POINTER(VARIANT_BOOL), 'Remove')
    ),
]

################################################################
# code template for EncryptionProvider implementation
# class EncryptionProvider_Impl(object):
#     def GetProviderDetail(self, encprovdet):
#         '-no docstring-'
#         #return pvar
#
#     def NewSession(self, ParentWindow):
#         '-no docstring-'
#         #return SessionHandle
#
#     def Authenticate(self, ParentWindow, EncryptionData):
#         '-no docstring-'
#         #return PermissionsMask, SessionHandle
#
#     def CloneSession(self, SessionHandle):
#         '-no docstring-'
#         #return SessionHandleClone
#
#     def EndSession(self, SessionHandle):
#         '-no docstring-'
#         #return 
#
#     def Save(self, SessionHandle, EncryptionData):
#         '-no docstring-'
#         #return EncryptionDataSize
#
#     def EncryptStream(self, SessionHandle, StreamName, UnencryptedStream, EncryptedStream):
#         '-no docstring-'
#         #return 
#
#     def DecryptStream(self, SessionHandle, StreamName, EncryptedStream, UnencryptedStream):
#         '-no docstring-'
#         #return 
#
#     def ShowSettings(self, SessionHandle, ParentWindow, ReadOnly):
#         '-no docstring-'
#         #return Remove
#


class GradientStop(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03BF-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Color(self) -> 'ColorFormat': ...
        Color = hints.normal_property(_get_Color)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, Position: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_Transparency(self) -> hints.Incomplete: ...
        def _set_Transparency(self, Transparency: hints.Incomplete) -> hints.Hresult: ...
        Transparency = hints.normal_property(_get_Transparency, _set_Transparency)


GradientStops._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(GradientStop)), 'Item')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'Delete',
        (['in', 'optional'], c_int, 'Index', -1)
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'Insert',
        (['in'], MsoRGBType, 'RGB'),
        (['in'], c_float, 'Position'),
        (['in', 'optional'], c_float, 'Transparency', 0.0),
        (['in', 'optional'], c_int, 'Index', -1)
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'Insert2',
        (['in'], MsoRGBType, 'RGB'),
        (['in'], c_float, 'Position'),
        (['in', 'optional'], c_float, 'Transparency', 0.0),
        (['in', 'optional'], c_int, 'Index', -1),
        (['in', 'optional'], c_float, 'Brightness', 0.0)
    ),
]

################################################################
# code template for GradientStops implementation
# class GradientStops_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def Delete(self, Index):
#         '-no docstring-'
#         #return 
#
#     def Insert(self, RGB, Position, Transparency, Index):
#         '-no docstring-'
#         #return 
#
#     def Insert2(self, RGB, Position, Transparency, Index, Brightness):
#         '-no docstring-'
#         #return 
#


class MsoEnvelope(CoClass):
    _reg_clsid_ = GUID('{0006F01A-0000-0000-C000-000000000046}')
    _idlflags_ = ['noncreatable']
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}', 2, 8)


MsoEnvelope._com_interfaces_ = [IMsoEnvelopeVB]
MsoEnvelope._outgoing_interfaces_ = [IMsoEnvelopeVBEvents]


class IRibbonExtensibility(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0396-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def GetCustomUI(self, RibbonID: hints.Incomplete) -> hints.Incomplete: ...


IRibbonExtensibility._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetCustomUI',
        (['in'], BSTR, 'RibbonID'),
        (['out', 'retval'], POINTER(BSTR), 'RibbonXml')
    ),
]

################################################################
# code template for IRibbonExtensibility implementation
# class IRibbonExtensibility_Impl(object):
#     def GetCustomUI(self, RibbonID):
#         '-no docstring-'
#         #return RibbonXml
#


class HTMLProjectItems(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0357-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Item(self, Index: hints.Incomplete) -> 'HTMLProjectItem': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


HTMLProjectItems._methods_ = [
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], POINTER(VARIANT), 'Index'),
        (['out', 'retval'], POINTER(POINTER(HTMLProjectItem)), 'RetValue')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RetValue')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RetValue')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for HTMLProjectItems implementation
# class HTMLProjectItems_Impl(object):
#     def Item(self, Index):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RetValue
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class SmartDocument(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0377-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_SolutionID(self) -> hints.Incomplete: ...
        def _set_SolutionID(self, pbstrID: hints.Incomplete) -> hints.Hresult: ...
        SolutionID = hints.normal_property(_get_SolutionID, _set_SolutionID)
        def _get_SolutionURL(self) -> hints.Incomplete: ...
        def _set_SolutionURL(self, pbstrUrl: hints.Incomplete) -> hints.Hresult: ...
        SolutionURL = hints.normal_property(_get_SolutionURL, _set_SolutionURL)
        def PickSolution(self, ConsiderAllSchemas: hints.Incomplete = ...) -> hints.Hresult: ...
        def RefreshPane(self) -> hints.Hresult: ...


SmartDocument._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'SolutionID',
        (['out', 'retval'], POINTER(BSTR), 'pbstrID')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'SolutionID',
        (['in'], BSTR, 'pbstrID')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'SolutionURL',
        (['out', 'retval'], POINTER(BSTR), 'pbstrUrl')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'SolutionURL',
        (['in'], BSTR, 'pbstrUrl')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'PickSolution',
        (['in', 'optional'], VARIANT_BOOL, 'ConsiderAllSchemas', False)
    ),
    COMMETHOD([dispid(4)], HRESULT, 'RefreshPane'),
]

################################################################
# code template for SmartDocument implementation
# class SmartDocument_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstrID
#     def _set(self, pbstrID):
#         '-no docstring-'
#     SolutionID = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrUrl
#     def _set(self, pbstrUrl):
#         '-no docstring-'
#     SolutionURL = property(_get, _set, doc = _set.__doc__)
#
#     def PickSolution(self, ConsiderAllSchemas):
#         '-no docstring-'
#         #return 
#
#     def RefreshPane(self):
#         '-no docstring-'
#         #return 
#


class SharedWorkspaceMembers(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0382-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Item(self, Index: hints.Incomplete) -> 'SharedWorkspaceMember': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, Email: hints.Incomplete, DomainName: hints.Incomplete, DisplayName: hints.Incomplete, Role: hints.Incomplete = ...) -> 'SharedWorkspaceMember': ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ItemCountExceeded(self) -> hints.Incomplete: ...
        ItemCountExceeded = hints.normal_property(_get_ItemCountExceeded)


SharedWorkspaceMembers._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceMember)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcItems')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Email'),
        (['in'], BSTR, 'DomainName'),
        (['in'], BSTR, 'DisplayName'),
        (['in', 'optional'], VARIANT, 'Role'),
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceMember)), 'ppMember')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ItemCountExceeded',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pf')
    ),
]

################################################################
# code template for SharedWorkspaceMembers implementation
# class SharedWorkspaceMembers_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcItems
#
#     def Add(self, Email, DomainName, DisplayName, Role):
#         '-no docstring-'
#         #return ppMember
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def ItemCountExceeded(self):
#         '-no docstring-'
#         #return pf
#

GradientStop._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Color',
        (['out', 'retval'], POINTER(POINTER(ColorFormat)), 'Color')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(c_float), 'Position')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Position',
        (['in'], c_float, 'Position')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Transparency',
        (['out', 'retval'], POINTER(c_float), 'Transparency')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'Transparency',
        (['in'], c_float, 'Transparency')
    ),
]

################################################################
# code template for GradientStop implementation
# class GradientStop_Impl(object):
#     @property
#     def Color(self):
#         '-no docstring-'
#         #return Color
#
#     def _get(self):
#         '-no docstring-'
#         #return Position
#     def _set(self, Position):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Transparency
#     def _set(self, Transparency):
#         '-no docstring-'
#     Transparency = property(_get, _set, doc = _set.__doc__)
#


class WebPageFonts(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0914-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, Index: hints.Incomplete) -> 'WebPageFont': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


WebPageFonts._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], MsoCharacterSet, 'Index'),
        (['out', 'retval'], POINTER(POINTER(WebPageFont)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
]

################################################################
# code template for WebPageFonts implementation
# class WebPageFonts_Impl(object):
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#


class IMsoLegendKey(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C171E-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def ClearFormats(self) -> hints.Incomplete: ...
        def Delete(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_InvertIfNegative(self) -> hints.Incomplete: ...
        def _set_InvertIfNegative(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        InvertIfNegative = hints.normal_property(_get_InvertIfNegative, _set_InvertIfNegative)
        def _get_MarkerBackgroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColor = hints.normal_property(_get_MarkerBackgroundColor, _set_MarkerBackgroundColor)
        def _get_MarkerBackgroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerBackgroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerBackgroundColorIndex = hints.normal_property(_get_MarkerBackgroundColorIndex, _set_MarkerBackgroundColorIndex)
        def _get_MarkerForegroundColor(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColor(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColor = hints.normal_property(_get_MarkerForegroundColor, _set_MarkerForegroundColor)
        def _get_MarkerForegroundColorIndex(self) -> hints.Incomplete: ...
        def _set_MarkerForegroundColorIndex(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerForegroundColorIndex = hints.normal_property(_get_MarkerForegroundColorIndex, _set_MarkerForegroundColorIndex)
        def _get_MarkerSize(self) -> hints.Incomplete: ...
        def _set_MarkerSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerSize = hints.normal_property(_get_MarkerSize, _set_MarkerSize)
        def _get_MarkerStyle(self) -> hints.Incomplete: ...
        def _set_MarkerStyle(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        MarkerStyle = hints.normal_property(_get_MarkerStyle, _set_MarkerStyle)
        def _get_PictureType(self) -> hints.Incomplete: ...
        def _set_PictureType(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureType = hints.normal_property(_get_PictureType, _set_PictureType)
        def _get_PictureUnit(self) -> hints.Incomplete: ...
        def _set_PictureUnit(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit = hints.normal_property(_get_PictureUnit, _set_PictureUnit)
        def Select(self) -> hints.Incomplete: ...
        def _get_Smooth(self) -> hints.Incomplete: ...
        def _set_Smooth(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Smooth = hints.normal_property(_get_Smooth, _set_Smooth)
        def _get_Left(self) -> hints.Incomplete: ...
        Left = hints.normal_property(_get_Left)
        def _get_Top(self) -> hints.Incomplete: ...
        Top = hints.normal_property(_get_Top)
        def _get_Width(self) -> hints.Incomplete: ...
        Width = hints.normal_property(_get_Width)
        def _get_Height(self) -> hints.Incomplete: ...
        Height = hints.normal_property(_get_Height)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get_PictureUnit2(self) -> hints.Incomplete: ...
        def _set_PictureUnit2(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        PictureUnit2 = hints.normal_property(_get_PictureUnit2, _set_PictureUnit2)


LegendEntry._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'LegendKey',
        (['out', 'retval'], POINTER(POINTER(IMsoLegendKey)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for LegendEntry implementation
# class LegendEntry_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def LegendKey(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Left(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Top(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#

IFoundFiles._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610743809), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'restricted', 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for IFoundFiles implementation
# class IFoundFiles_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class HTMLProject(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0356-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_State(self) -> hints.Incomplete: ...
        State = hints.normal_property(_get_State)
        def RefreshProject(self, Refresh: hints.Incomplete = ...) -> hints.Hresult: ...
        def RefreshDocument(self, Refresh: hints.Incomplete = ...) -> hints.Hresult: ...
        def _get_HTMLProjectItems(self) -> 'HTMLProjectItems': ...
        HTMLProjectItems = hints.normal_property(_get_HTMLProjectItems)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Open(self, OpenKind: hints.Incomplete = ...) -> hints.Hresult: ...


HTMLProject._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'State',
        (['out', 'retval'], POINTER(MsoHTMLProjectState), 'State')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'RefreshProject',
        (['in', 'optional'], VARIANT_BOOL, 'Refresh', True)
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'RefreshDocument',
        (['in', 'optional'], VARIANT_BOOL, 'Refresh', True)
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'HTMLProjectItems',
        (
            ['out', 'retval'],
            POINTER(POINTER(HTMLProjectItems)),
            'HTMLProjectItems',
        )
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Open',
        (['in', 'optional'], MsoHTMLProjectOpen, 'OpenKind', 0)
    ),
]

################################################################
# code template for HTMLProject implementation
# class HTMLProject_Impl(object):
#     @property
#     def State(self):
#         '-no docstring-'
#         #return State
#
#     def RefreshProject(self, Refresh):
#         '-no docstring-'
#         #return 
#
#     def RefreshDocument(self, Refresh):
#         '-no docstring-'
#         #return 
#
#     @property
#     def HTMLProjectItems(self):
#         '-no docstring-'
#         #return HTMLProjectItems
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def Open(self, OpenKind):
#         '-no docstring-'
#         #return 
#

ChartPoint._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['hidden', 'nonbrowsable'],
        HRESULT,
        '_ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'IMsoLegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Copy',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'DataLabel',
        (['out', 'retval'], POINTER(POINTER(IMsoDataLabel)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Explosion',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Explosion',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'HasDataLabel',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'HasDataLabel',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'InvertIfNegative',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'InvertIfNegative',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerBackgroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerBackgroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerForegroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerForegroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerSize',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerSize',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerStyle',
        (['out', 'retval'], POINTER(XlMarkerStyle), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerStyle',
        (['in'], XlMarkerStyle, 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Paste',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PictureType',
        (['out', 'retval'], POINTER(XlChartPictureType), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'PictureType',
        (['in'], XlChartPictureType, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PictureUnit',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'PictureUnit',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ApplyPictToSides',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ApplyPictToSides',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ApplyPictToFront',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ApplyPictToFront',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ApplyPictToEnd',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ApplyPictToEnd',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'SecondaryPlot',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'SecondaryPlot',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ApplyDataLabels',
        (['in', 'optional'], XlDataLabelsType, 'Type', 2),
        (['in', 'optional'], VARIANT, 'IMsoLegendKey'),
        (['in', 'optional'], VARIANT, 'AutoText'),
        (['in', 'optional'], VARIANT, 'HasLeaderLines'),
        (['in', 'optional'], VARIANT, 'ShowSeriesName'),
        (['in', 'optional'], VARIANT, 'ShowCategoryName'),
        (['in', 'optional'], VARIANT, 'ShowValue'),
        (['in', 'optional'], VARIANT, 'ShowPercentage'),
        (['in', 'optional'], VARIANT, 'ShowBubbleSize'),
        (['in', 'optional'], VARIANT, 'Separator'),
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Has3DEffect',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Has3DEffect',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PictureUnit2',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'PictureUnit2',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'PieSliceLocation',
        (['in'], XlPieSliceLocation, 'loc'),
        (['in', 'optional'], XlPieSliceIndex, 'Index', 2),
        (['out', 'retval'], POINTER(c_double), 'pval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'IsTotal',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pval')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'IsTotal',
        (['in'], VARIANT_BOOL, 'pval')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for ChartPoint implementation
# class ChartPoint_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     def _ApplyDataLabels(self, Type, IMsoLegendKey, AutoText, HasLeaderLines):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     def Copy(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def DataLabel(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Explosion = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HasDataLabel = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertIfNegative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerStyle = property(_get, _set, doc = _set.__doc__)
#
#     def Paste(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToSides = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToFront = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ApplyPictToEnd = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     SecondaryPlot = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     def ApplyDataLabels(self, Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Has3DEffect = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit2 = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Left(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Top(self):
#         '-no docstring-'
#         #return pval
#
#     def PieSliceLocation(self, loc, Index):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return pval
#     def _set(self, pval):
#         '-no docstring-'
#     IsTotal = property(_get, _set, doc = _set.__doc__)
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#

SignatureInfo._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'ReadOnly',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarf')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'SignatureProvider',
        (['out', 'retval'], POINTER(BSTR), 'pbstrSigProv')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'SignatureText',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'SignatureText',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'SignatureImage',
        (
            ['out', 'retval'],
            POINTER(POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp)),
            'ppipictdisp',
        )
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'SignatureImage',
        (
            ['in'],
            POINTER(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IPictureDisp),
            'ppipictdisp',
        )
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'SignatureComment',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'SignatureComment',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetSignatureDetail',
        (['in'], SignatureDetail, 'sigdet'),
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetCertificateDetail',
        (['in'], CertificateDetail, 'certdet'),
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'ContentVerificationResults',
        (['out', 'retval'], POINTER(ContentVerificationResults), 'pcontverres')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'CertificateVerificationResults',
        (
            ['out', 'retval'],
            POINTER(CertificateVerificationResults),
            'pcertverres',
        )
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'IsValid',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfValid')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'IsCertificateExpired',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfExpired')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'IsCertificateRevoked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfRevoked')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'IsCertificateUntrusted',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfUntrusted')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'ShowSignatureCertificate',
        (['in'], POINTER(IUnknown), 'ParentWindow')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SelectSignatureCertificate',
        (['in'], POINTER(IUnknown), 'ParentWindow')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SelectCertificateDetailByThumbprint',
        (['in'], BSTR, 'bstrThumbprint')
    ),
]

################################################################
# code template for SignatureInfo implementation
# class SignatureInfo_Impl(object):
#     @property
#     def ReadOnly(self):
#         '-no docstring-'
#         #return pvarf
#
#     @property
#     def SignatureProvider(self):
#         '-no docstring-'
#         #return pbstrSigProv
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SignatureText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ppipictdisp
#     def _set(self, ppipictdisp):
#         '-no docstring-'
#     SignatureImage = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     SignatureComment = property(_get, _set, doc = _set.__doc__)
#
#     def GetSignatureDetail(self, sigdet):
#         '-no docstring-'
#         #return pvar
#
#     def GetCertificateDetail(self, certdet):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def ContentVerificationResults(self):
#         '-no docstring-'
#         #return pcontverres
#
#     @property
#     def CertificateVerificationResults(self):
#         '-no docstring-'
#         #return pcertverres
#
#     @property
#     def IsValid(self):
#         '-no docstring-'
#         #return pvarfValid
#
#     @property
#     def IsCertificateExpired(self):
#         '-no docstring-'
#         #return pvarfExpired
#
#     @property
#     def IsCertificateRevoked(self):
#         '-no docstring-'
#         #return pvarfRevoked
#
#     @property
#     def IsCertificateUntrusted(self):
#         '-no docstring-'
#         #return pvarfUntrusted
#
#     def ShowSignatureCertificate(self, ParentWindow):
#         '-no docstring-'
#         #return 
#
#     def SelectSignatureCertificate(self, ParentWindow):
#         '-no docstring-'
#         #return 
#
#     def SelectCertificateDetailByThumbprint(self, bstrThumbprint):
#         '-no docstring-'
#         #return 
#

IMsoDisplayUnitLabel._methods_ = [
]

################################################################
# code template for IMsoDisplayUnitLabel implementation
# class IMsoDisplayUnitLabel_Impl(object):


class SharedWorkspaceTask(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0379-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Title(self) -> hints.Incomplete: ...
        def _set_Title(self, Title: hints.Incomplete) -> hints.Hresult: ...
        Title = hints.normal_property(_get_Title, _set_Title)
        def _get_AssignedTo(self) -> hints.Incomplete: ...
        def _set_AssignedTo(self, AssignedTo: hints.Incomplete) -> hints.Hresult: ...
        AssignedTo = hints.normal_property(_get_AssignedTo, _set_AssignedTo)
        def _get_Status(self) -> hints.Incomplete: ...
        def _set_Status(self, Status: hints.Incomplete) -> hints.Hresult: ...
        Status = hints.normal_property(_get_Status, _set_Status)
        def _get_Priority(self) -> hints.Incomplete: ...
        def _set_Priority(self, Priority: hints.Incomplete) -> hints.Hresult: ...
        Priority = hints.normal_property(_get_Priority, _set_Priority)
        def _get_Description(self) -> hints.Incomplete: ...
        def _set_Description(self, Description: hints.Incomplete) -> hints.Hresult: ...
        Description = hints.normal_property(_get_Description, _set_Description)
        def _get_DueDate(self) -> hints.Incomplete: ...
        def _set_DueDate(self, DueDate: hints.Incomplete) -> hints.Hresult: ...
        DueDate = hints.normal_property(_get_DueDate, _set_DueDate)
        def _get_CreatedBy(self) -> hints.Incomplete: ...
        CreatedBy = hints.normal_property(_get_CreatedBy)
        def _get_CreatedDate(self) -> hints.Incomplete: ...
        CreatedDate = hints.normal_property(_get_CreatedDate)
        def _get_ModifiedBy(self) -> hints.Incomplete: ...
        ModifiedBy = hints.normal_property(_get_ModifiedBy)
        def _get_ModifiedDate(self) -> hints.Incomplete: ...
        ModifiedDate = hints.normal_property(_get_ModifiedDate)
        def Save(self) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)



SharedWorkspaceTask._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'Title')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'Title')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'AssignedTo',
        (['out', 'retval'], POINTER(BSTR), 'AssignedTo')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'AssignedTo',
        (['in'], BSTR, 'AssignedTo')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Status',
        (['out', 'retval'], POINTER(MsoSharedWorkspaceTaskStatus), 'Status')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'Status',
        (['in'], MsoSharedWorkspaceTaskStatus, 'Status')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Priority',
        (['out', 'retval'], POINTER(MsoSharedWorkspaceTaskPriority), 'Priority')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'Priority',
        (['in'], MsoSharedWorkspaceTaskPriority, 'Priority')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'Description',
        (['in'], BSTR, 'Description')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'DueDate',
        (['out', 'retval'], POINTER(VARIANT), 'DueDate')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'DueDate',
        (['in'], VARIANT, 'DueDate')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'CreatedBy',
        (['out', 'retval'], POINTER(BSTR), 'CreatedBy')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'CreatedDate',
        (['out', 'retval'], POINTER(VARIANT), 'CreatedDate')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'ModifiedBy',
        (['out', 'retval'], POINTER(BSTR), 'ModifiedBy')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'ModifiedDate',
        (['out', 'retval'], POINTER(VARIANT), 'ModifiedDate')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'Save'),
    COMMETHOD([dispid(11)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for SharedWorkspaceTask implementation
# class SharedWorkspaceTask_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return Title
#     def _set(self, Title):
#         '-no docstring-'
#     Title = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AssignedTo
#     def _set(self, AssignedTo):
#         '-no docstring-'
#     AssignedTo = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Status
#     def _set(self, Status):
#         '-no docstring-'
#     Status = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Priority
#     def _set(self, Priority):
#         '-no docstring-'
#     Priority = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Description
#     def _set(self, Description):
#         '-no docstring-'
#     Description = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return DueDate
#     def _set(self, DueDate):
#         '-no docstring-'
#     DueDate = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def CreatedBy(self):
#         '-no docstring-'
#         #return CreatedBy
#
#     @property
#     def CreatedDate(self):
#         '-no docstring-'
#         #return CreatedDate
#
#     @property
#     def ModifiedBy(self):
#         '-no docstring-'
#         #return ModifiedBy
#
#     @property
#     def ModifiedDate(self):
#         '-no docstring-'
#         #return ModifiedDate
#
#     def Save(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class ServerPolicy(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0390-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'PolicyItem': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Description(self) -> hints.Incomplete: ...
        Description = hints.normal_property(_get_Description)
        def _get_Statement(self) -> hints.Incomplete: ...
        Statement = hints.normal_property(_get_Statement)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_BlockPreview(self) -> hints.Incomplete: ...
        BlockPreview = hints.normal_property(_get_BlockPreview)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


ServerPolicy._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(PolicyItem)), 'pppi')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'pbstrID')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'pbstrDescription')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Statement',
        (['out', 'retval'], POINTER(BSTR), 'pbstrStatement')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pc')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'BlockPreview',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfBlockPreview')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for ServerPolicy implementation
# class ServerPolicy_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return pppi
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pbstrID
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Description(self):
#         '-no docstring-'
#         #return pbstrDescription
#
#     @property
#     def Statement(self):
#         '-no docstring-'
#         #return pbstrStatement
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pc
#
#     @property
#     def BlockPreview(self):
#         '-no docstring-'
#         #return pfBlockPreview
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#


class CustomTaskPaneEvents(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8A64A872-FC6B-4D4A-926E-3A3689562C1C}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def VisibleStateChange(self, CustomTaskPaneInst: hints.Incomplete) -> hints.Hresult: ...
        def DockPositionStateChange(self, CustomTaskPaneInst: hints.Incomplete) -> hints.Hresult: ...


CustomTaskPaneEvents._methods_ = [
    COMMETHOD(
        [dispid(1)],
        None,
        'VisibleStateChange',
        (['in'], POINTER(_CustomTaskPane), 'CustomTaskPaneInst')
    ),
    COMMETHOD(
        [dispid(2)],
        None,
        'DockPositionStateChange',
        (['in'], POINTER(_CustomTaskPane), 'CustomTaskPaneInst')
    ),
]

################################################################
# code template for CustomTaskPaneEvents implementation
# class CustomTaskPaneEvents_Impl(object):
#     def VisibleStateChange(self, CustomTaskPaneInst):
#         '-no docstring-'
#         #return 
#
#     def DockPositionStateChange(self, CustomTaskPaneInst):
#         '-no docstring-'
#         #return 
#


class SharedWorkspace(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0385-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Name: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Members(self) -> 'SharedWorkspaceMembers': ...
        Members = hints.normal_property(_get_Members)
        def _get_Tasks(self) -> 'SharedWorkspaceTasks': ...
        Tasks = hints.normal_property(_get_Tasks)
        def _get_Files(self) -> 'SharedWorkspaceFiles': ...
        Files = hints.normal_property(_get_Files)
        def _get_Folders(self) -> 'SharedWorkspaceFolders': ...
        Folders = hints.normal_property(_get_Folders)
        def _get_Links(self) -> 'SharedWorkspaceLinks': ...
        Links = hints.normal_property(_get_Links)
        def Refresh(self) -> hints.Hresult: ...
        def CreateNew(self, URL: hints.Incomplete = ..., Name: hints.Incomplete = ...) -> hints.Hresult: ...
        def Delete(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_URL(self) -> hints.Incomplete: ...
        URL = hints.normal_property(_get_URL)
        def _get_Connected(self) -> hints.Incomplete: ...
        Connected = hints.normal_property(_get_Connected)
        def _get_LastRefreshed(self) -> hints.Incomplete: ...
        LastRefreshed = hints.normal_property(_get_LastRefreshed)
        def _get_SourceURL(self) -> hints.Incomplete: ...
        def _set_SourceURL(self, pbstrSourceURL: hints.Incomplete) -> hints.Hresult: ...
        SourceURL = hints.normal_property(_get_SourceURL, _set_SourceURL)
        def RemoveDocument(self) -> hints.Hresult: ...
        def Disconnect(self) -> hints.Hresult: ...


class SharedWorkspaceTasks(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C037A-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'SharedWorkspaceTask': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, Title: hints.Incomplete, Status: hints.Incomplete = ..., Priority: hints.Incomplete = ..., Assignee: hints.Incomplete = ..., Description: hints.Incomplete = ..., DueDate: hints.Incomplete = ...) -> 'SharedWorkspaceTask': ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ItemCountExceeded(self) -> hints.Incomplete: ...
        ItemCountExceeded = hints.normal_property(_get_ItemCountExceeded)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class SharedWorkspaceLinks(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0380-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Item(self, Index: hints.Incomplete) -> 'SharedWorkspaceLink': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, URL: hints.Incomplete, Description: hints.Incomplete = ..., Notes: hints.Incomplete = ...) -> 'SharedWorkspaceLink': ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ItemCountExceeded(self) -> hints.Incomplete: ...
        ItemCountExceeded = hints.normal_property(_get_ItemCountExceeded)


SharedWorkspace._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Members',
        (
            ['out', 'retval'],
            POINTER(POINTER(SharedWorkspaceMembers)),
            'ppMembers',
        )
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Tasks',
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceTasks)), 'ppTasks')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Files',
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceFiles)), 'ppFiles')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Folders',
        (
            ['out', 'retval'],
            POINTER(POINTER(SharedWorkspaceFolders)),
            'ppFolders',
        )
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Links',
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceLinks)), 'ppLinks')
    ),
    COMMETHOD([dispid(6)], HRESULT, 'Refresh'),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'CreateNew',
        (['in', 'optional'], VARIANT, 'URL'),
        (['in', 'optional'], VARIANT, 'Name')
    ),
    COMMETHOD([dispid(8)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'URL',
        (['out', 'retval'], POINTER(BSTR), 'pbstrUrl')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'Connected',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfConnected')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'LastRefreshed',
        (['out', 'retval'], POINTER(VARIANT), 'pvarLastRefreshed')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'SourceURL',
        (['out', 'retval'], POINTER(BSTR), 'pbstrSourceURL')
    ),
    COMMETHOD(
        [dispid(13), 'propput'],
        HRESULT,
        'SourceURL',
        (['in'], BSTR, 'pbstrSourceURL')
    ),
    COMMETHOD([dispid(14)], HRESULT, 'RemoveDocument'),
    COMMETHOD([dispid(15)], HRESULT, 'Disconnect'),
]

################################################################
# code template for SharedWorkspace implementation
# class SharedWorkspace_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Members(self):
#         '-no docstring-'
#         #return ppMembers
#
#     @property
#     def Tasks(self):
#         '-no docstring-'
#         #return ppTasks
#
#     @property
#     def Files(self):
#         '-no docstring-'
#         #return ppFiles
#
#     @property
#     def Folders(self):
#         '-no docstring-'
#         #return ppFolders
#
#     @property
#     def Links(self):
#         '-no docstring-'
#         #return ppLinks
#
#     def Refresh(self):
#         '-no docstring-'
#         #return 
#
#     def CreateNew(self, URL, Name):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def URL(self):
#         '-no docstring-'
#         #return pbstrUrl
#
#     @property
#     def Connected(self):
#         '-no docstring-'
#         #return pfConnected
#
#     @property
#     def LastRefreshed(self):
#         '-no docstring-'
#         #return pvarLastRefreshed
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrSourceURL
#     def _set(self, pbstrSourceURL):
#         '-no docstring-'
#     SourceURL = property(_get, _set, doc = _set.__doc__)
#
#     def RemoveDocument(self):
#         '-no docstring-'
#         #return 
#
#     def Disconnect(self):
#         '-no docstring-'
#         #return 
#

_CustomXMLPartEvents._disp_methods_ = [
    DISPMETHOD(
        [dispid(1)],
        None,
        'NodeAfterInsert',
        (['in'], POINTER(CustomXMLNode), 'NewNode'),
        (['in'], VARIANT_BOOL, 'InUndoRedo')
    ),
    DISPMETHOD(
        [dispid(2)],
        None,
        'NodeAfterDelete',
        (['in'], POINTER(CustomXMLNode), 'OldNode'),
        (['in'], POINTER(CustomXMLNode), 'OldParentNode'),
        (['in'], POINTER(CustomXMLNode), 'OldNextSibling'),
        (['in'], VARIANT_BOOL, 'InUndoRedo')
    ),
    DISPMETHOD(
        [dispid(3)],
        None,
        'NodeAfterReplace',
        (['in'], POINTER(CustomXMLNode), 'OldNode'),
        (['in'], POINTER(CustomXMLNode), 'NewNode'),
        (['in'], VARIANT_BOOL, 'InUndoRedo')
    ),
]

_CustomTaskPaneEvents._disp_methods_ = [
    DISPMETHOD(
        [dispid(1)],
        None,
        'VisibleStateChange',
        (['in'], POINTER(_CustomTaskPane), 'CustomTaskPaneInst')
    ),
    DISPMETHOD(
        [dispid(2)],
        None,
        'DockPositionStateChange',
        (['in'], POINTER(_CustomTaskPane), 'CustomTaskPaneInst')
    ),
]


class ODSOColumn(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1531-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Value(self) -> hints.Incomplete: ...
        Value = hints.normal_property(_get_Value)


ODSOColumn._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'plIndex')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Value',
        (['out', 'retval'], POINTER(BSTR), 'pbstrValue')
    ),
]

################################################################
# code template for ODSOColumn implementation
# class ODSOColumn_Impl(object):
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return plIndex
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     @property
#     def Value(self):
#         '-no docstring-'
#         #return pbstrValue
#

CustomXMLValidationErrors._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispParent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'plCount')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (
            ['out', 'retval'],
            POINTER(POINTER(CustomXMLValidationError)),
            'ppError',
        )
    ),
    COMMETHOD(
        [dispid(1610809347)],
        HRESULT,
        'Add',
        (['in'], POINTER(CustomXMLNode), 'Node'),
        (['in'], BSTR, 'ErrorName'),
        (['in', 'optional'], BSTR, 'ErrorText', ''),
        (['in', 'optional'], VARIANT_BOOL, 'ClearedOnUpdate', True)
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for CustomXMLValidationErrors implementation
# class CustomXMLValidationErrors_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppdispParent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return plCount
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppError
#
#     def Add(self, Node, ErrorName, ErrorText, ClearedOnUpdate):
#         '-no docstring-'
#         #return 
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class ODSOColumns(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1532-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, varIndex: hints.Incomplete) -> hints.Incomplete: ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


ODSOColumns._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'plCount')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParentOdso')
    ),
    COMMETHOD(
        [dispid(1610809346)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'varIndex'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppColumn')
    ),
]

################################################################
# code template for ODSOColumns implementation
# class ODSOColumns_Impl(object):
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return plCount
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParentOdso
#
#     def Item(self, varIndex):
#         '-no docstring-'
#         #return ppColumn
#

IMsoLegendKey._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'InvertIfNegative',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'InvertIfNegative',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerBackgroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerBackgroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerBackgroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerForegroundColor',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerForegroundColor',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['out', 'retval'], POINTER(XlColorIndex), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerForegroundColorIndex',
        (['in'], XlColorIndex, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerSize',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerSize',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'MarkerStyle',
        (['out', 'retval'], POINTER(XlMarkerStyle), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'MarkerStyle',
        (['in'], XlMarkerStyle, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PictureType',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'PictureType',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PictureUnit',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'PictureUnit',
        (['in'], c_double, 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Smooth',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Smooth',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'PictureUnit2',
        (['out', 'retval'], POINTER(c_double), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'PictureUnit2',
        (['in'], c_double, 'RHS')
    ),
]

################################################################
# code template for IMsoLegendKey implementation
# class IMsoLegendKey_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     InvertIfNegative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerBackgroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerForegroundColorIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     MarkerStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit = property(_get, _set, doc = _set.__doc__)
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Smooth = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Left(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Top(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Width(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Height(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     PictureUnit2 = property(_get, _set, doc = _set.__doc__)
#

ColorFormat._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'RGB',
        (['out', 'retval'], POINTER(MsoRGBType), 'RGB')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'RGB',
        (['in'], MsoRGBType, 'RGB')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'SchemeColor',
        (['out', 'retval'], POINTER(c_int), 'SchemeColor')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'SchemeColor',
        (['in'], c_int, 'SchemeColor')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoColorType), 'Type')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'TintAndShade',
        (['out', 'retval'], POINTER(c_float), 'pValue')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'TintAndShade',
        (['in'], c_float, 'pValue')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'ObjectThemeColor',
        (['out', 'retval'], POINTER(MsoThemeColorIndex), 'ObjectThemeColor')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'ObjectThemeColor',
        (['in'], MsoThemeColorIndex, 'ObjectThemeColor')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Brightness',
        (['out', 'retval'], POINTER(c_float), 'Brightness')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'Brightness',
        (['in'], c_float, 'Brightness')
    ),
]

################################################################
# code template for ColorFormat implementation
# class ColorFormat_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return RGB
#     def _set(self, RGB):
#         '-no docstring-'
#     RGB = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return SchemeColor
#     def _set(self, SchemeColor):
#         '-no docstring-'
#     SchemeColor = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     def _get(self):
#         '-no docstring-'
#         #return pValue
#     def _set(self, pValue):
#         '-no docstring-'
#     TintAndShade = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ObjectThemeColor
#     def _set(self, ObjectThemeColor):
#         '-no docstring-'
#     ObjectThemeColor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Brightness
#     def _set(self, Brightness):
#         '-no docstring-'
#     Brightness = property(_get, _set, doc = _set.__doc__)
#

IMsoLeaderLines._methods_ = [
    COMMETHOD([dispid(235)], HRESULT, 'Select'),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD([dispid(117)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(1610743811), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
]

################################################################
# code template for IMsoLeaderLines implementation
# class IMsoLeaderLines_Impl(object):
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#


class BalloonLabels(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C032E-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        def _set_Count(self, pcwz: hints.Incomplete) -> hints.Hresult: ...
        Count = hints.normal_property(_get_Count, _set_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


BalloonLabels._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcwz')
    ),
    COMMETHOD(
        [dispid(1610809347), 'propput'],
        HRESULT,
        'Count',
        (['in'], c_int, 'pcwz')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
]

################################################################
# code template for BalloonLabels implementation
# class BalloonLabels_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppidisp
#
#     def _get(self):
#         '-no docstring-'
#         #return pcwz
#     def _set(self, pcwz):
#         '-no docstring-'
#     Count = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#


class MsoDebugOptions(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C035A-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_FeatureReports(self) -> hints.Incomplete: ...
        def _set_FeatureReports(self, puintFeatureReports: hints.Incomplete) -> hints.Hresult: ...
        FeatureReports = hints.normal_property(_get_FeatureReports, _set_FeatureReports)
        def _get_OutputToDebugger(self) -> hints.Incomplete: ...
        def _set_OutputToDebugger(self, pvarfOutputToDebugger: hints.Incomplete) -> hints.Hresult: ...
        OutputToDebugger = hints.normal_property(_get_OutputToDebugger, _set_OutputToDebugger)
        def _get_OutputToFile(self) -> hints.Incomplete: ...
        def _set_OutputToFile(self, pvarfOutputToFile: hints.Incomplete) -> hints.Hresult: ...
        OutputToFile = hints.normal_property(_get_OutputToFile, _set_OutputToFile)
        def _get_OutputToMessageBox(self) -> hints.Incomplete: ...
        def _set_OutputToMessageBox(self, pvarfOutputToMessageBox: hints.Incomplete) -> hints.Hresult: ...
        OutputToMessageBox = hints.normal_property(_get_OutputToMessageBox, _set_OutputToMessageBox)
        def _get_UnitTestManager(self) -> hints.Incomplete: ...
        UnitTestManager = hints.normal_property(_get_UnitTestManager)
        def AddIgnoredAssertTag(self, bstrTagToIgnore: hints.Incomplete) -> hints.Hresult: ...
        def RemoveIgnoredAssertTag(self, bstrTagToIgnore: hints.Incomplete) -> hints.Hresult: ...


MsoDebugOptions._methods_ = [
    COMMETHOD(
        [dispid(4), 'hidden', 'propget'],
        HRESULT,
        'FeatureReports',
        (['out', 'retval'], POINTER(c_int), 'puintFeatureReports')
    ),
    COMMETHOD(
        [dispid(4), 'hidden', 'propput'],
        HRESULT,
        'FeatureReports',
        (['in'], c_int, 'puintFeatureReports')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'OutputToDebugger',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfOutputToDebugger')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'OutputToDebugger',
        (['in'], VARIANT_BOOL, 'pvarfOutputToDebugger')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'OutputToFile',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfOutputToFile')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'OutputToFile',
        (['in'], VARIANT_BOOL, 'pvarfOutputToFile')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'OutputToMessageBox',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfOutputToMessageBox')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'OutputToMessageBox',
        (['in'], VARIANT_BOOL, 'pvarfOutputToMessageBox')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'UnitTestManager',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppMsoUnitTestManager')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'AddIgnoredAssertTag',
        (['in'], BSTR, 'bstrTagToIgnore')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'RemoveIgnoredAssertTag',
        (['in'], BSTR, 'bstrTagToIgnore')
    ),
]

################################################################
# code template for MsoDebugOptions implementation
# class MsoDebugOptions_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return puintFeatureReports
#     def _set(self, puintFeatureReports):
#         '-no docstring-'
#     FeatureReports = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfOutputToDebugger
#     def _set(self, pvarfOutputToDebugger):
#         '-no docstring-'
#     OutputToDebugger = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfOutputToFile
#     def _set(self, pvarfOutputToFile):
#         '-no docstring-'
#     OutputToFile = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfOutputToMessageBox
#     def _set(self, pvarfOutputToMessageBox):
#         '-no docstring-'
#     OutputToMessageBox = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def UnitTestManager(self):
#         '-no docstring-'
#         #return ppMsoUnitTestManager
#
#     def AddIgnoredAssertTag(self, bstrTagToIgnore):
#         '-no docstring-'
#         #return 
#
#     def RemoveIgnoredAssertTag(self, bstrTagToIgnore):
#         '-no docstring-'
#         #return 
#


class IMsoDataLabels(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C171F-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def Select(self) -> hints.Incomplete: ...
        def _get_Border(self) -> 'IMsoBorder': ...
        Border = hints.normal_property(_get_Border)
        def Delete(self) -> hints.Incomplete: ...
        def _get_Interior(self) -> 'IMsoInterior': ...
        Interior = hints.normal_property(_get_Interior)
        def _get_Fill(self) -> 'ChartFillFormat': ...
        Fill = hints.normal_property(_get_Fill)
        def _get_Characters(self, Start: hints.Incomplete = ..., Length: hints.Incomplete = ...) -> 'IMsoCharacters': ...
        Characters = hints.named_property('Characters', _get_Characters)
        def _get_Font(self) -> 'ChartFont': ...
        Font = hints.normal_property(_get_Font)
        def _get_HorizontalAlignment(self) -> hints.Incomplete: ...
        def _set_HorizontalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        HorizontalAlignment = hints.normal_property(_get_HorizontalAlignment, _set_HorizontalAlignment)
        def _get_Orientation(self) -> hints.Incomplete: ...
        def _set_Orientation(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Orientation = hints.normal_property(_get_Orientation, _set_Orientation)
        def _get_Shadow(self) -> hints.Incomplete: ...
        def _set_Shadow(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Shadow = hints.normal_property(_get_Shadow, _set_Shadow)
        def _get_VerticalAlignment(self) -> hints.Incomplete: ...
        def _set_VerticalAlignment(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        VerticalAlignment = hints.normal_property(_get_VerticalAlignment, _set_VerticalAlignment)
        def _get_ReadingOrder(self) -> hints.Incomplete: ...
        def _set_ReadingOrder(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ReadingOrder = hints.normal_property(_get_ReadingOrder, _set_ReadingOrder)
        def _get_AutoScaleFont(self) -> hints.Incomplete: ...
        def _set_AutoScaleFont(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoScaleFont = hints.normal_property(_get_AutoScaleFont, _set_AutoScaleFont)
        def _get_AutoText(self) -> hints.Incomplete: ...
        def _set_AutoText(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        AutoText = hints.normal_property(_get_AutoText, _set_AutoText)
        def _get_NumberFormat(self) -> hints.Incomplete: ...
        def _set_NumberFormat(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormat = hints.normal_property(_get_NumberFormat, _set_NumberFormat)
        def _get_NumberFormatLinked(self) -> hints.Incomplete: ...
        def _set_NumberFormatLinked(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLinked = hints.normal_property(_get_NumberFormatLinked, _set_NumberFormatLinked)
        def _get_NumberFormatLocal(self) -> hints.Incomplete: ...
        def _set_NumberFormatLocal(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        NumberFormatLocal = hints.normal_property(_get_NumberFormatLocal, _set_NumberFormatLocal)
        def _get_ShowLegendKey(self) -> hints.Incomplete: ...
        def _set_ShowLegendKey(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowLegendKey = hints.normal_property(_get_ShowLegendKey, _set_ShowLegendKey)
        def _get_Type(self) -> hints.Incomplete: ...
        def _set_Type(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Type = hints.normal_property(_get_Type, _set_Type)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def _get_ShowSeriesName(self) -> hints.Incomplete: ...
        def _set_ShowSeriesName(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowSeriesName = hints.normal_property(_get_ShowSeriesName, _set_ShowSeriesName)
        def _get_ShowCategoryName(self) -> hints.Incomplete: ...
        def _set_ShowCategoryName(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowCategoryName = hints.normal_property(_get_ShowCategoryName, _set_ShowCategoryName)
        def _get_ShowValue(self) -> hints.Incomplete: ...
        def _set_ShowValue(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowValue = hints.normal_property(_get_ShowValue, _set_ShowValue)
        def _get_ShowPercentage(self) -> hints.Incomplete: ...
        def _set_ShowPercentage(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowPercentage = hints.normal_property(_get_ShowPercentage, _set_ShowPercentage)
        def _get_ShowBubbleSize(self) -> hints.Incomplete: ...
        def _set_ShowBubbleSize(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowBubbleSize = hints.normal_property(_get_ShowBubbleSize, _set_ShowBubbleSize)
        def _get_Separator(self) -> hints.Incomplete: ...
        def _set_Separator(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        Separator = hints.normal_property(_get_Separator, _set_Separator)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'IMsoDataLabel': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Format(self) -> 'IMsoChartFormat': ...
        Format = hints.normal_property(_get_Format)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__Default(self, Index: hints.Incomplete) -> 'IMsoDataLabel': ...
        _Default = hints.named_property('_Default', _get__Default)
        def Propagate(self, Index: hints.Incomplete) -> hints.Hresult: ...
        def _get_ShowRange(self) -> hints.Incomplete: ...
        def _set_ShowRange(self, RHS: hints.Incomplete) -> hints.Hresult: ...
        ShowRange = hints.normal_property(_get_ShowRange, _set_ShowRange)
        def SetProperty(self, bstrId: hints.Incomplete, Value: hints.Incomplete) -> hints.Hresult: ...
        def GetProperty(self, bstrId: hints.Incomplete) -> hints.Incomplete: ...


IMsoDataLabels._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Characters',
        (['in', 'optional'], VARIANT, 'Start'),
        (['in', 'optional'], VARIANT, 'Length'),
        (['out', 'retval'], POINTER(POINTER(IMsoCharacters)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'HorizontalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'HorizontalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Orientation',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Shadow',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'VerticalAlignment',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'VerticalAlignment',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ReadingOrder',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ReadingOrder',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'AutoText',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'AutoText',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'NumberFormat',
        (['out', 'retval'], POINTER(BSTR), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'NumberFormat',
        (['in'], BSTR, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'NumberFormatLinked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'NumberFormatLinked',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'NumberFormatLocal',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'NumberFormatLocal',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowLegendKey',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowLegendKey',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Type',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(XlDataLabelPosition), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Position',
        (['in'], XlDataLabelPosition, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowSeriesName',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowSeriesName',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowCategoryName',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowCategoryName',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowValue',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowValue',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowPercentage',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowPercentage',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowBubbleSize',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowBubbleSize',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Separator',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'Separator',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoDataLabel)), 'RHS')
    ),
    COMMETHOD(
        ['nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['nonbrowsable', 'propget'],
        HRESULT,
        '_Default',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoDataLabel)), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Propagate',
        (['in'], VARIANT, 'Index')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'ShowRange',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'RHS')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'ShowRange',
        (['in'], VARIANT_BOOL, 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for IMsoDataLabels implementation
# class IMsoDataLabels_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return RHS
#
#     def Select(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return RHS
#
#     def Delete(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Characters(self, Start, Length):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return RHS
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     HorizontalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Shadow = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     VerticalAlignment = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ReadingOrder = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoText = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormatLinked = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     NumberFormatLocal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowLegendKey = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Type = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowSeriesName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowCategoryName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowValue = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowPercentage = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowBubbleSize = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Separator = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def Propagate(self, Index):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     ShowRange = property(_get, _set, doc = _set.__doc__)
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#

GridLines._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(117)],
        HRESULT,
        'Delete',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(1610743813), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        [dispid(253)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'bstrId'),
        (['in'], VARIANT, 'Value')
    ),
    COMMETHOD(
        [dispid(254)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'bstrId'),
        (['out', 'retval'], POINTER(VARIANT), 'pValue')
    ),
]

################################################################
# code template for GridLines implementation
# class GridLines_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def Delete(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     def SetProperty(self, bstrId, Value):
#         '-no docstring-'
#         #return 
#
#     def GetProperty(self, bstrId):
#         '-no docstring-'
#         #return pValue
#


class CommandBarPopup(CommandBarControl):
    _case_insensitive_ = True
    _iid_ = GUID('{000C030A-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_CommandBar(self) -> 'CommandBar': ...
        CommandBar = hints.normal_property(_get_CommandBar)
        def _get_Controls(self) -> 'CommandBarControls': ...
        Controls = hints.normal_property(_get_Controls)
        def _get_OLEMenuGroup(self) -> hints.Incomplete: ...
        def _set_OLEMenuGroup(self, pomg: hints.Incomplete) -> hints.Hresult: ...
        OLEMenuGroup = hints.normal_property(_get_OLEMenuGroup, _set_OLEMenuGroup)
        def _get_InstanceIdPtr(self) -> hints.Incomplete: ...
        InstanceIdPtr = hints.normal_property(_get_InstanceIdPtr)


CommandBarPopup._methods_ = [
    COMMETHOD(
        [dispid(1610940416), 'propget'],
        HRESULT,
        'CommandBar',
        (['out', 'retval'], POINTER(POINTER(CommandBar)), 'ppcb')
    ),
    COMMETHOD(
        [dispid(1610940417), 'propget'],
        HRESULT,
        'Controls',
        (['out', 'retval'], POINTER(POINTER(CommandBarControls)), 'ppcbcs')
    ),
    COMMETHOD(
        [dispid(1610940418), 'propget'],
        HRESULT,
        'OLEMenuGroup',
        (['out', 'retval'], POINTER(MsoOLEMenuGroup), 'pomg')
    ),
    COMMETHOD(
        [dispid(1610940418), 'propput'],
        HRESULT,
        'OLEMenuGroup',
        (['in'], MsoOLEMenuGroup, 'pomg')
    ),
    COMMETHOD(
        [dispid(1610940420), 'hidden', 'propget'],
        HRESULT,
        'InstanceIdPtr',
        (['out', 'retval'], POINTER(VARIANT), 'pvarPic')
    ),
]

################################################################
# code template for CommandBarPopup implementation
# class CommandBarPopup_Impl(object):
#     @property
#     def CommandBar(self):
#         '-no docstring-'
#         #return ppcb
#
#     @property
#     def Controls(self):
#         '-no docstring-'
#         #return ppcbcs
#
#     def _get(self):
#         '-no docstring-'
#         #return pomg
#     def _set(self, pomg):
#         '-no docstring-'
#     OLEMenuGroup = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def InstanceIdPtr(self):
#         '-no docstring-'
#         #return pvarPic
#


class _CommandBarActiveX(CommandBarControl):
    _case_insensitive_ = True
    _iid_ = GUID('{000C030D-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_ControlCLSID(self) -> hints.Incomplete: ...
        def _set_ControlCLSID(self, pbstrClsid: hints.Incomplete) -> hints.Hresult: ...
        ControlCLSID = hints.normal_property(_get_ControlCLSID, _set_ControlCLSID)
        def _get_QueryControlInterface(self, bstrIid: hints.Incomplete) -> hints.Incomplete: ...
        QueryControlInterface = hints.named_property('QueryControlInterface', _get_QueryControlInterface)
        def SetInnerObjectFactory(self, pUnk: hints.Incomplete) -> hints.Hresult: ...
        def EnsureControl(self) -> hints.Hresult: ...
        def _set_InitWith(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        InitWith = hints.normal_property(fset=_set_InitWith)
        def _get_InstanceIdPtr(self) -> hints.Incomplete: ...
        InstanceIdPtr = hints.normal_property(_get_InstanceIdPtr)


_CommandBarActiveX._methods_ = [
    COMMETHOD(
        [dispid(1610940416), 'propget'],
        HRESULT,
        'ControlCLSID',
        (['out', 'retval'], POINTER(BSTR), 'pbstrClsid')
    ),
    COMMETHOD(
        [dispid(1610940416), 'propput'],
        HRESULT,
        'ControlCLSID',
        (['in'], BSTR, 'pbstrClsid')
    ),
    COMMETHOD(
        [dispid(1610940418), 'propget'],
        HRESULT,
        'QueryControlInterface',
        (['in'], BSTR, 'bstrIid'),
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppUnk')
    ),
    COMMETHOD(
        [dispid(1610940419)],
        HRESULT,
        'SetInnerObjectFactory',
        (['in'], POINTER(IUnknown), 'pUnk')
    ),
    COMMETHOD([dispid(1610940420)], HRESULT, 'EnsureControl'),
    COMMETHOD(
        [dispid(1610940421), 'propput'],
        HRESULT,
        'InitWith',
        (['in'], POINTER(IUnknown), 'rhs')
    ),
    COMMETHOD(
        [dispid(1610940422), 'hidden', 'propget'],
        HRESULT,
        'InstanceIdPtr',
        (['out', 'retval'], POINTER(VARIANT), 'pvarPic')
    ),
]

################################################################
# code template for _CommandBarActiveX implementation
# class _CommandBarActiveX_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pbstrClsid
#     def _set(self, pbstrClsid):
#         '-no docstring-'
#     ControlCLSID = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def QueryControlInterface(self, bstrIid):
#         '-no docstring-'
#         #return ppUnk
#
#     def SetInnerObjectFactory(self, pUnk):
#         '-no docstring-'
#         #return 
#
#     def EnsureControl(self):
#         '-no docstring-'
#         #return 
#
#     def _set(self, rhs):
#         '-no docstring-'
#     InitWith = property(fset = _set, doc = _set.__doc__)
#
#     @property
#     def InstanceIdPtr(self):
#         '-no docstring-'
#         #return pvarPic
#


class AnswerWizard(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0360-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Files(self) -> 'AnswerWizardFiles': ...
        Files = hints.normal_property(_get_Files)
        def ClearFileList(self) -> hints.Hresult: ...
        def ResetFileList(self) -> hints.Hresult: ...


class AnswerWizardFiles(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0361-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def Delete(self, FileName: hints.Incomplete) -> hints.Hresult: ...


AnswerWizard._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Files',
        (['out', 'retval'], POINTER(POINTER(AnswerWizardFiles)), 'Files')
    ),
    COMMETHOD([dispid(1610809346)], HRESULT, 'ClearFileList'),
    COMMETHOD([dispid(1610809347)], HRESULT, 'ResetFileList'),
]

################################################################
# code template for AnswerWizard implementation
# class AnswerWizard_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Files(self):
#         '-no docstring-'
#         #return Files
#
#     def ClearFileList(self):
#         '-no docstring-'
#         #return 
#
#     def ResetFileList(self):
#         '-no docstring-'
#         #return 
#


class IMsoEServicesDialog(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0372-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Close(self, ApplyWebComponentChanges: hints.Incomplete = ...) -> hints.Hresult: ...
        def AddTrustedDomain(self, Domain: hints.Incomplete) -> hints.Hresult: ...
        def _get_ApplicationName(self) -> hints.Incomplete: ...
        ApplicationName = hints.normal_property(_get_ApplicationName)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_WebComponent(self) -> hints.Incomplete: ...
        WebComponent = hints.normal_property(_get_WebComponent)
        def _get_ClipArt(self) -> hints.Incomplete: ...
        ClipArt = hints.normal_property(_get_ClipArt)


IMsoEServicesDialog._methods_ = [
    COMMETHOD(
        [dispid(1610743808)],
        HRESULT,
        'Close',
        (['in', 'optional'], VARIANT_BOOL, 'ApplyWebComponentChanges', False)
    ),
    COMMETHOD(
        [dispid(1610743809)],
        HRESULT,
        'AddTrustedDomain',
        (['in'], BSTR, 'Domain')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'ApplicationName',
        (['out', 'retval'], POINTER(BSTR), 'retval')
    ),
    COMMETHOD(
        [dispid(1610743811), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdisp')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'WebComponent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdisp')
    ),
    COMMETHOD(
        [dispid(1610743813), 'propget'],
        HRESULT,
        'ClipArt',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdisp')
    ),
]

################################################################
# code template for IMsoEServicesDialog implementation
# class IMsoEServicesDialog_Impl(object):
#     def Close(self, ApplyWebComponentChanges):
#         '-no docstring-'
#         #return 
#
#     def AddTrustedDomain(self, Domain):
#         '-no docstring-'
#         #return 
#
#     @property
#     def ApplicationName(self):
#         '-no docstring-'
#         #return retval
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppdisp
#
#     @property
#     def WebComponent(self):
#         '-no docstring-'
#         #return ppdisp
#
#     @property
#     def ClipArt(self):
#         '-no docstring-'
#         #return ppdisp
#


class ThemeColorScheme(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03A2-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Colors(self, Index: hints.Incomplete) -> 'ThemeColor': ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Load(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def Save(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def GetCustomColor(self, Name: hints.Incomplete) -> hints.Incomplete: ...


ThemeColorScheme._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Colors',
        (['in'], MsoThemeColorSchemeIndex, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ThemeColor)), 'Color')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Load',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Save',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetCustomColor',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(MsoRGBType), 'CustomColor')
    ),
]

################################################################
# code template for ThemeColorScheme implementation
# class ThemeColorScheme_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Colors(self, Index):
#         '-no docstring-'
#         #return Color
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     def Load(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def Save(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def GetCustomColor(self, Name):
#         '-no docstring-'
#         #return CustomColor
#


class ThemeFonts(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03A4-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'ThemeFont': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


class ThemeFont(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03A3-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        def _set_Name(self, Val: hints.Incomplete) -> hints.Hresult: ...
        Name = hints.normal_property(_get_Name, _set_Name)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


ThemeFonts._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], MsoFontLanguageIndex, 'Index'),
        (['out', 'retval'], POINTER(POINTER(ThemeFont)), 'Val')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
]

################################################################
# code template for ThemeFonts implementation
# class ThemeFonts_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Val
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#


class FileDialogSelectedItems(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0363-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)


FileDialogSelectedItems._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcFiles')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(BSTR), 'Item')
    ),
]

################################################################
# code template for FileDialogSelectedItems implementation
# class FileDialogSelectedItems_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcFiles
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#


class ILicAgent(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    """ILicAgent Interface"""
    _case_insensitive_ = True
    _iid_ = GUID('{00194002-D9C3-11D3-8D59-0050048384E3}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Initialize(self, dwBPC: hints.Incomplete, dwMode: hints.Incomplete, bstrLicSource: hints.Incomplete) -> hints.Incomplete: ...
        def GetFirstName(self) -> hints.Incomplete: ...
        def SetFirstName(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetLastName(self) -> hints.Incomplete: ...
        def SetLastName(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetOrgName(self) -> hints.Incomplete: ...
        def SetOrgName(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetEmail(self) -> hints.Incomplete: ...
        def SetEmail(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetPhone(self) -> hints.Incomplete: ...
        def SetPhone(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetAddress1(self) -> hints.Incomplete: ...
        def SetAddress1(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetCity(self) -> hints.Incomplete: ...
        def SetCity(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetState(self) -> hints.Incomplete: ...
        def SetState(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetCountryCode(self) -> hints.Incomplete: ...
        def SetCountryCode(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetCountryDesc(self) -> hints.Incomplete: ...
        def SetCountryDesc(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetZip(self) -> hints.Incomplete: ...
        def SetZip(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetIsoLanguage(self) -> hints.Incomplete: ...
        def SetIsoLanguage(self, dwNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetMSUpdate(self) -> hints.Incomplete: ...
        def SetMSUpdate(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetMSOffer(self) -> hints.Incomplete: ...
        def SetMSOffer(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetOtherOffer(self) -> hints.Incomplete: ...
        def SetOtherOffer(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetAddress2(self) -> hints.Incomplete: ...
        def SetAddress2(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def CheckSystemClock(self) -> hints.Incomplete: ...
        def GetExistingExpiryDate(self) -> hints.Incomplete: ...
        def GetNewExpiryDate(self) -> hints.Incomplete: ...
        def GetBillingFirstName(self) -> hints.Incomplete: ...
        def SetBillingFirstName(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetBillingLastName(self) -> hints.Incomplete: ...
        def SetBillingLastName(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetBillingPhone(self) -> hints.Incomplete: ...
        def SetBillingPhone(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetBillingAddress1(self) -> hints.Incomplete: ...
        def SetBillingAddress1(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetBillingAddress2(self) -> hints.Incomplete: ...
        def SetBillingAddress2(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetBillingCity(self) -> hints.Incomplete: ...
        def SetBillingCity(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetBillingState(self) -> hints.Incomplete: ...
        def SetBillingState(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetBillingCountryCode(self) -> hints.Incomplete: ...
        def SetBillingCountryCode(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def GetBillingZip(self) -> hints.Incomplete: ...
        def SetBillingZip(self, bstrNewVal: hints.Incomplete) -> hints.Hresult: ...
        def SaveBillingInfo(self, bSave: hints.Incomplete) -> hints.Incomplete: ...
        def IsCCRenewalCountry(self, bstrCountryCode: hints.Incomplete) -> hints.Incomplete: ...
        def GetVATLabel(self, bstrCountryCode: hints.Incomplete) -> hints.Incomplete: ...
        def GetCCRenewalExpiryDate(self) -> hints.Incomplete: ...
        def SetVATNumber(self, bstrVATNumber: hints.Incomplete) -> hints.Hresult: ...
        def SetCreditCardType(self, bstrCCCode: hints.Incomplete) -> hints.Hresult: ...
        def SetCreditCardNumber(self, bstrCCNumber: hints.Incomplete) -> hints.Hresult: ...
        def SetCreditCardExpiryYear(self, dwCCYear: hints.Incomplete) -> hints.Hresult: ...
        def SetCreditCardExpiryMonth(self, dwCCMonth: hints.Incomplete) -> hints.Hresult: ...
        def GetCreditCardCount(self) -> hints.Incomplete: ...
        def GetCreditCardCode(self, dwIndex: hints.Incomplete) -> hints.Incomplete: ...
        def GetCreditCardName(self, dwIndex: hints.Incomplete) -> hints.Incomplete: ...
        def GetVATNumber(self) -> hints.Incomplete: ...
        def GetCreditCardType(self) -> hints.Incomplete: ...
        def GetCreditCardNumber(self) -> hints.Incomplete: ...
        def GetCreditCardExpiryYear(self) -> hints.Incomplete: ...
        def GetCreditCardExpiryMonth(self) -> hints.Incomplete: ...
        def GetDisconnectOption(self) -> hints.Incomplete: ...
        def SetDisconnectOption(self, bNewVal: hints.Incomplete) -> hints.Hresult: ...
        def AsyncProcessHandshakeRequest(self, bReviseCustInfo: hints.Incomplete) -> hints.Hresult: ...
        def AsyncProcessNewLicenseRequest(self) -> hints.Hresult: ...
        def AsyncProcessReissueLicenseRequest(self) -> hints.Hresult: ...
        def AsyncProcessRetailRenewalLicenseRequest(self) -> hints.Hresult: ...
        def AsyncProcessReviseCustInfoRequest(self) -> hints.Hresult: ...
        def AsyncProcessCCRenewalPriceRequest(self) -> hints.Hresult: ...
        def AsyncProcessCCRenewalLicenseRequest(self) -> hints.Hresult: ...
        def GetAsyncProcessReturnCode(self) -> hints.Incomplete: ...
        def IsUpgradeAvailable(self) -> hints.Incomplete: ...
        def WantUpgrade(self, bWantUpgrade: hints.Incomplete) -> hints.Hresult: ...
        def AsyncProcessDroppedLicenseRequest(self) -> hints.Hresult: ...
        def GenerateInstallationId(self) -> hints.Incomplete: ...
        def DepositConfirmationId(self, bstrVal: hints.Incomplete) -> hints.Incomplete: ...
        def VerifyCheckDigits(self, bstrCIDIID: hints.Incomplete) -> hints.Incomplete: ...
        def GetCurrentExpiryDate(self) -> hints.Incomplete: ...
        def CancelAsyncProcessRequest(self, bIsLicenseRequest: hints.Incomplete) -> hints.Hresult: ...
        def GetCurrencyDescription(self, dwCurrencyIndex: hints.Incomplete) -> hints.Incomplete: ...
        def GetPriceItemCount(self) -> hints.Incomplete: ...
        def GetPriceItemLabel(self, dwIndex: hints.Incomplete) -> hints.Incomplete: ...
        def GetPriceItemValue(self, dwCurrencyIndex: hints.Incomplete, dwIndex: hints.Incomplete) -> hints.Incomplete: ...
        def GetInvoiceText(self) -> hints.Incomplete: ...
        def GetBackendErrorMsg(self) -> hints.Incomplete: ...
        def GetCurrencyOption(self) -> hints.Incomplete: ...
        def SetCurrencyOption(self, dwCurrencyOption: hints.Incomplete) -> hints.Hresult: ...
        def GetEndOfLifeHtmlText(self) -> hints.Incomplete: ...
        def DisplaySSLCert(self) -> hints.Incomplete: ...


ILicAgent._methods_ = [
    COMMETHOD(
        [dispid(1), helpstring('method Initialize')],
        HRESULT,
        'Initialize',
        (['in'], c_ulong, 'dwBPC'),
        (['in'], c_ulong, 'dwMode'),
        (['in'], BSTR, 'bstrLicSource'),
        (['out', 'retval'], POINTER(c_ulong), 'pdwRetCode')
    ),
    COMMETHOD(
        [dispid(3), helpstring('method GetFirstName')],
        HRESULT,
        'GetFirstName',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(4), helpstring('method SetFirstName')],
        HRESULT,
        'SetFirstName',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(5), helpstring('method GetLastName')],
        HRESULT,
        'GetLastName',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(6), helpstring('method SetLastName')],
        HRESULT,
        'SetLastName',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(7), helpstring('method GetOrgName')],
        HRESULT,
        'GetOrgName',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(8), helpstring('method SetOrgName')],
        HRESULT,
        'SetOrgName',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(9), helpstring('method GetEmail')],
        HRESULT,
        'GetEmail',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(10), helpstring('method SetEmail')],
        HRESULT,
        'SetEmail',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(11), helpstring('method GetPhone')],
        HRESULT,
        'GetPhone',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(12), helpstring('method SetPhone')],
        HRESULT,
        'SetPhone',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(13), helpstring('method GetAddress1')],
        HRESULT,
        'GetAddress1',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(14), helpstring('method SetAddress1')],
        HRESULT,
        'SetAddress1',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(15), helpstring('method GetCity')],
        HRESULT,
        'GetCity',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(16), helpstring('method SetCity')],
        HRESULT,
        'SetCity',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(17), helpstring('method GetState')],
        HRESULT,
        'GetState',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(18), helpstring('method SetState')],
        HRESULT,
        'SetState',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(19), helpstring('method GetCountryCode')],
        HRESULT,
        'GetCountryCode',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(20), helpstring('method SetCountryCode')],
        HRESULT,
        'SetCountryCode',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(21), helpstring('method GetCountryDesc')],
        HRESULT,
        'GetCountryDesc',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(22), helpstring('method SetCountryDesc')],
        HRESULT,
        'SetCountryDesc',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(23), helpstring('method GetZip')],
        HRESULT,
        'GetZip',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(24), helpstring('method SetZip')],
        HRESULT,
        'SetZip',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(25), helpstring('method GetIsoLanguage')],
        HRESULT,
        'GetIsoLanguage',
        (['out', 'retval'], POINTER(c_ulong), 'pdwVal')
    ),
    COMMETHOD(
        [dispid(26), helpstring('method SetIsoLanguage')],
        HRESULT,
        'SetIsoLanguage',
        (['in'], c_ulong, 'dwNewVal')
    ),
    COMMETHOD(
        [dispid(32), helpstring('method GetMSUpdate')],
        HRESULT,
        'GetMSUpdate',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(33), helpstring('method SetMSUpdate')],
        HRESULT,
        'SetMSUpdate',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(34), helpstring('method GetMSOffer')],
        HRESULT,
        'GetMSOffer',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(35), helpstring('method SetMSOffer')],
        HRESULT,
        'SetMSOffer',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(36), helpstring('method GetOtherOffer')],
        HRESULT,
        'GetOtherOffer',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(37), helpstring('method SetOtherOffer')],
        HRESULT,
        'SetOtherOffer',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(38), helpstring('method GetAddress2')],
        HRESULT,
        'GetAddress2',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(39), helpstring('method SetAddress2')],
        HRESULT,
        'SetAddress2',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(40), helpstring('method CheckSystemClock')],
        HRESULT,
        'CheckSystemClock',
        (['out', 'retval'], POINTER(c_ulong), 'pdwRetCode')
    ),
    COMMETHOD(
        [dispid(41), helpstring('method GetExistingExpiryDate')],
        HRESULT,
        'GetExistingExpiryDate',
        (['out', 'retval'], POINTER(c_double), 'pDateVal')
    ),
    COMMETHOD(
        [dispid(42), helpstring('method GetNewExpiryDate')],
        HRESULT,
        'GetNewExpiryDate',
        (['out', 'retval'], POINTER(c_double), 'pDateVal')
    ),
    COMMETHOD(
        [dispid(43), helpstring('method GetBillingFirstName')],
        HRESULT,
        'GetBillingFirstName',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(44), helpstring('method SetBillingFirstName')],
        HRESULT,
        'SetBillingFirstName',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(45), helpstring('method GetBillingLastName')],
        HRESULT,
        'GetBillingLastName',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(46), helpstring('method SetBillingLastName')],
        HRESULT,
        'SetBillingLastName',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(47), helpstring('method GetBillingPhone')],
        HRESULT,
        'GetBillingPhone',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(48), helpstring('method SetBillingPhone')],
        HRESULT,
        'SetBillingPhone',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(49), helpstring('method GetBillingAddress1')],
        HRESULT,
        'GetBillingAddress1',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(50), helpstring('method SetBillingAddress1')],
        HRESULT,
        'SetBillingAddress1',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(51), helpstring('method GetBillingAddress2')],
        HRESULT,
        'GetBillingAddress2',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(52), helpstring('method SetBillingAddress2')],
        HRESULT,
        'SetBillingAddress2',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(53), helpstring('method GetBillingCity')],
        HRESULT,
        'GetBillingCity',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(54), helpstring('method SetBillingCity')],
        HRESULT,
        'SetBillingCity',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(55), helpstring('method GetBillingState')],
        HRESULT,
        'GetBillingState',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(56), helpstring('method SetBillingState')],
        HRESULT,
        'SetBillingState',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(57), helpstring('method GetBillingCountryCode')],
        HRESULT,
        'GetBillingCountryCode',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(58), helpstring('method SetBillingCountryCode')],
        HRESULT,
        'SetBillingCountryCode',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(59), helpstring('method GetBillingZip')],
        HRESULT,
        'GetBillingZip',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(60), helpstring('method SetBillingZip')],
        HRESULT,
        'SetBillingZip',
        (['in'], BSTR, 'bstrNewVal')
    ),
    COMMETHOD(
        [dispid(61), helpstring('method SaveBillingInfo')],
        HRESULT,
        'SaveBillingInfo',
        (['in'], c_int, 'bSave'),
        (['out', 'retval'], POINTER(c_ulong), 'pdwRetVal')
    ),
    COMMETHOD(
        [dispid(64), helpstring('method IsCCRenewalCountry')],
        HRESULT,
        'IsCCRenewalCountry',
        (['in'], BSTR, 'bstrCountryCode'),
        (['out', 'retval'], POINTER(c_int), 'pbRetVal')
    ),
    COMMETHOD(
        [dispid(65), helpstring('method GetVATLabel')],
        HRESULT,
        'GetVATLabel',
        (['in'], BSTR, 'bstrCountryCode'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrVATLabel')
    ),
    COMMETHOD(
        [dispid(66), helpstring('method GetCCRenewalExpiryDate')],
        HRESULT,
        'GetCCRenewalExpiryDate',
        (['out', 'retval'], POINTER(c_double), 'pDateVal')
    ),
    COMMETHOD(
        [dispid(67), helpstring('method SetVATNumber')],
        HRESULT,
        'SetVATNumber',
        (['in'], BSTR, 'bstrVATNumber')
    ),
    COMMETHOD(
        [dispid(68), helpstring('method SetCreditCardType')],
        HRESULT,
        'SetCreditCardType',
        (['in'], BSTR, 'bstrCCCode')
    ),
    COMMETHOD(
        [dispid(69), helpstring('method SetCreditCardNumber')],
        HRESULT,
        'SetCreditCardNumber',
        (['in'], BSTR, 'bstrCCNumber')
    ),
    COMMETHOD(
        [dispid(70), helpstring('method SetCreditCardExpiryYear')],
        HRESULT,
        'SetCreditCardExpiryYear',
        (['in'], c_ulong, 'dwCCYear')
    ),
    COMMETHOD(
        [dispid(71), helpstring('method SetCreditCardExpiryMonth')],
        HRESULT,
        'SetCreditCardExpiryMonth',
        (['in'], c_ulong, 'dwCCMonth')
    ),
    COMMETHOD(
        [dispid(72), helpstring('method GetCreditCardCount')],
        HRESULT,
        'GetCreditCardCount',
        (['out', 'retval'], POINTER(c_ulong), 'pdwCount')
    ),
    COMMETHOD(
        [dispid(73), helpstring('method GetCreditCardCode')],
        HRESULT,
        'GetCreditCardCode',
        (['in'], c_ulong, 'dwIndex'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrCode')
    ),
    COMMETHOD(
        [dispid(74), helpstring('method GetCreditCardName')],
        HRESULT,
        'GetCreditCardName',
        (['in'], c_ulong, 'dwIndex'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(75), helpstring('method GetVATNumber')],
        HRESULT,
        'GetVATNumber',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVATNumber')
    ),
    COMMETHOD(
        [dispid(76), helpstring('method GetCreditCardType')],
        HRESULT,
        'GetCreditCardType',
        (['out', 'retval'], POINTER(BSTR), 'pbstrCCCode')
    ),
    COMMETHOD(
        [dispid(77), helpstring('method GetCreditCardNumber')],
        HRESULT,
        'GetCreditCardNumber',
        (['out', 'retval'], POINTER(BSTR), 'pbstrCCNumber')
    ),
    COMMETHOD(
        [dispid(78), helpstring('method GetCreditCardExpiryYear')],
        HRESULT,
        'GetCreditCardExpiryYear',
        (['out', 'retval'], POINTER(c_ulong), 'pdwCCYear')
    ),
    COMMETHOD(
        [dispid(79), helpstring('method GetCreditCardExpiryMonth')],
        HRESULT,
        'GetCreditCardExpiryMonth',
        (['out', 'retval'], POINTER(c_ulong), 'pdwCCMonth')
    ),
    COMMETHOD(
        [dispid(80), helpstring('method GetDisconnectOption')],
        HRESULT,
        'GetDisconnectOption',
        (['out', 'retval'], POINTER(c_int), 'pbRetVal')
    ),
    COMMETHOD(
        [dispid(81), helpstring('method SetDisconnectOption')],
        HRESULT,
        'SetDisconnectOption',
        (['in'], c_int, 'bNewVal')
    ),
    COMMETHOD(
        [dispid(82), helpstring('method AsyncProcessHandshakeRequest')],
        HRESULT,
        'AsyncProcessHandshakeRequest',
        (['in'], c_int, 'bReviseCustInfo')
    ),
    COMMETHOD(
        [dispid(83), helpstring('method AsyncProcessNewLicenseRequest')],
        HRESULT,
        'AsyncProcessNewLicenseRequest',
    ),
    COMMETHOD(
        [dispid(84), helpstring('method AsyncProcessReissueLicenseRequest')],
        HRESULT,
        'AsyncProcessReissueLicenseRequest',
    ),
    COMMETHOD(
        [dispid(85), helpstring('method AsyncProcessRetailRenewalLicenseRequest')],
        HRESULT,
        'AsyncProcessRetailRenewalLicenseRequest',
    ),
    COMMETHOD(
        [dispid(86), helpstring('method AsyncProcessReviseCustInfoRequest')],
        HRESULT,
        'AsyncProcessReviseCustInfoRequest',
    ),
    COMMETHOD(
        [dispid(87), helpstring('method AsyncProcessCCRenewalPriceRequest')],
        HRESULT,
        'AsyncProcessCCRenewalPriceRequest',
    ),
    COMMETHOD(
        [dispid(88), helpstring('method AsyncProcessCCRenewalLicenseRequest')],
        HRESULT,
        'AsyncProcessCCRenewalLicenseRequest',
    ),
    COMMETHOD(
        [dispid(90), helpstring('method GetAsyncProcessReturnCode')],
        HRESULT,
        'GetAsyncProcessReturnCode',
        (['out', 'retval'], POINTER(c_ulong), 'pdwRetCode')
    ),
    COMMETHOD(
        [dispid(91), helpstring('method IsUpgradeAvailable')],
        HRESULT,
        'IsUpgradeAvailable',
        (['out', 'retval'], POINTER(c_int), 'pbUpgradeAvailable')
    ),
    COMMETHOD(
        [dispid(92), helpstring('method WantUpgrade')],
        HRESULT,
        'WantUpgrade',
        (['in'], c_int, 'bWantUpgrade')
    ),
    COMMETHOD(
        [dispid(93), helpstring('method AsyncProcessDroppedLicenseRequest')],
        HRESULT,
        'AsyncProcessDroppedLicenseRequest',
    ),
    COMMETHOD(
        [dispid(94), helpstring('method GenerateInstallationId')],
        HRESULT,
        'GenerateInstallationId',
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(95), helpstring('method DepositConfirmationId')],
        HRESULT,
        'DepositConfirmationId',
        (['in'], BSTR, 'bstrVal'),
        (['out', 'retval'], POINTER(c_ulong), 'pdwRetCode')
    ),
    COMMETHOD(
        [dispid(96), helpstring('method VerifyCheckDigits')],
        HRESULT,
        'VerifyCheckDigits',
        (['in'], BSTR, 'bstrCIDIID'),
        (['out', 'retval'], POINTER(c_int), 'pbValue')
    ),
    COMMETHOD(
        [dispid(97), helpstring('method GetCurrentExpiryDate')],
        HRESULT,
        'GetCurrentExpiryDate',
        (['out', 'retval'], POINTER(c_double), 'pDateVal')
    ),
    COMMETHOD(
        [dispid(98), helpstring('method CancelAsyncProcessRequest')],
        HRESULT,
        'CancelAsyncProcessRequest',
        (['in'], c_int, 'bIsLicenseRequest')
    ),
    COMMETHOD(
        [dispid(100), helpstring('method GetCurrencyDescription')],
        HRESULT,
        'GetCurrencyDescription',
        (['in'], c_ulong, 'dwCurrencyIndex'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(101), helpstring('method GetPriceItemCount')],
        HRESULT,
        'GetPriceItemCount',
        (['out', 'retval'], POINTER(c_ulong), 'pdwCount')
    ),
    COMMETHOD(
        [dispid(102), helpstring('method GetPriceItemLabel')],
        HRESULT,
        'GetPriceItemLabel',
        (['in'], c_ulong, 'dwIndex'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(103), helpstring('method GetPriceItemValue')],
        HRESULT,
        'GetPriceItemValue',
        (['in'], c_ulong, 'dwCurrencyIndex'),
        (['in'], c_ulong, 'dwIndex'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrVal')
    ),
    COMMETHOD(
        [dispid(104), helpstring('method GetInvoiceText')],
        HRESULT,
        'GetInvoiceText',
        (['out', 'retval'], POINTER(BSTR), 'pNewVal')
    ),
    COMMETHOD(
        [dispid(105), helpstring('method GetBackendErrorMsg')],
        HRESULT,
        'GetBackendErrorMsg',
        (['out', 'retval'], POINTER(BSTR), 'pbstrErrMsg')
    ),
    COMMETHOD(
        [dispid(106), helpstring('method GetCurrencyOption')],
        HRESULT,
        'GetCurrencyOption',
        (['out', 'retval'], POINTER(c_ulong), 'dwCurrencyOption')
    ),
    COMMETHOD(
        [dispid(107), helpstring('method SetCurrencyOption')],
        HRESULT,
        'SetCurrencyOption',
        (['in'], c_ulong, 'dwCurrencyOption')
    ),
    COMMETHOD(
        [dispid(108), helpstring('method GetEndOfLifeHtmlText')],
        HRESULT,
        'GetEndOfLifeHtmlText',
        (['out', 'retval'], POINTER(BSTR), 'pbstrHtmlText')
    ),
    COMMETHOD(
        [dispid(109), helpstring('method DisplaySSLCert')],
        HRESULT,
        'DisplaySSLCert',
        (['out', 'retval'], POINTER(c_ulong), 'dwRetCode')
    ),
]

################################################################
# code template for ILicAgent implementation
# class ILicAgent_Impl(object):
#     def Initialize(self, dwBPC, dwMode, bstrLicSource):
#         'method Initialize'
#         #return pdwRetCode
#
#     def GetFirstName(self):
#         'method GetFirstName'
#         #return pbstrVal
#
#     def SetFirstName(self, bstrNewVal):
#         'method SetFirstName'
#         #return 
#
#     def GetLastName(self):
#         'method GetLastName'
#         #return pbstrVal
#
#     def SetLastName(self, bstrNewVal):
#         'method SetLastName'
#         #return 
#
#     def GetOrgName(self):
#         'method GetOrgName'
#         #return pbstrVal
#
#     def SetOrgName(self, bstrNewVal):
#         'method SetOrgName'
#         #return 
#
#     def GetEmail(self):
#         'method GetEmail'
#         #return pbstrVal
#
#     def SetEmail(self, bstrNewVal):
#         'method SetEmail'
#         #return 
#
#     def GetPhone(self):
#         'method GetPhone'
#         #return pbstrVal
#
#     def SetPhone(self, bstrNewVal):
#         'method SetPhone'
#         #return 
#
#     def GetAddress1(self):
#         'method GetAddress1'
#         #return pbstrVal
#
#     def SetAddress1(self, bstrNewVal):
#         'method SetAddress1'
#         #return 
#
#     def GetCity(self):
#         'method GetCity'
#         #return pbstrVal
#
#     def SetCity(self, bstrNewVal):
#         'method SetCity'
#         #return 
#
#     def GetState(self):
#         'method GetState'
#         #return pbstrVal
#
#     def SetState(self, bstrNewVal):
#         'method SetState'
#         #return 
#
#     def GetCountryCode(self):
#         'method GetCountryCode'
#         #return pbstrVal
#
#     def SetCountryCode(self, bstrNewVal):
#         'method SetCountryCode'
#         #return 
#
#     def GetCountryDesc(self):
#         'method GetCountryDesc'
#         #return pbstrVal
#
#     def SetCountryDesc(self, bstrNewVal):
#         'method SetCountryDesc'
#         #return 
#
#     def GetZip(self):
#         'method GetZip'
#         #return pbstrVal
#
#     def SetZip(self, bstrNewVal):
#         'method SetZip'
#         #return 
#
#     def GetIsoLanguage(self):
#         'method GetIsoLanguage'
#         #return pdwVal
#
#     def SetIsoLanguage(self, dwNewVal):
#         'method SetIsoLanguage'
#         #return 
#
#     def GetMSUpdate(self):
#         'method GetMSUpdate'
#         #return pbstrVal
#
#     def SetMSUpdate(self, bstrNewVal):
#         'method SetMSUpdate'
#         #return 
#
#     def GetMSOffer(self):
#         'method GetMSOffer'
#         #return pbstrVal
#
#     def SetMSOffer(self, bstrNewVal):
#         'method SetMSOffer'
#         #return 
#
#     def GetOtherOffer(self):
#         'method GetOtherOffer'
#         #return pbstrVal
#
#     def SetOtherOffer(self, bstrNewVal):
#         'method SetOtherOffer'
#         #return 
#
#     def GetAddress2(self):
#         'method GetAddress2'
#         #return pbstrVal
#
#     def SetAddress2(self, bstrNewVal):
#         'method SetAddress2'
#         #return 
#
#     def CheckSystemClock(self):
#         'method CheckSystemClock'
#         #return pdwRetCode
#
#     def GetExistingExpiryDate(self):
#         'method GetExistingExpiryDate'
#         #return pDateVal
#
#     def GetNewExpiryDate(self):
#         'method GetNewExpiryDate'
#         #return pDateVal
#
#     def GetBillingFirstName(self):
#         'method GetBillingFirstName'
#         #return pbstrVal
#
#     def SetBillingFirstName(self, bstrNewVal):
#         'method SetBillingFirstName'
#         #return 
#
#     def GetBillingLastName(self):
#         'method GetBillingLastName'
#         #return pbstrVal
#
#     def SetBillingLastName(self, bstrNewVal):
#         'method SetBillingLastName'
#         #return 
#
#     def GetBillingPhone(self):
#         'method GetBillingPhone'
#         #return pbstrVal
#
#     def SetBillingPhone(self, bstrNewVal):
#         'method SetBillingPhone'
#         #return 
#
#     def GetBillingAddress1(self):
#         'method GetBillingAddress1'
#         #return pbstrVal
#
#     def SetBillingAddress1(self, bstrNewVal):
#         'method SetBillingAddress1'
#         #return 
#
#     def GetBillingAddress2(self):
#         'method GetBillingAddress2'
#         #return pbstrVal
#
#     def SetBillingAddress2(self, bstrNewVal):
#         'method SetBillingAddress2'
#         #return 
#
#     def GetBillingCity(self):
#         'method GetBillingCity'
#         #return pbstrVal
#
#     def SetBillingCity(self, bstrNewVal):
#         'method SetBillingCity'
#         #return 
#
#     def GetBillingState(self):
#         'method GetBillingState'
#         #return pbstrVal
#
#     def SetBillingState(self, bstrNewVal):
#         'method SetBillingState'
#         #return 
#
#     def GetBillingCountryCode(self):
#         'method GetBillingCountryCode'
#         #return pbstrVal
#
#     def SetBillingCountryCode(self, bstrNewVal):
#         'method SetBillingCountryCode'
#         #return 
#
#     def GetBillingZip(self):
#         'method GetBillingZip'
#         #return pbstrVal
#
#     def SetBillingZip(self, bstrNewVal):
#         'method SetBillingZip'
#         #return 
#
#     def SaveBillingInfo(self, bSave):
#         'method SaveBillingInfo'
#         #return pdwRetVal
#
#     def IsCCRenewalCountry(self, bstrCountryCode):
#         'method IsCCRenewalCountry'
#         #return pbRetVal
#
#     def GetVATLabel(self, bstrCountryCode):
#         'method GetVATLabel'
#         #return pbstrVATLabel
#
#     def GetCCRenewalExpiryDate(self):
#         'method GetCCRenewalExpiryDate'
#         #return pDateVal
#
#     def SetVATNumber(self, bstrVATNumber):
#         'method SetVATNumber'
#         #return 
#
#     def SetCreditCardType(self, bstrCCCode):
#         'method SetCreditCardType'
#         #return 
#
#     def SetCreditCardNumber(self, bstrCCNumber):
#         'method SetCreditCardNumber'
#         #return 
#
#     def SetCreditCardExpiryYear(self, dwCCYear):
#         'method SetCreditCardExpiryYear'
#         #return 
#
#     def SetCreditCardExpiryMonth(self, dwCCMonth):
#         'method SetCreditCardExpiryMonth'
#         #return 
#
#     def GetCreditCardCount(self):
#         'method GetCreditCardCount'
#         #return pdwCount
#
#     def GetCreditCardCode(self, dwIndex):
#         'method GetCreditCardCode'
#         #return pbstrCode
#
#     def GetCreditCardName(self, dwIndex):
#         'method GetCreditCardName'
#         #return pbstrName
#
#     def GetVATNumber(self):
#         'method GetVATNumber'
#         #return pbstrVATNumber
#
#     def GetCreditCardType(self):
#         'method GetCreditCardType'
#         #return pbstrCCCode
#
#     def GetCreditCardNumber(self):
#         'method GetCreditCardNumber'
#         #return pbstrCCNumber
#
#     def GetCreditCardExpiryYear(self):
#         'method GetCreditCardExpiryYear'
#         #return pdwCCYear
#
#     def GetCreditCardExpiryMonth(self):
#         'method GetCreditCardExpiryMonth'
#         #return pdwCCMonth
#
#     def GetDisconnectOption(self):
#         'method GetDisconnectOption'
#         #return pbRetVal
#
#     def SetDisconnectOption(self, bNewVal):
#         'method SetDisconnectOption'
#         #return 
#
#     def AsyncProcessHandshakeRequest(self, bReviseCustInfo):
#         'method AsyncProcessHandshakeRequest'
#         #return 
#
#     def AsyncProcessNewLicenseRequest(self):
#         'method AsyncProcessNewLicenseRequest'
#         #return 
#
#     def AsyncProcessReissueLicenseRequest(self):
#         'method AsyncProcessReissueLicenseRequest'
#         #return 
#
#     def AsyncProcessRetailRenewalLicenseRequest(self):
#         'method AsyncProcessRetailRenewalLicenseRequest'
#         #return 
#
#     def AsyncProcessReviseCustInfoRequest(self):
#         'method AsyncProcessReviseCustInfoRequest'
#         #return 
#
#     def AsyncProcessCCRenewalPriceRequest(self):
#         'method AsyncProcessCCRenewalPriceRequest'
#         #return 
#
#     def AsyncProcessCCRenewalLicenseRequest(self):
#         'method AsyncProcessCCRenewalLicenseRequest'
#         #return 
#
#     def GetAsyncProcessReturnCode(self):
#         'method GetAsyncProcessReturnCode'
#         #return pdwRetCode
#
#     def IsUpgradeAvailable(self):
#         'method IsUpgradeAvailable'
#         #return pbUpgradeAvailable
#
#     def WantUpgrade(self, bWantUpgrade):
#         'method WantUpgrade'
#         #return 
#
#     def AsyncProcessDroppedLicenseRequest(self):
#         'method AsyncProcessDroppedLicenseRequest'
#         #return 
#
#     def GenerateInstallationId(self):
#         'method GenerateInstallationId'
#         #return pbstrVal
#
#     def DepositConfirmationId(self, bstrVal):
#         'method DepositConfirmationId'
#         #return pdwRetCode
#
#     def VerifyCheckDigits(self, bstrCIDIID):
#         'method VerifyCheckDigits'
#         #return pbValue
#
#     def GetCurrentExpiryDate(self):
#         'method GetCurrentExpiryDate'
#         #return pDateVal
#
#     def CancelAsyncProcessRequest(self, bIsLicenseRequest):
#         'method CancelAsyncProcessRequest'
#         #return 
#
#     def GetCurrencyDescription(self, dwCurrencyIndex):
#         'method GetCurrencyDescription'
#         #return pbstrVal
#
#     def GetPriceItemCount(self):
#         'method GetPriceItemCount'
#         #return pdwCount
#
#     def GetPriceItemLabel(self, dwIndex):
#         'method GetPriceItemLabel'
#         #return pbstrVal
#
#     def GetPriceItemValue(self, dwCurrencyIndex, dwIndex):
#         'method GetPriceItemValue'
#         #return pbstrVal
#
#     def GetInvoiceText(self):
#         'method GetInvoiceText'
#         #return pNewVal
#
#     def GetBackendErrorMsg(self):
#         'method GetBackendErrorMsg'
#         #return pbstrErrMsg
#
#     def GetCurrencyOption(self):
#         'method GetCurrencyOption'
#         #return dwCurrencyOption
#
#     def SetCurrencyOption(self, dwCurrencyOption):
#         'method SetCurrencyOption'
#         #return 
#
#     def GetEndOfLifeHtmlText(self):
#         'method GetEndOfLifeHtmlText'
#         #return pbstrHtmlText
#
#     def DisplaySSLCert(self):
#         'method DisplaySSLCert'
#         #return dwRetCode
#

ThemeFont._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Val')
    ),
    COMMETHOD(
        [dispid(0), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Val')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
]

################################################################
# code template for ThemeFont implementation
# class ThemeFont_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return Val
#     def _set(self, Val):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#


class ThemeFontScheme(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03A5-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Load(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def Save(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_MinorFont(self) -> 'ThemeFonts': ...
        MinorFont = hints.normal_property(_get_MinorFont)
        def _get_MajorFont(self) -> 'ThemeFonts': ...
        MajorFont = hints.normal_property(_get_MajorFont)


ThemeFontScheme._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Load',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Save',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'MinorFont',
        (['out', 'retval'], POINTER(POINTER(ThemeFonts)), 'MinorFont')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'MajorFont',
        (['out', 'retval'], POINTER(POINTER(ThemeFonts)), 'MajorFont')
    ),
]

################################################################
# code template for ThemeFontScheme implementation
# class ThemeFontScheme_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Load(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def Save(self, FileName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def MinorFont(self):
#         '-no docstring-'
#         #return MinorFont
#
#     @property
#     def MajorFont(self):
#         '-no docstring-'
#         #return MajorFont
#

_CommandBarComboBox._methods_ = [
    COMMETHOD(
        [dispid(1610940416)],
        HRESULT,
        'AddItem',
        (['in'], BSTR, 'Text'),
        (['in', 'optional'], VARIANT, 'Index')
    ),
    COMMETHOD([dispid(1610940417)], HRESULT, 'Clear'),
    COMMETHOD(
        [dispid(1610940418), 'propget'],
        HRESULT,
        'DropDownLines',
        (['out', 'retval'], POINTER(c_int), 'pcLines')
    ),
    COMMETHOD(
        [dispid(1610940418), 'propput'],
        HRESULT,
        'DropDownLines',
        (['in'], c_int, 'pcLines')
    ),
    COMMETHOD(
        [dispid(1610940420), 'propget'],
        HRESULT,
        'DropDownWidth',
        (['out', 'retval'], POINTER(c_int), 'pdx')
    ),
    COMMETHOD(
        [dispid(1610940420), 'propput'],
        HRESULT,
        'DropDownWidth',
        (['in'], c_int, 'pdx')
    ),
    COMMETHOD(
        [dispid(1610940422), 'propget'],
        HRESULT,
        'List',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(BSTR), 'pbstrItem')
    ),
    COMMETHOD(
        [dispid(1610940422), 'propput'],
        HRESULT,
        'List',
        (['in'], c_int, 'Index'),
        (['in'], BSTR, 'pbstrItem')
    ),
    COMMETHOD(
        [dispid(1610940424), 'propget'],
        HRESULT,
        'ListCount',
        (['out', 'retval'], POINTER(c_int), 'pcItems')
    ),
    COMMETHOD(
        [dispid(1610940425), 'propget'],
        HRESULT,
        'ListHeaderCount',
        (['out', 'retval'], POINTER(c_int), 'pcItems')
    ),
    COMMETHOD(
        [dispid(1610940425), 'propput'],
        HRESULT,
        'ListHeaderCount',
        (['in'], c_int, 'pcItems')
    ),
    COMMETHOD(
        [dispid(1610940427), 'propget'],
        HRESULT,
        'ListIndex',
        (['out', 'retval'], POINTER(c_int), 'pi')
    ),
    COMMETHOD(
        [dispid(1610940427), 'propput'],
        HRESULT,
        'ListIndex',
        (['in'], c_int, 'pi')
    ),
    COMMETHOD(
        [dispid(1610940429)],
        HRESULT,
        'RemoveItem',
        (['in'], c_int, 'Index')
    ),
    COMMETHOD(
        [dispid(1610940430), 'propget'],
        HRESULT,
        'Style',
        (['out', 'retval'], POINTER(MsoComboStyle), 'pstyle')
    ),
    COMMETHOD(
        [dispid(1610940430), 'propput'],
        HRESULT,
        'Style',
        (['in'], MsoComboStyle, 'pstyle')
    ),
    COMMETHOD(
        [dispid(1610940432), 'propget'],
        HRESULT,
        'Text',
        (['out', 'retval'], POINTER(BSTR), 'pbstrText')
    ),
    COMMETHOD(
        [dispid(1610940432), 'propput'],
        HRESULT,
        'Text',
        (['in'], BSTR, 'pbstrText')
    ),
    COMMETHOD(
        [dispid(1610940434), 'hidden', 'propget'],
        HRESULT,
        'InstanceIdPtr',
        (['out', 'retval'], POINTER(VARIANT), 'pvarPic')
    ),
]

################################################################
# code template for _CommandBarComboBox implementation
# class _CommandBarComboBox_Impl(object):
#     def AddItem(self, Text, Index):
#         '-no docstring-'
#         #return 
#
#     def Clear(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pcLines
#     def _set(self, pcLines):
#         '-no docstring-'
#     DropDownLines = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pdx
#     def _set(self, pdx):
#         '-no docstring-'
#     DropDownWidth = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self, Index):
#         '-no docstring-'
#         #return pbstrItem
#     def _set(self, Index, pbstrItem):
#         '-no docstring-'
#     List = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ListCount(self):
#         '-no docstring-'
#         #return pcItems
#
#     def _get(self):
#         '-no docstring-'
#         #return pcItems
#     def _set(self, pcItems):
#         '-no docstring-'
#     ListHeaderCount = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pi
#     def _set(self, pi):
#         '-no docstring-'
#     ListIndex = property(_get, _set, doc = _set.__doc__)
#
#     def RemoveItem(self, Index):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pstyle
#     def _set(self, pstyle):
#         '-no docstring-'
#     Style = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrText
#     def _set(self, pbstrText):
#         '-no docstring-'
#     Text = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def InstanceIdPtr(self):
#         '-no docstring-'
#         #return pvarPic
#


class Permission(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0376-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'UserPermission': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_EnableTrustedBrowser(self) -> hints.Incomplete: ...
        def _set_EnableTrustedBrowser(self, Enable: hints.Incomplete) -> hints.Hresult: ...
        EnableTrustedBrowser = hints.normal_property(_get_EnableTrustedBrowser, _set_EnableTrustedBrowser)
        def Add(self, UserId: hints.Incomplete, Permission: hints.Incomplete = ..., ExpirationDate: hints.Incomplete = ...) -> 'UserPermission': ...
        def ApplyPolicy(self, FileName: hints.Incomplete) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def RemoveAll(self) -> hints.Hresult: ...
        def _get_Enabled(self) -> hints.Incomplete: ...
        def _set_Enabled(self, Enabled: hints.Incomplete) -> hints.Hresult: ...
        Enabled = hints.normal_property(_get_Enabled, _set_Enabled)
        def _get_RequestPermissionURL(self) -> hints.Incomplete: ...
        def _set_RequestPermissionURL(self, Contact: hints.Incomplete) -> hints.Hresult: ...
        RequestPermissionURL = hints.normal_property(_get_RequestPermissionURL, _set_RequestPermissionURL)
        def _get_PolicyName(self) -> hints.Incomplete: ...
        PolicyName = hints.normal_property(_get_PolicyName)
        def _get_PolicyDescription(self) -> hints.Incomplete: ...
        PolicyDescription = hints.normal_property(_get_PolicyDescription)
        def _get_StoreLicenses(self) -> hints.Incomplete: ...
        def _set_StoreLicenses(self, Enabled: hints.Incomplete) -> hints.Hresult: ...
        StoreLicenses = hints.normal_property(_get_StoreLicenses, _set_StoreLicenses)
        def _get_DocumentAuthor(self) -> hints.Incomplete: ...
        def _set_DocumentAuthor(self, Author: hints.Incomplete) -> hints.Hresult: ...
        DocumentAuthor = hints.normal_property(_get_DocumentAuthor, _set_DocumentAuthor)
        def _get_PermissionFromPolicy(self) -> hints.Incomplete: ...
        PermissionFromPolicy = hints.normal_property(_get_PermissionFromPolicy)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_DoubleKeyEncryptionUrl(self) -> hints.Incomplete: ...
        def _set_DoubleKeyEncryptionUrl(self, dkeUrl: hints.Incomplete) -> hints.Hresult: ...
        DoubleKeyEncryptionUrl = hints.normal_property(_get_DoubleKeyEncryptionUrl, _set_DoubleKeyEncryptionUrl)
        def _get_SensitivityLabelId(self) -> hints.Incomplete: ...
        def _set_SensitivityLabelId(self, Id: hints.Incomplete) -> hints.Hresult: ...
        SensitivityLabelId = hints.normal_property(_get_SensitivityLabelId, _set_SensitivityLabelId)


Permission._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(UserPermission)), 'UserPerm')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'EnableTrustedBrowser',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Enable')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'EnableTrustedBrowser',
        (['in'], VARIANT_BOOL, 'Enable')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'UserId'),
        (['in', 'optional'], VARIANT, 'Permission'),
        (['in', 'optional'], VARIANT, 'ExpirationDate'),
        (['out', 'retval'], POINTER(POINTER(UserPermission)), 'UserPerm')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'ApplyPolicy',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD([dispid(6)], HRESULT, 'RemoveAll'),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'Enabled',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Enabled')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'Enabled',
        (['in'], VARIANT_BOOL, 'Enabled')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'RequestPermissionURL',
        (['out', 'retval'], POINTER(BSTR), 'Contact')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'RequestPermissionURL',
        (['in'], BSTR, 'Contact')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'PolicyName',
        (['out', 'retval'], POINTER(BSTR), 'PolicyName')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'PolicyDescription',
        (['out', 'retval'], POINTER(BSTR), 'PolicyDescription')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'StoreLicenses',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Enabled')
    ),
    COMMETHOD(
        [dispid(11), 'propput'],
        HRESULT,
        'StoreLicenses',
        (['in'], VARIANT_BOOL, 'Enabled')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'DocumentAuthor',
        (['out', 'retval'], POINTER(BSTR), 'Author')
    ),
    COMMETHOD(
        [dispid(12), 'propput'],
        HRESULT,
        'DocumentAuthor',
        (['in'], BSTR, 'Author')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'PermissionFromPolicy',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'FromPolicy')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
    COMMETHOD(
        [dispid(16), 'propget'],
        HRESULT,
        'DoubleKeyEncryptionUrl',
        (['out', 'retval'], POINTER(BSTR), 'dkeUrl')
    ),
    COMMETHOD(
        [dispid(16), 'propput'],
        HRESULT,
        'DoubleKeyEncryptionUrl',
        (['in'], BSTR, 'dkeUrl')
    ),
    COMMETHOD(
        [dispid(17), 'propget'],
        HRESULT,
        'SensitivityLabelId',
        (['out', 'retval'], POINTER(BSTR), 'Id')
    ),
    COMMETHOD(
        [dispid(17), 'propput'],
        HRESULT,
        'SensitivityLabelId',
        (['in'], BSTR, 'Id')
    ),
]

################################################################
# code template for Permission implementation
# class Permission_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return UserPerm
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def _get(self):
#         '-no docstring-'
#         #return Enable
#     def _set(self, Enable):
#         '-no docstring-'
#     EnableTrustedBrowser = property(_get, _set, doc = _set.__doc__)
#
#     def Add(self, UserId, Permission, ExpirationDate):
#         '-no docstring-'
#         #return UserPerm
#
#     def ApplyPolicy(self, FileName):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def RemoveAll(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Enabled
#     def _set(self, Enabled):
#         '-no docstring-'
#     Enabled = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Contact
#     def _set(self, Contact):
#         '-no docstring-'
#     RequestPermissionURL = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PolicyName(self):
#         '-no docstring-'
#         #return PolicyName
#
#     @property
#     def PolicyDescription(self):
#         '-no docstring-'
#         #return PolicyDescription
#
#     def _get(self):
#         '-no docstring-'
#         #return Enabled
#     def _set(self, Enabled):
#         '-no docstring-'
#     StoreLicenses = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Author
#     def _set(self, Author):
#         '-no docstring-'
#     DocumentAuthor = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PermissionFromPolicy(self):
#         '-no docstring-'
#         #return FromPolicy
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#
#     def _get(self):
#         '-no docstring-'
#         #return dkeUrl
#     def _set(self, dkeUrl):
#         '-no docstring-'
#     DoubleKeyEncryptionUrl = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Id
#     def _set(self, Id):
#         '-no docstring-'
#     SensitivityLabelId = property(_get, _set, doc = _set.__doc__)
#


class MsoDebugOptions_UT(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C038B-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_CollectionName(self) -> hints.Incomplete: ...
        CollectionName = hints.normal_property(_get_CollectionName)
        def Run(self) -> 'MsoDebugOptions_UTRunResult': ...


class MsoDebugOptions_UTRunResult(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C038C-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Passed(self) -> hints.Incomplete: ...
        Passed = hints.normal_property(_get_Passed)
        def _get_ErrorString(self) -> hints.Incomplete: ...
        ErrorString = hints.normal_property(_get_ErrorString)


MsoDebugOptions_UT._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'CollectionName',
        (['out', 'retval'], POINTER(BSTR), 'pbstrColName')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Run',
        (
            ['out', 'retval'],
            POINTER(POINTER(MsoDebugOptions_UTRunResult)),
            'ppRunResult',
        )
    ),
]

################################################################
# code template for MsoDebugOptions_UT implementation
# class MsoDebugOptions_UT_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     @property
#     def CollectionName(self):
#         '-no docstring-'
#         #return pbstrColName
#
#     def Run(self):
#         '-no docstring-'
#         #return ppRunResult
#

Shape._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD([dispid(10)], HRESULT, 'Apply'),
    COMMETHOD([dispid(11)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'Duplicate',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Duplicate')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'Flip',
        (['in'], MsoFlipCmd, 'FlipCmd')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'IncrementLeft',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'IncrementRotation',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'IncrementTop',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD([dispid(17)], HRESULT, 'PickUp'),
    COMMETHOD([dispid(18)], HRESULT, 'RerouteConnections'),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'ScaleHeight',
        (['in'], c_float, 'Factor'),
        (['in'], MsoTriState, 'RelativeToOriginalSize'),
        (['in', 'optional'], MsoScaleFrom, 'fScale', 0)
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'ScaleWidth',
        (['in'], c_float, 'Factor'),
        (['in'], MsoTriState, 'RelativeToOriginalSize'),
        (['in', 'optional'], MsoScaleFrom, 'fScale', 0)
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'Select',
        (['in', 'optional'], VARIANT, 'Replace')
    ),
    COMMETHOD([dispid(22)], HRESULT, 'SetShapesDefaultProperties'),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'Ungroup',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Ungroup')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'ZOrder',
        (['in'], MsoZOrderCmd, 'ZOrderCmd')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Adjustments',
        (['out', 'retval'], POINTER(POINTER(Adjustments)), 'Adjustments')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'AutoShapeType',
        (['out', 'retval'], POINTER(MsoAutoShapeType), 'AutoShapeType')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'AutoShapeType',
        (['in'], MsoAutoShapeType, 'AutoShapeType')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'BlackWhiteMode',
        (['out', 'retval'], POINTER(MsoBlackWhiteMode), 'BlackWhiteMode')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'BlackWhiteMode',
        (['in'], MsoBlackWhiteMode, 'BlackWhiteMode')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Callout',
        (['out', 'retval'], POINTER(POINTER(CalloutFormat)), 'Callout')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'ConnectionSiteCount',
        (['out', 'retval'], POINTER(c_int), 'ConnectionSiteCount')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Connector',
        (['out', 'retval'], POINTER(MsoTriState), 'Connector')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'ConnectorFormat',
        (
            ['out', 'retval'],
            POINTER(POINTER(ConnectorFormat)),
            'ConnectorFormat',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(FillFormat)), 'Fill')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'GroupItems',
        (['out', 'retval'], POINTER(POINTER(GroupShapes)), 'GroupItems')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_float, 'Height')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'HorizontalFlip',
        (['out', 'retval'], POINTER(MsoTriState), 'HorizontalFlip')
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_float), 'Left')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_float, 'Left')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'Line',
        (['out', 'retval'], POINTER(POINTER(LineFormat)), 'Line')
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'LockAspectRatio',
        (['out', 'retval'], POINTER(MsoTriState), 'LockAspectRatio')
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'LockAspectRatio',
        (['in'], MsoTriState, 'LockAspectRatio')
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(115), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'Nodes',
        (['out', 'retval'], POINTER(POINTER(ShapeNodes)), 'Nodes')
    ),
    COMMETHOD(
        [dispid(117), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(c_float), 'Rotation')
    ),
    COMMETHOD(
        [dispid(117), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], c_float, 'Rotation')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'PictureFormat',
        (['out', 'retval'], POINTER(POINTER(PictureFormat)), 'Picture')
    ),
    COMMETHOD(
        [dispid(119), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(POINTER(ShadowFormat)), 'Shadow')
    ),
    COMMETHOD(
        [dispid(120), 'propget'],
        HRESULT,
        'TextEffect',
        (['out', 'retval'], POINTER(POINTER(TextEffectFormat)), 'TextEffect')
    ),
    COMMETHOD(
        [dispid(121), 'propget'],
        HRESULT,
        'TextFrame',
        (['out', 'retval'], POINTER(POINTER(TextFrame)), 'TextFrame')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'ThreeD',
        (['out', 'retval'], POINTER(POINTER(ThreeDFormat)), 'ThreeD')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_float), 'Top')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_float, 'Top')
    ),
    COMMETHOD(
        [dispid(124), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoShapeType), 'Type')
    ),
    COMMETHOD(
        [dispid(125), 'propget'],
        HRESULT,
        'VerticalFlip',
        (['out', 'retval'], POINTER(MsoTriState), 'VerticalFlip')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Vertices',
        (['out', 'retval'], POINTER(VARIANT), 'Vertices')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(MsoTriState), 'Visible')
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Visible',
        (['in'], MsoTriState, 'Visible')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(128), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'ZOrderPosition',
        (['out', 'retval'], POINTER(c_int), 'ZOrderPosition')
    ),
    COMMETHOD(
        [dispid(130), 'hidden', 'propget'],
        HRESULT,
        'Script',
        (['out', 'retval'], POINTER(POINTER(Script)), 'Script')
    ),
    COMMETHOD(
        [dispid(131), 'propget'],
        HRESULT,
        'AlternativeText',
        (['out', 'retval'], POINTER(BSTR), 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(131), 'propput'],
        HRESULT,
        'AlternativeText',
        (['in'], BSTR, 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(132), 'hidden', 'propget'],
        HRESULT,
        'HasDiagram',
        (['out', 'retval'], POINTER(MsoTriState), 'pHasDiagram')
    ),
    COMMETHOD(
        [dispid(133), 'hidden', 'propget'],
        HRESULT,
        'Diagram',
        (['out', 'retval'], POINTER(POINTER(IMsoDiagram)), 'Diagram')
    ),
    COMMETHOD(
        [dispid(134), 'hidden', 'propget'],
        HRESULT,
        'HasDiagramNode',
        (['out', 'retval'], POINTER(MsoTriState), 'pHasDiagram')
    ),
    COMMETHOD(
        [dispid(135), 'hidden', 'propget'],
        HRESULT,
        'DiagramNode',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'DiagramNode')
    ),
    COMMETHOD(
        [dispid(136), 'propget'],
        HRESULT,
        'Child',
        (['out', 'retval'], POINTER(MsoTriState), 'Child')
    ),
    COMMETHOD(
        [dispid(137), 'propget'],
        HRESULT,
        'ParentGroup',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Parent')
    ),
    COMMETHOD(
        [dispid(138), 'hidden', 'propget'],
        HRESULT,
        'CanvasItems',
        (['out', 'retval'], POINTER(POINTER(CanvasShapes)), 'CanvasShapes')
    ),
    COMMETHOD(
        [dispid(139), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(c_int), 'pid')
    ),
    COMMETHOD(
        [dispid(140), 'hidden'],
        HRESULT,
        'CanvasCropLeft',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(141), 'hidden'],
        HRESULT,
        'CanvasCropTop',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(142), 'hidden'],
        HRESULT,
        'CanvasCropRight',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(143), 'hidden'],
        HRESULT,
        'CanvasCropBottom',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(144), 'hidden', 'propput'],
        HRESULT,
        'RTF',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(145), 'propget'],
        HRESULT,
        'TextFrame2',
        (['out', 'retval'], POINTER(POINTER(TextFrame2)), 'Frame')
    ),
    COMMETHOD([dispid(146)], HRESULT, 'Cut'),
    COMMETHOD([dispid(147)], HRESULT, 'Copy'),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'HasChart',
        (['out', 'retval'], POINTER(MsoTriState), 'pHasChart')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Chart',
        (['out', 'retval'], POINTER(POINTER(IMsoChart)), 'Chart')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'ShapeStyle',
        (['out', 'retval'], POINTER(MsoShapeStyleIndex), 'ShapeStyle')
    ),
    COMMETHOD(
        [dispid(150), 'propput'],
        HRESULT,
        'ShapeStyle',
        (['in'], MsoShapeStyleIndex, 'ShapeStyle')
    ),
    COMMETHOD(
        [dispid(151), 'propget'],
        HRESULT,
        'BackgroundStyle',
        (['out', 'retval'], POINTER(MsoBackgroundStyleIndex), 'BackgroundStyle')
    ),
    COMMETHOD(
        [dispid(151), 'propput'],
        HRESULT,
        'BackgroundStyle',
        (['in'], MsoBackgroundStyleIndex, 'BackgroundStyle')
    ),
    COMMETHOD(
        [dispid(152), 'propget'],
        HRESULT,
        'SoftEdge',
        (['out', 'retval'], POINTER(POINTER(SoftEdgeFormat)), 'SoftEdge')
    ),
    COMMETHOD(
        [dispid(153), 'propget'],
        HRESULT,
        'Glow',
        (['out', 'retval'], POINTER(POINTER(GlowFormat)), 'Glow')
    ),
    COMMETHOD(
        [dispid(154), 'propget'],
        HRESULT,
        'Reflection',
        (['out', 'retval'], POINTER(POINTER(ReflectionFormat)), 'Reflection')
    ),
    COMMETHOD(
        [dispid(155), 'propget'],
        HRESULT,
        'HasSmartArt',
        (['out', 'retval'], POINTER(MsoTriState), 'HasSmartArt')
    ),
    COMMETHOD(
        [dispid(156), 'propget'],
        HRESULT,
        'SmartArt',
        (['out', 'retval'], POINTER(POINTER(SmartArt)), 'SmartArt')
    ),
    COMMETHOD(
        [dispid(157)],
        HRESULT,
        'ConvertTextToSmartArt',
        (['in'], POINTER(SmartArtLayout), 'Layout')
    ),
    COMMETHOD(
        [dispid(158), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'Title')
    ),
    COMMETHOD(
        [dispid(158), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'Title')
    ),
    COMMETHOD(
        [dispid(159), 'propget'],
        HRESULT,
        'GraphicStyle',
        (['out', 'retval'], POINTER(MsoGraphicStyleIndex), 'GraphicStyle')
    ),
    COMMETHOD(
        [dispid(159), 'propput'],
        HRESULT,
        'GraphicStyle',
        (['in'], MsoGraphicStyleIndex, 'GraphicStyle')
    ),
    COMMETHOD(
        [dispid(160)],
        HRESULT,
        'SaveAsPicture',
        (['in'], MsoPictureType, 'PictureType'),
        (['in'], BSTR, 'FileName'),
        (['in'], VARIANT_BOOL, 'FSaveShapesIndividually')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'Model3D',
        (['out', 'retval'], POINTER(POINTER(Model3DFormat)), 'Model3D')
    ),
    COMMETHOD(
        [dispid(162), 'propget'],
        HRESULT,
        'Decorative',
        (['out', 'retval'], POINTER(MsoTriState), 'fDecorative')
    ),
    COMMETHOD(
        [dispid(162), 'propput'],
        HRESULT,
        'Decorative',
        (['in'], MsoTriState, 'fDecorative')
    ),
    COMMETHOD(
        [dispid(163), 'propget'],
        HRESULT,
        'Locked',
        (['out', 'retval'], POINTER(MsoTriState), 'pLocked')
    ),
    COMMETHOD(
        [dispid(163), 'propput'],
        HRESULT,
        'Locked',
        (['in'], MsoTriState, 'pLocked')
    ),
]

################################################################
# code template for Shape implementation
# class Shape_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Apply(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Duplicate(self):
#         '-no docstring-'
#         #return Duplicate
#
#     def Flip(self, FlipCmd):
#         '-no docstring-'
#         #return 
#
#     def IncrementLeft(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotation(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementTop(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def PickUp(self):
#         '-no docstring-'
#         #return 
#
#     def RerouteConnections(self):
#         '-no docstring-'
#         #return 
#
#     def ScaleHeight(self, Factor, RelativeToOriginalSize, fScale):
#         '-no docstring-'
#         #return 
#
#     def ScaleWidth(self, Factor, RelativeToOriginalSize, fScale):
#         '-no docstring-'
#         #return 
#
#     def Select(self, Replace):
#         '-no docstring-'
#         #return 
#
#     def SetShapesDefaultProperties(self):
#         '-no docstring-'
#         #return 
#
#     def Ungroup(self):
#         '-no docstring-'
#         #return Ungroup
#
#     def ZOrder(self, ZOrderCmd):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Adjustments(self):
#         '-no docstring-'
#         #return Adjustments
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoShapeType
#     def _set(self, AutoShapeType):
#         '-no docstring-'
#     AutoShapeType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BlackWhiteMode
#     def _set(self, BlackWhiteMode):
#         '-no docstring-'
#     BlackWhiteMode = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Callout(self):
#         '-no docstring-'
#         #return Callout
#
#     @property
#     def ConnectionSiteCount(self):
#         '-no docstring-'
#         #return ConnectionSiteCount
#
#     @property
#     def Connector(self):
#         '-no docstring-'
#         #return Connector
#
#     @property
#     def ConnectorFormat(self):
#         '-no docstring-'
#         #return ConnectorFormat
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return Fill
#
#     @property
#     def GroupItems(self):
#         '-no docstring-'
#         #return GroupItems
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HorizontalFlip(self):
#         '-no docstring-'
#         #return HorizontalFlip
#
#     def _get(self):
#         '-no docstring-'
#         #return Left
#     def _set(self, Left):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Line(self):
#         '-no docstring-'
#         #return Line
#
#     def _get(self):
#         '-no docstring-'
#         #return LockAspectRatio
#     def _set(self, LockAspectRatio):
#         '-no docstring-'
#     LockAspectRatio = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Nodes(self):
#         '-no docstring-'
#         #return Nodes
#
#     def _get(self):
#         '-no docstring-'
#         #return Rotation
#     def _set(self, Rotation):
#         '-no docstring-'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PictureFormat(self):
#         '-no docstring-'
#         #return Picture
#
#     @property
#     def Shadow(self):
#         '-no docstring-'
#         #return Shadow
#
#     @property
#     def TextEffect(self):
#         '-no docstring-'
#         #return TextEffect
#
#     @property
#     def TextFrame(self):
#         '-no docstring-'
#         #return TextFrame
#
#     @property
#     def ThreeD(self):
#         '-no docstring-'
#         #return ThreeD
#
#     def _get(self):
#         '-no docstring-'
#         #return Top
#     def _set(self, Top):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     @property
#     def VerticalFlip(self):
#         '-no docstring-'
#         #return VerticalFlip
#
#     @property
#     def Vertices(self):
#         '-no docstring-'
#         #return Vertices
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ZOrderPosition(self):
#         '-no docstring-'
#         #return ZOrderPosition
#
#     @property
#     def Script(self):
#         '-no docstring-'
#         #return Script
#
#     def _get(self):
#         '-no docstring-'
#         #return AlternativeText
#     def _set(self, AlternativeText):
#         '-no docstring-'
#     AlternativeText = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HasDiagram(self):
#         '-no docstring-'
#         #return pHasDiagram
#
#     @property
#     def Diagram(self):
#         '-no docstring-'
#         #return Diagram
#
#     @property
#     def HasDiagramNode(self):
#         '-no docstring-'
#         #return pHasDiagram
#
#     @property
#     def DiagramNode(self):
#         '-no docstring-'
#         #return DiagramNode
#
#     @property
#     def Child(self):
#         '-no docstring-'
#         #return Child
#
#     @property
#     def ParentGroup(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def CanvasItems(self):
#         '-no docstring-'
#         #return CanvasShapes
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pid
#
#     def CanvasCropLeft(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropTop(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropRight(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropBottom(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def _set(self, rhs):
#         '-no docstring-'
#     RTF = property(fset = _set, doc = _set.__doc__)
#
#     @property
#     def TextFrame2(self):
#         '-no docstring-'
#         #return Frame
#
#     def Cut(self):
#         '-no docstring-'
#         #return 
#
#     def Copy(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def HasChart(self):
#         '-no docstring-'
#         #return pHasChart
#
#     @property
#     def Chart(self):
#         '-no docstring-'
#         #return Chart
#
#     def _get(self):
#         '-no docstring-'
#         #return ShapeStyle
#     def _set(self, ShapeStyle):
#         '-no docstring-'
#     ShapeStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BackgroundStyle
#     def _set(self, BackgroundStyle):
#         '-no docstring-'
#     BackgroundStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SoftEdge(self):
#         '-no docstring-'
#         #return SoftEdge
#
#     @property
#     def Glow(self):
#         '-no docstring-'
#         #return Glow
#
#     @property
#     def Reflection(self):
#         '-no docstring-'
#         #return Reflection
#
#     @property
#     def HasSmartArt(self):
#         '-no docstring-'
#         #return HasSmartArt
#
#     @property
#     def SmartArt(self):
#         '-no docstring-'
#         #return SmartArt
#
#     def ConvertTextToSmartArt(self, Layout):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return Title
#     def _set(self, Title):
#         '-no docstring-'
#     Title = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return GraphicStyle
#     def _set(self, GraphicStyle):
#         '-no docstring-'
#     GraphicStyle = property(_get, _set, doc = _set.__doc__)
#
#     def SaveAsPicture(self, PictureType, FileName, FSaveShapesIndividually):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Model3D(self):
#         '-no docstring-'
#         #return Model3D
#
#     def _get(self):
#         '-no docstring-'
#         #return fDecorative
#     def _set(self, fDecorative):
#         '-no docstring-'
#     Decorative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pLocked
#     def _set(self, pLocked):
#         '-no docstring-'
#     Locked = property(_get, _set, doc = _set.__doc__)
#


class Scripts(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0340-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def Item(self, Index: hints.Incomplete) -> 'Script': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Anchor: hints.Incomplete = ..., Location: hints.Incomplete = ..., Language: hints.Incomplete = ..., Id: hints.Incomplete = ..., Extended: hints.Incomplete = ..., ScriptText: hints.Incomplete = ...) -> 'Script': ...
        def Delete(self) -> hints.Hresult: ...


Scripts._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Script)), 'Item')
    ),
    COMMETHOD(
        [dispid(1610809348)],
        HRESULT,
        'Add',
        (['in', 'optional'], POINTER(IDispatch), 'Anchor'),
        (['in', 'optional'], MsoScriptLocation, 'Location', 2),
        (['in', 'optional'], MsoScriptLanguage, 'Language', 2),
        (['in', 'optional'], BSTR, 'Id', ''),
        (['in', 'optional'], BSTR, 'Extended', ''),
        (['in', 'optional'], BSTR, 'ScriptText', ''),
        (['out', 'retval'], POINTER(POINTER(Script)), 'Add')
    ),
    COMMETHOD([dispid(1610809349)], HRESULT, 'Delete'),
]

################################################################
# code template for Scripts implementation
# class Scripts_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Add(self, Anchor, Location, Language, Id, Extended, ScriptText):
#         '-no docstring-'
#         #return Add
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#


class DocumentProperties(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2DF8D04D-5BFA-101B-BDE5-00AA0044DE52}')
    _idlflags_ = []

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Hresult: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Item(self, Index: hints.Incomplete) -> 'DocumentProperty': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Add(self, Name: hints.Incomplete, LinkToContent: hints.Incomplete, Type: hints.Incomplete = ..., Value: hints.Incomplete = ..., LinkSource: hints.Incomplete = ...) -> 'DocumentProperty': ...
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)


DocumentProperties._methods_ = [
    COMMETHOD(['propget'], POINTER(IDispatch), 'Parent'),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(DocumentProperty)), 'ppIDocProp')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pc')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'LinkToContent'),
        (['in', 'optional'], VARIANT, 'Type'),
        (['in', 'optional'], VARIANT, 'Value'),
        (['in', 'optional'], VARIANT, 'LinkSource'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(POINTER(DocumentProperty)), 'ppIDocProp')
    ),
    COMMETHOD(
        ['nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'plCreator')
    ),
]

################################################################
# code template for DocumentProperties implementation
# class DocumentProperties_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Item(self, Index, lcid):
#         '-no docstring-'
#         #return ppIDocProp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pc
#
#     def Add(self, Name, LinkToContent, Type, Value, LinkSource, lcid):
#         '-no docstring-'
#         #return ppIDocProp
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return plCreator
#


class ODSOFilter(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1533-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Index(self) -> hints.Incomplete: ...
        Index = hints.normal_property(_get_Index)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Column(self) -> hints.Incomplete: ...
        def _set_Column(self, pbstrCol: hints.Incomplete) -> hints.Hresult: ...
        Column = hints.normal_property(_get_Column, _set_Column)
        def _get_Comparison(self) -> hints.Incomplete: ...
        def _set_Comparison(self, pComparison: hints.Incomplete) -> hints.Hresult: ...
        Comparison = hints.normal_property(_get_Comparison, _set_Comparison)
        def _get_CompareTo(self) -> hints.Incomplete: ...
        def _set_CompareTo(self, pbstrCompareTo: hints.Incomplete) -> hints.Hresult: ...
        CompareTo = hints.normal_property(_get_CompareTo, _set_CompareTo)
        def _get_Conjunction(self) -> hints.Incomplete: ...
        def _set_Conjunction(self, pConjunction: hints.Incomplete) -> hints.Hresult: ...
        Conjunction = hints.normal_property(_get_Conjunction, _set_Conjunction)



ODSOFilter._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'plIndex')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Column',
        (['out', 'retval'], POINTER(BSTR), 'pbstrCol')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'Column',
        (['in'], BSTR, 'pbstrCol')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Comparison',
        (['out', 'retval'], POINTER(MsoFilterComparison), 'pComparison')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'Comparison',
        (['in'], MsoFilterComparison, 'pComparison')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'CompareTo',
        (['out', 'retval'], POINTER(BSTR), 'pbstrCompareTo')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'CompareTo',
        (['in'], BSTR, 'pbstrCompareTo')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'Conjunction',
        (['out', 'retval'], POINTER(MsoFilterConjunction), 'pConjunction')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'Conjunction',
        (['in'], MsoFilterConjunction, 'pConjunction')
    ),
]

################################################################
# code template for ODSOFilter implementation
# class ODSOFilter_Impl(object):
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return plIndex
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrCol
#     def _set(self, pbstrCol):
#         '-no docstring-'
#     Column = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pComparison
#     def _set(self, pComparison):
#         '-no docstring-'
#     Comparison = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstrCompareTo
#     def _set(self, pbstrCompareTo):
#         '-no docstring-'
#     CompareTo = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pConjunction
#     def _set(self, pConjunction):
#         '-no docstring-'
#     Conjunction = property(_get, _set, doc = _set.__doc__)
#

IMsoDataTable._methods_ = [
    COMMETHOD(
        [dispid(1610743808), 'propput'],
        HRESULT,
        'ShowLegendKey',
        (['in'], VARIANT_BOOL, 'pfVisible')
    ),
    COMMETHOD(
        [dispid(1610743808), 'propget'],
        HRESULT,
        'ShowLegendKey',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfVisible')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propput'],
        HRESULT,
        'HasBorderHorizontal',
        (['in'], VARIANT_BOOL, 'pfVisible')
    ),
    COMMETHOD(
        [dispid(1610743810), 'propget'],
        HRESULT,
        'HasBorderHorizontal',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfVisible')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propput'],
        HRESULT,
        'HasBorderVertical',
        (['in'], VARIANT_BOOL, 'pfVisible')
    ),
    COMMETHOD(
        [dispid(1610743812), 'propget'],
        HRESULT,
        'HasBorderVertical',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfVisible')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propput'],
        HRESULT,
        'HasBorderOutline',
        (['in'], VARIANT_BOOL, 'pfVisible')
    ),
    COMMETHOD(
        [dispid(1610743814), 'propget'],
        HRESULT,
        'HasBorderOutline',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfVisible')
    ),
    COMMETHOD(
        [dispid(1610743816), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppline')
    ),
    COMMETHOD(
        [dispid(1610743817), 'propget'],
        HRESULT,
        'Font',
        (['out', 'retval'], POINTER(POINTER(ChartFont)), 'pfont')
    ),
    COMMETHOD([dispid(1610743818)], HRESULT, 'Select'),
    COMMETHOD([dispid(1610743819)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(1610743820), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(1610743821), 'propget'],
        HRESULT,
        'AutoScaleFont',
        (['out', 'retval'], POINTER(VARIANT), 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743821), 'propput'],
        HRESULT,
        'AutoScaleFont',
        (['in'], VARIANT, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743823), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for IMsoDataTable implementation
# class IMsoDataTable_Impl(object):
#     def _get(self):
#         '-no docstring-'
#         #return pfVisible
#     def _set(self, pfVisible):
#         '-no docstring-'
#     ShowLegendKey = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfVisible
#     def _set(self, pfVisible):
#         '-no docstring-'
#     HasBorderHorizontal = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfVisible
#     def _set(self, pfVisible):
#         '-no docstring-'
#     HasBorderVertical = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfVisible
#     def _set(self, pfVisible):
#         '-no docstring-'
#     HasBorderOutline = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppline
#
#     @property
#     def Font(self):
#         '-no docstring-'
#         #return pfont
#
#     def Select(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppval
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     AutoScaleFont = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#


class IMsoDispCagNotifySink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0359-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def InsertClip(self, pClipMoniker: hints.Incomplete, pItemMoniker: hints.Incomplete) -> hints.Hresult: ...
        def WindowIsClosing(self) -> hints.Hresult: ...


IMsoDispCagNotifySink._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'InsertClip',
        (['in'], POINTER(IUnknown), 'pClipMoniker'),
        (['in'], POINTER(IUnknown), 'pItemMoniker')
    ),
    COMMETHOD([dispid(2)], HRESULT, 'WindowIsClosing'),
]

################################################################
# code template for IMsoDispCagNotifySink implementation
# class IMsoDispCagNotifySink_Impl(object):
#     def InsertClip(self, pClipMoniker, pItemMoniker):
#         '-no docstring-'
#         #return 
#
#     def WindowIsClosing(self):
#         '-no docstring-'
#         #return 
#

MsoDebugOptions_UTRunResult._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Passed',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'Passed')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'ErrorString',
        (['out', 'retval'], POINTER(BSTR), 'Error')
    ),
]

################################################################
# code template for MsoDebugOptions_UTRunResult implementation
# class MsoDebugOptions_UTRunResult_Impl(object):
#     @property
#     def Passed(self):
#         '-no docstring-'
#         #return Passed
#
#     @property
#     def ErrorString(self):
#         '-no docstring-'
#         #return Error
#

MsoDebugOptions_UTs._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(MsoDebugOptions_UT)), 'ppUnitTest')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'iCountRetVal')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetUnitTestsInCollection',
        (['in'], BSTR, 'bstrCollectionName'),
        (
            ['out', 'retval'],
            POINTER(POINTER(MsoDebugOptions_UTs)),
            'MsoDebugOptions_UTs',
        )
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetUnitTest',
        (['in'], BSTR, 'bstrCollectionName'),
        (['in'], BSTR, 'bstrUnitTestName'),
        (
            ['out', 'retval'],
            POINTER(POINTER(MsoDebugOptions_UT)),
            'MsoDebugOptions_UT',
        )
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetMatchingUnitTestsInCollection',
        (['in'], BSTR, 'bstrCollectionName'),
        (['in'], BSTR, 'bstrUnitTestNameFilter'),
        (
            ['out', 'retval'],
            POINTER(POINTER(MsoDebugOptions_UTs)),
            'MsoDebugOptions_UTs',
        )
    ),
]

################################################################
# code template for MsoDebugOptions_UTs implementation
# class MsoDebugOptions_UTs_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppUnitTest
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return iCountRetVal
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#
#     def GetUnitTestsInCollection(self, bstrCollectionName):
#         '-no docstring-'
#         #return MsoDebugOptions_UTs
#
#     def GetUnitTest(self, bstrCollectionName, bstrUnitTestName):
#         '-no docstring-'
#         #return MsoDebugOptions_UT
#
#     def GetMatchingUnitTestsInCollection(self, bstrCollectionName, bstrUnitTestNameFilter):
#         '-no docstring-'
#         #return MsoDebugOptions_UTs
#

SharedWorkspaceLinks._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceLink)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcItems')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'URL'),
        (['in', 'optional'], VARIANT, 'Description'),
        (['in', 'optional'], VARIANT, 'Notes'),
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceLink)), 'ppLink')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ItemCountExceeded',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pf')
    ),
]

################################################################
# code template for SharedWorkspaceLinks implementation
# class SharedWorkspaceLinks_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcItems
#
#     def Add(self, URL, Description, Notes):
#         '-no docstring-'
#         #return ppLink
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def ItemCountExceeded(self):
#         '-no docstring-'
#         #return pf
#


class ICTPFactory(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C033D-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def CreateCTP(self, CTPAxID: hints.Incomplete, CTPTitle: hints.Incomplete, CTPParentWindow: hints.Incomplete = ...) -> '_CustomTaskPane': ...


ICTPFactory._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'CreateCTP',
        (['in'], BSTR, 'CTPAxID'),
        (['in'], BSTR, 'CTPTitle'),
        (['in', 'optional'], VARIANT, 'CTPParentWindow'),
        (['out', 'retval'], POINTER(POINTER(_CustomTaskPane)), 'CTPInst')
    ),
]

################################################################
# code template for ICTPFactory implementation
# class ICTPFactory_Impl(object):
#     def CreateCTP(self, CTPAxID, CTPTitle, CTPParentWindow):
#         '-no docstring-'
#         #return CTPInst
#

DocumentLibraryVersion._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Modified',
        (['out', 'retval'], POINTER(VARIANT), 'pvarDate')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Index',
        (['out', 'retval'], POINTER(c_int), 'lIndex')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'ModifiedBy',
        (['out', 'retval'], POINTER(BSTR), 'userName')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Comments',
        (['out', 'retval'], POINTER(BSTR), 'Comments')
    ),
    COMMETHOD([dispid(5)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Open',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispOpened')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'Restore',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppdispOpened')
    ),
]

################################################################
# code template for DocumentLibraryVersion implementation
# class DocumentLibraryVersion_Impl(object):
#     @property
#     def Modified(self):
#         '-no docstring-'
#         #return pvarDate
#
#     @property
#     def Index(self):
#         '-no docstring-'
#         #return lIndex
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def ModifiedBy(self):
#         '-no docstring-'
#         #return userName
#
#     @property
#     def Comments(self):
#         '-no docstring-'
#         #return Comments
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Open(self):
#         '-no docstring-'
#         #return ppdispOpened
#
#     def Restore(self):
#         '-no docstring-'
#         #return ppdispOpened
#


class ICustomTaskPaneConsumer(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C033E-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def CTPFactoryAvailable(self, CTPFactoryInst: hints.Incomplete) -> hints.Hresult: ...


ICustomTaskPaneConsumer._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'CTPFactoryAvailable',
        (['in'], POINTER(ICTPFactory), 'CTPFactoryInst')
    ),
]

################################################################
# code template for ICustomTaskPaneConsumer implementation
# class ICustomTaskPaneConsumer_Impl(object):
#     def CTPFactoryAvailable(self, CTPFactoryInst):
#         '-no docstring-'
#         #return 
#

AnswerWizardFiles._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(1610809347)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'FileName')
    ),
    COMMETHOD(
        [dispid(1610809348)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'FileName')
    ),
]

################################################################
# code template for AnswerWizardFiles implementation
# class AnswerWizardFiles_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pCount
#
#     def Add(self, FileName):
#         '-no docstring-'
#         #return 
#
#     def Delete(self, FileName):
#         '-no docstring-'
#         #return 
#


class PictureEffect(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03D1-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Type(self) -> hints.Incomplete: ...
        Type = hints.normal_property(_get_Type)
        def _get_Position(self) -> hints.Incomplete: ...
        def _set_Position(self, Position: hints.Incomplete) -> hints.Hresult: ...
        Position = hints.normal_property(_get_Position, _set_Position)
        def Delete(self) -> hints.Hresult: ...
        def _get_EffectParameters(self) -> 'EffectParameters': ...
        EffectParameters = hints.normal_property(_get_EffectParameters)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, Visible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)



PictureEffects._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(PictureEffect)), 'Item')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Insert',
        (['in'], MsoPictureEffectType, 'EffectType'),
        (['in', 'optional'], c_int, 'Position', -1),
        (['out', 'retval'], POINTER(POINTER(PictureEffect)), 'Effect')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in', 'optional'], c_int, 'Index', -1)
    ),
]

################################################################
# code template for PictureEffects implementation
# class PictureEffects_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def Insert(self, EffectType, Position):
#         '-no docstring-'
#         #return Effect
#
#     def Delete(self, Index):
#         '-no docstring-'
#         #return 
#


class DataPrivacyOptions(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03D9-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def GetPrivacyOptionSetting(self, PrivacyOption: hints.Incomplete) -> hints.Incomplete: ...
        def _get_SendTelemetryOption(self) -> hints.Incomplete: ...
        SendTelemetryOption = hints.normal_property(_get_SendTelemetryOption)


DataPrivacyOptions._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPrivacyOptionSetting',
        (['in'], MsoPrivacyOptionSetting, 'PrivacyOption'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'OptionEnabled')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'SendTelemetryOption',
        (['out', 'retval'], POINTER(MsoTelemetryConsentLevel), 'SendTelemetry')
    ),
]

################################################################
# code template for DataPrivacyOptions implementation
# class DataPrivacyOptions_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def GetPrivacyOptionSetting(self, PrivacyOption):
#         '-no docstring-'
#         #return OptionEnabled
#
#     @property
#     def SendTelemetryOption(self):
#         '-no docstring-'
#         #return SendTelemetry
#

SmartArtLayout._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'LayoutId')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Category',
        (['out', 'retval'], POINTER(BSTR), 'Category')
    ),
]

################################################################
# code template for SmartArtLayout implementation
# class SmartArtLayout_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return LayoutId
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return Name
#
#     @property
#     def Description(self):
#         '-no docstring-'
#         #return Description
#
#     @property
#     def Category(self):
#         '-no docstring-'
#         #return Category
#

IMsoFloor._methods_ = [
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'bstr')
    ),
    COMMETHOD(
        [dispid(235)],
        HRESULT,
        'Select',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParent')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Border',
        (['out', 'retval'], POINTER(POINTER(IMsoBorder)), 'ppborder')
    ),
    COMMETHOD(
        [dispid(112)],
        HRESULT,
        'ClearFormats',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'Interior',
        (['out', 'retval'], POINTER(POINTER(IMsoInterior)), 'ppinterior')
    ),
    COMMETHOD(
        [dispid(1663), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(ChartFillFormat)), 'ppfill')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'PictureType',
        (['out', 'retval'], POINTER(VARIANT), 'pvar')
    ),
    COMMETHOD(
        [dispid(161), 'propput'],
        HRESULT,
        'PictureType',
        (['in'], VARIANT, 'pvar')
    ),
    COMMETHOD([dispid(211)], HRESULT, 'Paste'),
    COMMETHOD(
        [dispid(2419), 'propget'],
        HRESULT,
        'Thickness',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [dispid(2419), 'propput'],
        HRESULT,
        'Thickness',
        (['in'], c_int, 'RHS')
    ),
    COMMETHOD(
        [dispid(1610743820), 'propget'],
        HRESULT,
        'Format',
        (['out', 'retval'], POINTER(POINTER(IMsoChartFormat)), 'ppChartFormat')
    ),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
]

################################################################
# code template for IMsoFloor implementation
# class IMsoFloor_Impl(object):
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return bstr
#
#     def Select(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParent
#
#     @property
#     def Border(self):
#         '-no docstring-'
#         #return ppborder
#
#     def ClearFormats(self):
#         '-no docstring-'
#         #return pvar
#
#     @property
#     def Interior(self):
#         '-no docstring-'
#         #return ppinterior
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return ppfill
#
#     def _get(self):
#         '-no docstring-'
#         #return pvar
#     def _set(self, pvar):
#         '-no docstring-'
#     PictureType = property(_get, _set, doc = _set.__doc__)
#
#     def Paste(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return RHS
#     def _set(self, RHS):
#         '-no docstring-'
#     Thickness = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Format(self):
#         '-no docstring-'
#         #return ppChartFormat
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#


class EffectParameters(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03D0-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'EffectParameter': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


PictureEffect._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoPictureEffectType), 'EffectType')
    ),
    COMMETHOD(
        [dispid(1), 'propput'],
        HRESULT,
        'Position',
        (['in'], c_int, 'Position')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Position',
        (['out', 'retval'], POINTER(c_int), 'Position')
    ),
    COMMETHOD([dispid(2)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'EffectParameters',
        (
            ['out', 'retval'],
            POINTER(POINTER(EffectParameters)),
            'EffectParameters',
        )
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'Visible',
        (['in'], MsoTriState, 'Visible')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(MsoTriState), 'Visible')
    ),
]

################################################################
# code template for PictureEffect implementation
# class PictureEffect_Impl(object):
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return EffectType
#
#     def _get(self):
#         '-no docstring-'
#         #return Position
#     def _set(self, Position):
#         '-no docstring-'
#     Position = property(_get, _set, doc = _set.__doc__)
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def EffectParameters(self):
#         '-no docstring-'
#         #return EffectParameters
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#


class OfficeTheme(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03A0-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_ThemeColorScheme(self) -> 'ThemeColorScheme': ...
        ThemeColorScheme = hints.normal_property(_get_ThemeColorScheme)
        def _get_ThemeFontScheme(self) -> 'ThemeFontScheme': ...
        ThemeFontScheme = hints.normal_property(_get_ThemeFontScheme)
        def _get_ThemeEffectScheme(self) -> 'ThemeEffectScheme': ...
        ThemeEffectScheme = hints.normal_property(_get_ThemeEffectScheme)


class ThemeEffectScheme(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C03A6-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Load(self, FileName: hints.Incomplete) -> hints.Hresult: ...


OfficeTheme._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'ThemeColorScheme',
        (
            ['out', 'retval'],
            POINTER(POINTER(ThemeColorScheme)),
            'ThemeColorScheme',
        )
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'ThemeFontScheme',
        (
            ['out', 'retval'],
            POINTER(POINTER(ThemeFontScheme)),
            'ThemeFontScheme',
        )
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ThemeEffectScheme',
        (
            ['out', 'retval'],
            POINTER(POINTER(ThemeEffectScheme)),
            'ThemeEffectScheme',
        )
    ),
]

################################################################
# code template for OfficeTheme implementation
# class OfficeTheme_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def ThemeColorScheme(self):
#         '-no docstring-'
#         #return ThemeColorScheme
#
#     @property
#     def ThemeFontScheme(self):
#         '-no docstring-'
#         #return ThemeFontScheme
#
#     @property
#     def ThemeEffectScheme(self):
#         '-no docstring-'
#         #return ThemeEffectScheme
#


class DocumentInspectors(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0392-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Item(self, Index: hints.Incomplete) -> 'DocumentInspector': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)


DocumentInspectors._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(DocumentInspector)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcItems')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
]

################################################################
# code template for DocumentInspectors implementation
# class DocumentInspectors_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcItems
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#

SharedWorkspaceTasks._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceTask)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcItems')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Title'),
        (['in', 'optional'], VARIANT, 'Status'),
        (['in', 'optional'], VARIANT, 'Priority'),
        (['in', 'optional'], VARIANT, 'Assignee'),
        (['in', 'optional'], VARIANT, 'Description'),
        (['in', 'optional'], VARIANT, 'DueDate'),
        (['out', 'retval'], POINTER(POINTER(SharedWorkspaceTask)), 'ppTask')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ItemCountExceeded',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pf')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
]

################################################################
# code template for SharedWorkspaceTasks implementation
# class SharedWorkspaceTasks_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcItems
#
#     def Add(self, Title, Status, Priority, Assignee, Description, DueDate):
#         '-no docstring-'
#         #return ppTask
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def ItemCountExceeded(self):
#         '-no docstring-'
#         #return pf
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#

ShapeRange._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Item')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'Align',
        (['in'], MsoAlignCmd, 'AlignCmd'),
        (['in'], MsoTriState, 'RelativeTo')
    ),
    COMMETHOD([dispid(11)], HRESULT, 'Apply'),
    COMMETHOD([dispid(12)], HRESULT, 'Delete'),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'Distribute',
        (['in'], MsoDistributeCmd, 'DistributeCmd'),
        (['in'], MsoTriState, 'RelativeTo')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'Duplicate',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Duplicate')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'Flip',
        (['in'], MsoFlipCmd, 'FlipCmd')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'IncrementLeft',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'IncrementRotation',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'IncrementTop',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'Group',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Group')
    ),
    COMMETHOD([dispid(20)], HRESULT, 'PickUp'),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'Regroup',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Regroup')
    ),
    COMMETHOD([dispid(22)], HRESULT, 'RerouteConnections'),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'ScaleHeight',
        (['in'], c_float, 'Factor'),
        (['in'], MsoTriState, 'RelativeToOriginalSize'),
        (['in', 'optional'], MsoScaleFrom, 'fScale', 0)
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'ScaleWidth',
        (['in'], c_float, 'Factor'),
        (['in'], MsoTriState, 'RelativeToOriginalSize'),
        (['in', 'optional'], MsoScaleFrom, 'fScale', 0)
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'Select',
        (['in', 'optional'], VARIANT, 'Replace')
    ),
    COMMETHOD([dispid(26)], HRESULT, 'SetShapesDefaultProperties'),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'Ungroup',
        (['out', 'retval'], POINTER(POINTER(ShapeRange)), 'Ungroup')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'ZOrder',
        (['in'], MsoZOrderCmd, 'ZOrderCmd')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'Adjustments',
        (['out', 'retval'], POINTER(POINTER(Adjustments)), 'Adjustments')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'AutoShapeType',
        (['out', 'retval'], POINTER(MsoAutoShapeType), 'AutoShapeType')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'AutoShapeType',
        (['in'], MsoAutoShapeType, 'AutoShapeType')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'BlackWhiteMode',
        (['out', 'retval'], POINTER(MsoBlackWhiteMode), 'BlackWhiteMode')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'BlackWhiteMode',
        (['in'], MsoBlackWhiteMode, 'BlackWhiteMode')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'Callout',
        (['out', 'retval'], POINTER(POINTER(CalloutFormat)), 'Callout')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'ConnectionSiteCount',
        (['out', 'retval'], POINTER(c_int), 'ConnectionSiteCount')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'Connector',
        (['out', 'retval'], POINTER(MsoTriState), 'Connector')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'ConnectorFormat',
        (
            ['out', 'retval'],
            POINTER(POINTER(ConnectorFormat)),
            'ConnectorFormat',
        )
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'Fill',
        (['out', 'retval'], POINTER(POINTER(FillFormat)), 'Fill')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'GroupItems',
        (['out', 'retval'], POINTER(POINTER(GroupShapes)), 'GroupItems')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_float), 'Height')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_float, 'Height')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'HorizontalFlip',
        (['out', 'retval'], POINTER(MsoTriState), 'HorizontalFlip')
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_float), 'Left')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_float, 'Left')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'Line',
        (['out', 'retval'], POINTER(POINTER(LineFormat)), 'Line')
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'LockAspectRatio',
        (['out', 'retval'], POINTER(MsoTriState), 'LockAspectRatio')
    ),
    COMMETHOD(
        [dispid(113), 'propput'],
        HRESULT,
        'LockAspectRatio',
        (['in'], MsoTriState, 'LockAspectRatio')
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(115), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'Name')
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'Nodes',
        (['out', 'retval'], POINTER(POINTER(ShapeNodes)), 'Nodes')
    ),
    COMMETHOD(
        [dispid(117), 'propget'],
        HRESULT,
        'Rotation',
        (['out', 'retval'], POINTER(c_float), 'Rotation')
    ),
    COMMETHOD(
        [dispid(117), 'propput'],
        HRESULT,
        'Rotation',
        (['in'], c_float, 'Rotation')
    ),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'PictureFormat',
        (['out', 'retval'], POINTER(POINTER(PictureFormat)), 'Picture')
    ),
    COMMETHOD(
        [dispid(119), 'propget'],
        HRESULT,
        'Shadow',
        (['out', 'retval'], POINTER(POINTER(ShadowFormat)), 'Shadow')
    ),
    COMMETHOD(
        [dispid(120), 'propget'],
        HRESULT,
        'TextEffect',
        (['out', 'retval'], POINTER(POINTER(TextEffectFormat)), 'TextEffect')
    ),
    COMMETHOD(
        [dispid(121), 'propget'],
        HRESULT,
        'TextFrame',
        (['out', 'retval'], POINTER(POINTER(TextFrame)), 'TextFrame')
    ),
    COMMETHOD(
        [dispid(122), 'propget'],
        HRESULT,
        'ThreeD',
        (['out', 'retval'], POINTER(POINTER(ThreeDFormat)), 'ThreeD')
    ),
    COMMETHOD(
        [dispid(123), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_float), 'Top')
    ),
    COMMETHOD(
        [dispid(123), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_float, 'Top')
    ),
    COMMETHOD(
        [dispid(124), 'propget'],
        HRESULT,
        'Type',
        (['out', 'retval'], POINTER(MsoShapeType), 'Type')
    ),
    COMMETHOD(
        [dispid(125), 'propget'],
        HRESULT,
        'VerticalFlip',
        (['out', 'retval'], POINTER(MsoTriState), 'VerticalFlip')
    ),
    COMMETHOD(
        [dispid(126), 'propget'],
        HRESULT,
        'Vertices',
        (['out', 'retval'], POINTER(VARIANT), 'Vertices')
    ),
    COMMETHOD(
        [dispid(127), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(MsoTriState), 'Visible')
    ),
    COMMETHOD(
        [dispid(127), 'propput'],
        HRESULT,
        'Visible',
        (['in'], MsoTriState, 'Visible')
    ),
    COMMETHOD(
        [dispid(128), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_float), 'Width')
    ),
    COMMETHOD(
        [dispid(128), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_float, 'Width')
    ),
    COMMETHOD(
        [dispid(129), 'propget'],
        HRESULT,
        'ZOrderPosition',
        (['out', 'retval'], POINTER(c_int), 'ZOrderPosition')
    ),
    COMMETHOD(
        [dispid(130), 'propget'],
        HRESULT,
        'Script',
        (['out', 'retval'], POINTER(POINTER(Script)), 'Script')
    ),
    COMMETHOD(
        [dispid(131), 'propget'],
        HRESULT,
        'AlternativeText',
        (['out', 'retval'], POINTER(BSTR), 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(131), 'propput'],
        HRESULT,
        'AlternativeText',
        (['in'], BSTR, 'AlternativeText')
    ),
    COMMETHOD(
        [dispid(132), 'hidden', 'propget'],
        HRESULT,
        'HasDiagram',
        (['out', 'retval'], POINTER(MsoTriState), 'pHasDiagram')
    ),
    COMMETHOD(
        [dispid(133), 'hidden', 'propget'],
        HRESULT,
        'Diagram',
        (['out', 'retval'], POINTER(POINTER(IMsoDiagram)), 'Diagram')
    ),
    COMMETHOD(
        [dispid(134), 'hidden', 'propget'],
        HRESULT,
        'HasDiagramNode',
        (['out', 'retval'], POINTER(MsoTriState), 'pHasDiagram')
    ),
    COMMETHOD(
        [dispid(135), 'hidden', 'propget'],
        HRESULT,
        'DiagramNode',
        (['out', 'retval'], POINTER(POINTER(DiagramNode)), 'DiagramNode')
    ),
    COMMETHOD(
        [dispid(136), 'propget'],
        HRESULT,
        'Child',
        (['out', 'retval'], POINTER(MsoTriState), 'Child')
    ),
    COMMETHOD(
        [dispid(137), 'propget'],
        HRESULT,
        'ParentGroup',
        (['out', 'retval'], POINTER(POINTER(Shape)), 'Parent')
    ),
    COMMETHOD(
        [dispid(138), 'hidden', 'propget'],
        HRESULT,
        'CanvasItems',
        (['out', 'retval'], POINTER(POINTER(CanvasShapes)), 'CanvasShapes')
    ),
    COMMETHOD(
        [dispid(139), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(c_int), 'pid')
    ),
    COMMETHOD(
        [dispid(140), 'hidden'],
        HRESULT,
        'CanvasCropLeft',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(141), 'hidden'],
        HRESULT,
        'CanvasCropTop',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(142), 'hidden'],
        HRESULT,
        'CanvasCropRight',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(143), 'hidden'],
        HRESULT,
        'CanvasCropBottom',
        (['in'], c_float, 'Increment')
    ),
    COMMETHOD(
        [dispid(144), 'hidden', 'propput'],
        HRESULT,
        'RTF',
        (['in'], BSTR, 'rhs')
    ),
    COMMETHOD(
        [dispid(145), 'propget'],
        HRESULT,
        'TextFrame2',
        (['out', 'retval'], POINTER(POINTER(TextFrame2)), 'Frame')
    ),
    COMMETHOD([dispid(146)], HRESULT, 'Cut'),
    COMMETHOD([dispid(147)], HRESULT, 'Copy'),
    COMMETHOD(
        [dispid(148), 'propget'],
        HRESULT,
        'HasChart',
        (['out', 'retval'], POINTER(MsoTriState), 'pHasChart')
    ),
    COMMETHOD(
        [dispid(149), 'propget'],
        HRESULT,
        'Chart',
        (['out', 'retval'], POINTER(POINTER(IMsoChart)), 'Chart')
    ),
    COMMETHOD(
        [dispid(150), 'propget'],
        HRESULT,
        'ShapeStyle',
        (['out', 'retval'], POINTER(MsoShapeStyleIndex), 'ShapeStyle')
    ),
    COMMETHOD(
        [dispid(150), 'propput'],
        HRESULT,
        'ShapeStyle',
        (['in'], MsoShapeStyleIndex, 'ShapeStyle')
    ),
    COMMETHOD(
        [dispid(151), 'propget'],
        HRESULT,
        'BackgroundStyle',
        (['out', 'retval'], POINTER(MsoBackgroundStyleIndex), 'BackgroundStyle')
    ),
    COMMETHOD(
        [dispid(151), 'propput'],
        HRESULT,
        'BackgroundStyle',
        (['in'], MsoBackgroundStyleIndex, 'BackgroundStyle')
    ),
    COMMETHOD(
        [dispid(152), 'propget'],
        HRESULT,
        'SoftEdge',
        (['out', 'retval'], POINTER(POINTER(SoftEdgeFormat)), 'SoftEdge')
    ),
    COMMETHOD(
        [dispid(153), 'propget'],
        HRESULT,
        'Glow',
        (['out', 'retval'], POINTER(POINTER(GlowFormat)), 'Glow')
    ),
    COMMETHOD(
        [dispid(154), 'propget'],
        HRESULT,
        'Reflection',
        (['out', 'retval'], POINTER(POINTER(ReflectionFormat)), 'Reflection')
    ),
    COMMETHOD(
        [dispid(155), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'Title')
    ),
    COMMETHOD(
        [dispid(155), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'Title')
    ),
    COMMETHOD(
        [dispid(156)],
        HRESULT,
        'MergeShapes',
        (['in'], MsoMergeCmd, 'MergeCmd'),
        (['in', 'optional'], POINTER(Shape), 'PrimaryShape', 0)
    ),
    COMMETHOD(
        [dispid(157), 'propget'],
        HRESULT,
        'GraphicStyle',
        (['out', 'retval'], POINTER(MsoGraphicStyleIndex), 'GraphicStyle')
    ),
    COMMETHOD(
        [dispid(157), 'propput'],
        HRESULT,
        'GraphicStyle',
        (['in'], MsoGraphicStyleIndex, 'GraphicStyle')
    ),
    COMMETHOD(
        [dispid(158)],
        HRESULT,
        'SaveAsPicture',
        (['in'], MsoPictureType, 'PictureType'),
        (['in'], BSTR, 'FileName'),
        (['in'], VARIANT_BOOL, 'FSaveShapesIndividually')
    ),
    COMMETHOD(
        [dispid(159), 'propget'],
        HRESULT,
        'Model3D',
        (['out', 'retval'], POINTER(POINTER(Model3DFormat)), 'Model3D')
    ),
    COMMETHOD(
        [dispid(160), 'propget'],
        HRESULT,
        'Decorative',
        (['out', 'retval'], POINTER(MsoTriState), 'fDecorative')
    ),
    COMMETHOD(
        [dispid(160), 'propput'],
        HRESULT,
        'Decorative',
        (['in'], MsoTriState, 'fDecorative')
    ),
    COMMETHOD(
        [dispid(161), 'propget'],
        HRESULT,
        'Locked',
        (['out', 'retval'], POINTER(MsoTriState), 'pLocked')
    ),
    COMMETHOD(
        [dispid(161), 'propput'],
        HRESULT,
        'Locked',
        (['in'], MsoTriState, 'pLocked')
    ),
]

################################################################
# code template for ShapeRange implementation
# class ShapeRange_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#
#     def Align(self, AlignCmd, RelativeTo):
#         '-no docstring-'
#         #return 
#
#     def Apply(self):
#         '-no docstring-'
#         #return 
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#
#     def Distribute(self, DistributeCmd, RelativeTo):
#         '-no docstring-'
#         #return 
#
#     def Duplicate(self):
#         '-no docstring-'
#         #return Duplicate
#
#     def Flip(self, FlipCmd):
#         '-no docstring-'
#         #return 
#
#     def IncrementLeft(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementRotation(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def IncrementTop(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def Group(self):
#         '-no docstring-'
#         #return Group
#
#     def PickUp(self):
#         '-no docstring-'
#         #return 
#
#     def Regroup(self):
#         '-no docstring-'
#         #return Regroup
#
#     def RerouteConnections(self):
#         '-no docstring-'
#         #return 
#
#     def ScaleHeight(self, Factor, RelativeToOriginalSize, fScale):
#         '-no docstring-'
#         #return 
#
#     def ScaleWidth(self, Factor, RelativeToOriginalSize, fScale):
#         '-no docstring-'
#         #return 
#
#     def Select(self, Replace):
#         '-no docstring-'
#         #return 
#
#     def SetShapesDefaultProperties(self):
#         '-no docstring-'
#         #return 
#
#     def Ungroup(self):
#         '-no docstring-'
#         #return Ungroup
#
#     def ZOrder(self, ZOrderCmd):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Adjustments(self):
#         '-no docstring-'
#         #return Adjustments
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoShapeType
#     def _set(self, AutoShapeType):
#         '-no docstring-'
#     AutoShapeType = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BlackWhiteMode
#     def _set(self, BlackWhiteMode):
#         '-no docstring-'
#     BlackWhiteMode = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Callout(self):
#         '-no docstring-'
#         #return Callout
#
#     @property
#     def ConnectionSiteCount(self):
#         '-no docstring-'
#         #return ConnectionSiteCount
#
#     @property
#     def Connector(self):
#         '-no docstring-'
#         #return Connector
#
#     @property
#     def ConnectorFormat(self):
#         '-no docstring-'
#         #return ConnectorFormat
#
#     @property
#     def Fill(self):
#         '-no docstring-'
#         #return Fill
#
#     @property
#     def GroupItems(self):
#         '-no docstring-'
#         #return GroupItems
#
#     def _get(self):
#         '-no docstring-'
#         #return Height
#     def _set(self, Height):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HorizontalFlip(self):
#         '-no docstring-'
#         #return HorizontalFlip
#
#     def _get(self):
#         '-no docstring-'
#         #return Left
#     def _set(self, Left):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Line(self):
#         '-no docstring-'
#         #return Line
#
#     def _get(self):
#         '-no docstring-'
#         #return LockAspectRatio
#     def _set(self, LockAspectRatio):
#         '-no docstring-'
#     LockAspectRatio = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Name
#     def _set(self, Name):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Nodes(self):
#         '-no docstring-'
#         #return Nodes
#
#     def _get(self):
#         '-no docstring-'
#         #return Rotation
#     def _set(self, Rotation):
#         '-no docstring-'
#     Rotation = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def PictureFormat(self):
#         '-no docstring-'
#         #return Picture
#
#     @property
#     def Shadow(self):
#         '-no docstring-'
#         #return Shadow
#
#     @property
#     def TextEffect(self):
#         '-no docstring-'
#         #return TextEffect
#
#     @property
#     def TextFrame(self):
#         '-no docstring-'
#         #return TextFrame
#
#     @property
#     def ThreeD(self):
#         '-no docstring-'
#         #return ThreeD
#
#     def _get(self):
#         '-no docstring-'
#         #return Top
#     def _set(self, Top):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Type(self):
#         '-no docstring-'
#         #return Type
#
#     @property
#     def VerticalFlip(self):
#         '-no docstring-'
#         #return VerticalFlip
#
#     @property
#     def Vertices(self):
#         '-no docstring-'
#         #return Vertices
#
#     def _get(self):
#         '-no docstring-'
#         #return Visible
#     def _set(self, Visible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Width
#     def _set(self, Width):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ZOrderPosition(self):
#         '-no docstring-'
#         #return ZOrderPosition
#
#     @property
#     def Script(self):
#         '-no docstring-'
#         #return Script
#
#     def _get(self):
#         '-no docstring-'
#         #return AlternativeText
#     def _set(self, AlternativeText):
#         '-no docstring-'
#     AlternativeText = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def HasDiagram(self):
#         '-no docstring-'
#         #return pHasDiagram
#
#     @property
#     def Diagram(self):
#         '-no docstring-'
#         #return Diagram
#
#     @property
#     def HasDiagramNode(self):
#         '-no docstring-'
#         #return pHasDiagram
#
#     @property
#     def DiagramNode(self):
#         '-no docstring-'
#         #return DiagramNode
#
#     @property
#     def Child(self):
#         '-no docstring-'
#         #return Child
#
#     @property
#     def ParentGroup(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def CanvasItems(self):
#         '-no docstring-'
#         #return CanvasShapes
#
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pid
#
#     def CanvasCropLeft(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropTop(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropRight(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def CanvasCropBottom(self, Increment):
#         '-no docstring-'
#         #return 
#
#     def _set(self, rhs):
#         '-no docstring-'
#     RTF = property(fset = _set, doc = _set.__doc__)
#
#     @property
#     def TextFrame2(self):
#         '-no docstring-'
#         #return Frame
#
#     def Cut(self):
#         '-no docstring-'
#         #return 
#
#     def Copy(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def HasChart(self):
#         '-no docstring-'
#         #return pHasChart
#
#     @property
#     def Chart(self):
#         '-no docstring-'
#         #return Chart
#
#     def _get(self):
#         '-no docstring-'
#         #return ShapeStyle
#     def _set(self, ShapeStyle):
#         '-no docstring-'
#     ShapeStyle = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return BackgroundStyle
#     def _set(self, BackgroundStyle):
#         '-no docstring-'
#     BackgroundStyle = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SoftEdge(self):
#         '-no docstring-'
#         #return SoftEdge
#
#     @property
#     def Glow(self):
#         '-no docstring-'
#         #return Glow
#
#     @property
#     def Reflection(self):
#         '-no docstring-'
#         #return Reflection
#
#     def _get(self):
#         '-no docstring-'
#         #return Title
#     def _set(self, Title):
#         '-no docstring-'
#     Title = property(_get, _set, doc = _set.__doc__)
#
#     def MergeShapes(self, MergeCmd, PrimaryShape):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return GraphicStyle
#     def _set(self, GraphicStyle):
#         '-no docstring-'
#     GraphicStyle = property(_get, _set, doc = _set.__doc__)
#
#     def SaveAsPicture(self, PictureType, FileName, FSaveShapesIndividually):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Model3D(self):
#         '-no docstring-'
#         #return Model3D
#
#     def _get(self):
#         '-no docstring-'
#         #return fDecorative
#     def _set(self, fDecorative):
#         '-no docstring-'
#     Decorative = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pLocked
#     def _set(self, pLocked):
#         '-no docstring-'
#     Locked = property(_get, _set, doc = _set.__doc__)
#

EffectParameters._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (
            ['out', 'retval'],
            POINTER(POINTER(EffectParameter)),
            'EffectParameter',
        )
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'Count')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), '_NewEnum')
    ),
]

################################################################
# code template for EffectParameters implementation
# class EffectParameters_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return EffectParameter
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return Count
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return _NewEnum
#


class FileDialogFilter(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0364-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Extensions(self) -> hints.Incomplete: ...
        Extensions = hints.normal_property(_get_Extensions)
        def _get_Description(self) -> hints.Incomplete: ...
        Description = hints.normal_property(_get_Description)


FileDialogFilter._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Extensions',
        (['out', 'retval'], POINTER(BSTR), 'Extensions')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'Description')
    ),
]

################################################################
# code template for FileDialogFilter implementation
# class FileDialogFilter_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Extensions(self):
#         '-no docstring-'
#         #return Extensions
#
#     @property
#     def Description(self):
#         '-no docstring-'
#         #return Description
#


class FileDialog(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0362-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Filters(self) -> 'FileDialogFilters': ...
        Filters = hints.normal_property(_get_Filters)
        def _get_FilterIndex(self) -> hints.Incomplete: ...
        def _set_FilterIndex(self, FilterIndex: hints.Incomplete) -> hints.Hresult: ...
        FilterIndex = hints.normal_property(_get_FilterIndex, _set_FilterIndex)
        def _get_Title(self) -> hints.Incomplete: ...
        def _set_Title(self, Title: hints.Incomplete) -> hints.Hresult: ...
        Title = hints.normal_property(_get_Title, _set_Title)
        def _get_ButtonName(self) -> hints.Incomplete: ...
        def _set_ButtonName(self, ButtonName: hints.Incomplete) -> hints.Hresult: ...
        ButtonName = hints.normal_property(_get_ButtonName, _set_ButtonName)
        def _get_AllowMultiSelect(self) -> hints.Incomplete: ...
        def _set_AllowMultiSelect(self, pvarfAllowMultiSelect: hints.Incomplete) -> hints.Hresult: ...
        AllowMultiSelect = hints.normal_property(_get_AllowMultiSelect, _set_AllowMultiSelect)
        def _get_InitialView(self) -> hints.Incomplete: ...
        def _set_InitialView(self, pinitialview: hints.Incomplete) -> hints.Hresult: ...
        InitialView = hints.normal_property(_get_InitialView, _set_InitialView)
        def _get_InitialFileName(self) -> hints.Incomplete: ...
        def _set_InitialFileName(self, InitialFileName: hints.Incomplete) -> hints.Hresult: ...
        InitialFileName = hints.normal_property(_get_InitialFileName, _set_InitialFileName)
        def _get_SelectedItems(self) -> 'FileDialogSelectedItems': ...
        SelectedItems = hints.normal_property(_get_SelectedItems)
        def _get_DialogType(self) -> hints.Incomplete: ...
        DialogType = hints.normal_property(_get_DialogType)
        def _get_Item(self) -> hints.Incomplete: ...
        Item = hints.normal_property(_get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Show(self) -> hints.Incomplete: ...
        def Execute(self) -> hints.Hresult: ...


class FileDialogFilters(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0365-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'FileDialogFilter': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Delete(self, filter: hints.Incomplete = ...) -> hints.Hresult: ...
        def Clear(self) -> hints.Hresult: ...
        def Add(self, Description: hints.Incomplete, Extensions: hints.Incomplete, Position: hints.Incomplete = ...) -> 'FileDialogFilter': ...


FileDialog._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Filters',
        (['out', 'retval'], POINTER(POINTER(FileDialogFilters)), 'Filters')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'FilterIndex',
        (['out', 'retval'], POINTER(c_int), 'FilterIndex')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propput'],
        HRESULT,
        'FilterIndex',
        (['in'], c_int, 'FilterIndex')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'Title')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propput'],
        HRESULT,
        'Title',
        (['in'], BSTR, 'Title')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propget'],
        HRESULT,
        'ButtonName',
        (['out', 'retval'], POINTER(BSTR), 'ButtonName')
    ),
    COMMETHOD(
        [dispid(1610809350), 'propput'],
        HRESULT,
        'ButtonName',
        (['in'], BSTR, 'ButtonName')
    ),
    COMMETHOD(
        [dispid(1610809352), 'propget'],
        HRESULT,
        'AllowMultiSelect',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfAllowMultiSelect')
    ),
    COMMETHOD(
        [dispid(1610809352), 'propput'],
        HRESULT,
        'AllowMultiSelect',
        (['in'], VARIANT_BOOL, 'pvarfAllowMultiSelect')
    ),
    COMMETHOD(
        [dispid(1610809354), 'propget'],
        HRESULT,
        'InitialView',
        (['out', 'retval'], POINTER(MsoFileDialogView), 'pinitialview')
    ),
    COMMETHOD(
        [dispid(1610809354), 'propput'],
        HRESULT,
        'InitialView',
        (['in'], MsoFileDialogView, 'pinitialview')
    ),
    COMMETHOD(
        [dispid(1610809356), 'propget'],
        HRESULT,
        'InitialFileName',
        (['out', 'retval'], POINTER(BSTR), 'InitialFileName')
    ),
    COMMETHOD(
        [dispid(1610809356), 'propput'],
        HRESULT,
        'InitialFileName',
        (['in'], BSTR, 'InitialFileName')
    ),
    COMMETHOD(
        [dispid(1610809358), 'propget'],
        HRESULT,
        'SelectedItems',
        (['out', 'retval'], POINTER(POINTER(FileDialogSelectedItems)), 'Files')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propget'],
        HRESULT,
        'DialogType',
        (['out', 'retval'], POINTER(MsoFileDialogType), 'pdialogtype')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['out', 'retval'], POINTER(BSTR), 'Name')
    ),
    COMMETHOD(
        [dispid(1610809361)],
        HRESULT,
        'Show',
        (['out', 'retval'], POINTER(c_int), 'rval')
    ),
    COMMETHOD([dispid(1610809362)], HRESULT, 'Execute'),
]

################################################################
# code template for FileDialog implementation
# class FileDialog_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def Filters(self):
#         '-no docstring-'
#         #return Filters
#
#     def _get(self):
#         '-no docstring-'
#         #return FilterIndex
#     def _set(self, FilterIndex):
#         '-no docstring-'
#     FilterIndex = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Title
#     def _set(self, Title):
#         '-no docstring-'
#     Title = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return ButtonName
#     def _set(self, ButtonName):
#         '-no docstring-'
#     ButtonName = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfAllowMultiSelect
#     def _set(self, pvarfAllowMultiSelect):
#         '-no docstring-'
#     AllowMultiSelect = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pinitialview
#     def _set(self, pinitialview):
#         '-no docstring-'
#     InitialView = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return InitialFileName
#     def _set(self, InitialFileName):
#         '-no docstring-'
#     InitialFileName = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def SelectedItems(self):
#         '-no docstring-'
#         #return Files
#
#     @property
#     def DialogType(self):
#         '-no docstring-'
#         #return pdialogtype
#
#     @property
#     def Item(self):
#         '-no docstring-'
#         #return Name
#
#     def Show(self):
#         '-no docstring-'
#         #return rval
#
#     def Execute(self):
#         '-no docstring-'
#         #return 
#


class ODSOFilters(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1534-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Item(self, Index: hints.Incomplete) -> hints.Incomplete: ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self, Column: hints.Incomplete, Comparison: hints.Incomplete, Conjunction: hints.Incomplete, bstrCompareTo: hints.Incomplete = ..., DeferUpdate: hints.Incomplete = ...) -> hints.Hresult: ...
        def Delete(self, Index: hints.Incomplete, DeferUpdate: hints.Incomplete = ...) -> hints.Hresult: ...


ODSOFilters._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'plCount')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppParentOdso')
    ),
    COMMETHOD(
        [dispid(1610809346)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppColumn')
    ),
    COMMETHOD(
        [dispid(1610809347)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Column'),
        (['in'], MsoFilterComparison, 'Comparison'),
        (['in'], MsoFilterConjunction, 'Conjunction'),
        (['in', 'optional'], BSTR, 'bstrCompareTo', ''),
        (['in', 'optional'], VARIANT_BOOL, 'DeferUpdate', False)
    ),
    COMMETHOD(
        [dispid(1610809348)],
        HRESULT,
        'Delete',
        (['in'], c_int, 'Index'),
        (['in', 'optional'], VARIANT_BOOL, 'DeferUpdate', False)
    ),
]

################################################################
# code template for ODSOFilters implementation
# class ODSOFilters_Impl(object):
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return plCount
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppParentOdso
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppColumn
#
#     def Add(self, Column, Comparison, Conjunction, bstrCompareTo, DeferUpdate):
#         '-no docstring-'
#         #return 
#
#     def Delete(self, Index, DeferUpdate):
#         '-no docstring-'
#         #return 
#


class NewFile(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0936-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def Add(self, FileName: hints.Incomplete, Section: hints.Incomplete = ..., DisplayName: hints.Incomplete = ..., Action: hints.Incomplete = ...) -> hints.Incomplete: ...
        def Remove(self, FileName: hints.Incomplete, Section: hints.Incomplete = ..., DisplayName: hints.Incomplete = ..., Action: hints.Incomplete = ...) -> hints.Incomplete: ...


NewFile._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'FileName'),
        (['in', 'optional'], VARIANT, 'Section'),
        (['in', 'optional'], VARIANT, 'DisplayName'),
        (['in', 'optional'], VARIANT, 'Action'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarf')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Remove',
        (['in'], BSTR, 'FileName'),
        (['in', 'optional'], VARIANT, 'Section'),
        (['in', 'optional'], VARIANT, 'DisplayName'),
        (['in', 'optional'], VARIANT, 'Action'),
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarf')
    ),
]

################################################################
# code template for NewFile implementation
# class NewFile_Impl(object):
#     def Add(self, FileName, Section, DisplayName, Action):
#         '-no docstring-'
#         #return pvarf
#
#     def Remove(self, FileName, Section, DisplayName, Action):
#         '-no docstring-'
#         #return pvarf
#

FileDialogFilters._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcFilters')
    ),
    COMMETHOD(
        [dispid(0)],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(FileDialogFilter)), 'Item')
    ),
    COMMETHOD(
        [dispid(1610809348)],
        HRESULT,
        'Delete',
        (['in', 'optional'], VARIANT, 'filter')
    ),
    COMMETHOD([dispid(1610809349)], HRESULT, 'Clear'),
    COMMETHOD(
        [dispid(1610809350)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Description'),
        (['in'], BSTR, 'Extensions'),
        (['in', 'optional'], VARIANT, 'Position'),
        (['out', 'retval'], POINTER(POINTER(FileDialogFilter)), 'Add')
    ),
]

################################################################
# code template for FileDialogFilters implementation
# class FileDialogFilters_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcFilters
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return Item
#
#     def Delete(self, filter):
#         '-no docstring-'
#         #return 
#
#     def Clear(self):
#         '-no docstring-'
#         #return 
#
#     def Add(self, Description, Extensions, Position):
#         '-no docstring-'
#         #return Add
#

WebComponent._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Shape',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RetValue')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'URL',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(2), 'propput'],
        HRESULT,
        'URL',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'HTML',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'HTML',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'RetValue')
    ),
    COMMETHOD(
        [dispid(4), 'propput'],
        HRESULT,
        'Name',
        (['in'], BSTR, 'RetValue')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_int), 'RetValue')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_int, 'RetValue')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_int), 'RetValue')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_int, 'RetValue')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetPlaceHolderGraphic',
        (['in'], BSTR, 'PlaceHolderGraphic')
    ),
    COMMETHOD([dispid(8)], HRESULT, 'Commit'),
    COMMETHOD([dispid(9)], HRESULT, 'Revert'),
]

################################################################
# code template for WebComponent implementation
# class WebComponent_Impl(object):
#     @property
#     def Shape(self):
#         '-no docstring-'
#         #return RetValue
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     URL = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     HTML = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Name = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return RetValue
#     def _set(self, RetValue):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def SetPlaceHolderGraphic(self, PlaceHolderGraphic):
#         '-no docstring-'
#         #return 
#
#     def Commit(self):
#         '-no docstring-'
#         #return 
#
#     def Revert(self):
#         '-no docstring-'
#         #return 
#


class WorkflowTask(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD900-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Id(self) -> hints.Incomplete: ...
        Id = hints.normal_property(_get_Id)
        def _get_ListID(self) -> hints.Incomplete: ...
        ListID = hints.normal_property(_get_ListID)
        def _get_WorkflowID(self) -> hints.Incomplete: ...
        WorkflowID = hints.normal_property(_get_WorkflowID)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_Description(self) -> hints.Incomplete: ...
        Description = hints.normal_property(_get_Description)
        def _get_AssignedTo(self) -> hints.Incomplete: ...
        AssignedTo = hints.normal_property(_get_AssignedTo)
        def _get_CreatedBy(self) -> hints.Incomplete: ...
        CreatedBy = hints.normal_property(_get_CreatedBy)
        def _get_DueDate(self) -> hints.Incomplete: ...
        DueDate = hints.normal_property(_get_DueDate)
        def _get_CreatedDate(self) -> hints.Incomplete: ...
        CreatedDate = hints.normal_property(_get_CreatedDate)
        def Show(self) -> hints.Incomplete: ...


WorkflowTask._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'ListID',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'WorkflowID',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'AssignedTo',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'CreatedBy',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'DueDate',
        (['out', 'retval'], POINTER(c_double), 'pdate')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'CreatedDate',
        (['out', 'retval'], POINTER(c_double), 'pdate')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'Show',
        (['out', 'retval'], POINTER(c_int), 'pRet')
    ),
]

################################################################
# code template for WorkflowTask implementation
# class WorkflowTask_Impl(object):
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def ListID(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def WorkflowID(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Description(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def AssignedTo(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def CreatedBy(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def DueDate(self):
#         '-no docstring-'
#         #return pdate
#
#     @property
#     def CreatedDate(self):
#         '-no docstring-'
#         #return pdate
#
#     def Show(self):
#         '-no docstring-'
#         #return pRet
#

WorkflowTemplate._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Id',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Description',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'DocumentLibraryName',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'DocumentLibraryURL',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Show',
        (['out', 'retval'], POINTER(c_int), 'pRet')
    ),
]

################################################################
# code template for WorkflowTemplate implementation
# class WorkflowTemplate_Impl(object):
#     @property
#     def Id(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def Description(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def DocumentLibraryName(self):
#         '-no docstring-'
#         #return pbstr
#
#     @property
#     def DocumentLibraryURL(self):
#         '-no docstring-'
#         #return pbstr
#
#     def Show(self):
#         '-no docstring-'
#         #return pRet
#

ThemeEffectScheme._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Load',
        (['in'], BSTR, 'FileName')
    ),
]

################################################################
# code template for ThemeEffectScheme implementation
# class ThemeEffectScheme_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def Load(self, FileName):
#         '-no docstring-'
#         #return 
#

_CustomTaskPane._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Title',
        (['out', 'retval'], POINTER(BSTR), 'prop')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'prop')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'Window',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'prop')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'prop')
    ),
    COMMETHOD(
        [dispid(3), 'propput'],
        HRESULT,
        'Visible',
        (['in'], VARIANT_BOOL, 'prop')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ContentControl',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'prop')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'Height',
        (['out', 'retval'], POINTER(c_int), 'prop')
    ),
    COMMETHOD(
        [dispid(5), 'propput'],
        HRESULT,
        'Height',
        (['in'], c_int, 'prop')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'Width',
        (['out', 'retval'], POINTER(c_int), 'prop')
    ),
    COMMETHOD(
        [dispid(6), 'propput'],
        HRESULT,
        'Width',
        (['in'], c_int, 'prop')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'DockPosition',
        (['out', 'retval'], POINTER(MsoCTPDockPosition), 'prop')
    ),
    COMMETHOD(
        [dispid(7), 'propput'],
        HRESULT,
        'DockPosition',
        (['in'], MsoCTPDockPosition, 'prop')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'DockPositionRestrict',
        (['out', 'retval'], POINTER(MsoCTPDockPositionRestrict), 'prop')
    ),
    COMMETHOD(
        [dispid(8), 'propput'],
        HRESULT,
        'DockPositionRestrict',
        (['in'], MsoCTPDockPositionRestrict, 'prop')
    ),
    COMMETHOD([dispid(9)], HRESULT, 'Delete'),
]

################################################################
# code template for _CustomTaskPane implementation
# class _CustomTaskPane_Impl(object):
#     @property
#     def Title(self):
#         '-no docstring-'
#         #return prop
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return prop
#
#     @property
#     def Window(self):
#         '-no docstring-'
#         #return prop
#
#     def _get(self):
#         '-no docstring-'
#         #return prop
#     def _set(self, prop):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ContentControl(self):
#         '-no docstring-'
#         #return prop
#
#     def _get(self):
#         '-no docstring-'
#         #return prop
#     def _set(self, prop):
#         '-no docstring-'
#     Height = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return prop
#     def _set(self, prop):
#         '-no docstring-'
#     Width = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return prop
#     def _set(self, prop):
#         '-no docstring-'
#     DockPosition = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return prop
#     def _set(self, prop):
#         '-no docstring-'
#     DockPositionRestrict = property(_get, _set, doc = _set.__doc__)
#
#     def Delete(self):
#         '-no docstring-'
#         #return 
#

TextFrame2._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'Parent')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'MarginBottom',
        (['out', 'retval'], POINTER(c_float), 'MarginBottom')
    ),
    COMMETHOD(
        [dispid(100), 'propput'],
        HRESULT,
        'MarginBottom',
        (['in'], c_float, 'MarginBottom')
    ),
    COMMETHOD(
        [dispid(101), 'propget'],
        HRESULT,
        'MarginLeft',
        (['out', 'retval'], POINTER(c_float), 'MarginLeft')
    ),
    COMMETHOD(
        [dispid(101), 'propput'],
        HRESULT,
        'MarginLeft',
        (['in'], c_float, 'MarginLeft')
    ),
    COMMETHOD(
        [dispid(102), 'propget'],
        HRESULT,
        'MarginRight',
        (['out', 'retval'], POINTER(c_float), 'MarginRight')
    ),
    COMMETHOD(
        [dispid(102), 'propput'],
        HRESULT,
        'MarginRight',
        (['in'], c_float, 'MarginRight')
    ),
    COMMETHOD(
        [dispid(103), 'propget'],
        HRESULT,
        'MarginTop',
        (['out', 'retval'], POINTER(c_float), 'MarginTop')
    ),
    COMMETHOD(
        [dispid(103), 'propput'],
        HRESULT,
        'MarginTop',
        (['in'], c_float, 'MarginTop')
    ),
    COMMETHOD(
        [dispid(104), 'propget'],
        HRESULT,
        'Orientation',
        (['out', 'retval'], POINTER(MsoTextOrientation), 'Orientation')
    ),
    COMMETHOD(
        [dispid(104), 'propput'],
        HRESULT,
        'Orientation',
        (['in'], MsoTextOrientation, 'Orientation')
    ),
    COMMETHOD(
        [dispid(105), 'propget'],
        HRESULT,
        'HorizontalAnchor',
        (['out', 'retval'], POINTER(MsoHorizontalAnchor), 'HorizontalAnchor')
    ),
    COMMETHOD(
        [dispid(105), 'propput'],
        HRESULT,
        'HorizontalAnchor',
        (['in'], MsoHorizontalAnchor, 'HorizontalAnchor')
    ),
    COMMETHOD(
        [dispid(106), 'propget'],
        HRESULT,
        'VerticalAnchor',
        (['out', 'retval'], POINTER(MsoVerticalAnchor), 'VerticalAnchor')
    ),
    COMMETHOD(
        [dispid(106), 'propput'],
        HRESULT,
        'VerticalAnchor',
        (['in'], MsoVerticalAnchor, 'VerticalAnchor')
    ),
    COMMETHOD(
        [dispid(107), 'propget'],
        HRESULT,
        'PathFormat',
        (['out', 'retval'], POINTER(MsoPathFormat), 'PathFormat')
    ),
    COMMETHOD(
        [dispid(107), 'propput'],
        HRESULT,
        'PathFormat',
        (['in'], MsoPathFormat, 'PathFormat')
    ),
    COMMETHOD(
        [dispid(108), 'propget'],
        HRESULT,
        'WarpFormat',
        (['out', 'retval'], POINTER(MsoWarpFormat), 'WarpFormat')
    ),
    COMMETHOD(
        [dispid(108), 'propput'],
        HRESULT,
        'WarpFormat',
        (['in'], MsoWarpFormat, 'WarpFormat')
    ),
    COMMETHOD(
        [dispid(109), 'propget'],
        HRESULT,
        'WordArtformat',
        (['out', 'retval'], POINTER(MsoPresetTextEffect), 'WordArtformat')
    ),
    COMMETHOD(
        [dispid(109), 'propput'],
        HRESULT,
        'WordArtformat',
        (['in'], MsoPresetTextEffect, 'WordArtformat')
    ),
    COMMETHOD(
        [dispid(110), 'propget'],
        HRESULT,
        'WordWrap',
        (['out', 'retval'], POINTER(MsoTriState), 'WordWrap')
    ),
    COMMETHOD(
        [dispid(110), 'propput'],
        HRESULT,
        'WordWrap',
        (['in'], MsoTriState, 'WordWrap')
    ),
    COMMETHOD(
        [dispid(111), 'propget'],
        HRESULT,
        'AutoSize',
        (['out', 'retval'], POINTER(MsoAutoSize), 'AutoSize')
    ),
    COMMETHOD(
        [dispid(111), 'propput'],
        HRESULT,
        'AutoSize',
        (['in'], MsoAutoSize, 'AutoSize')
    ),
    COMMETHOD(
        [dispid(112), 'propget'],
        HRESULT,
        'ThreeD',
        (['out', 'retval'], POINTER(POINTER(ThreeDFormat)), 'ThreeD')
    ),
    COMMETHOD(
        [dispid(113), 'propget'],
        HRESULT,
        'HasText',
        (['out', 'retval'], POINTER(MsoTriState), 'pHasText')
    ),
    COMMETHOD(
        [dispid(114), 'propget'],
        HRESULT,
        'TextRange',
        (['out', 'retval'], POINTER(POINTER(TextRange2)), 'Range')
    ),
    COMMETHOD(
        [dispid(115), 'propget'],
        HRESULT,
        'Column',
        (['out', 'retval'], POINTER(POINTER(TextColumn2)), 'Column')
    ),
    COMMETHOD(
        [dispid(116), 'propget'],
        HRESULT,
        'Ruler',
        (['out', 'retval'], POINTER(POINTER(Ruler2)), 'Ruler')
    ),
    COMMETHOD([dispid(117)], HRESULT, 'DeleteText'),
    COMMETHOD(
        [dispid(118), 'propget'],
        HRESULT,
        'NoTextRotation',
        (['out', 'retval'], POINTER(MsoTriState), 'NoTextRotation')
    ),
    COMMETHOD(
        [dispid(118), 'propput'],
        HRESULT,
        'NoTextRotation',
        (['in'], MsoTriState, 'NoTextRotation')
    ),
]

################################################################
# code template for TextFrame2 implementation
# class TextFrame2_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return Parent
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginBottom
#     def _set(self, MarginBottom):
#         '-no docstring-'
#     MarginBottom = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginLeft
#     def _set(self, MarginLeft):
#         '-no docstring-'
#     MarginLeft = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginRight
#     def _set(self, MarginRight):
#         '-no docstring-'
#     MarginRight = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return MarginTop
#     def _set(self, MarginTop):
#         '-no docstring-'
#     MarginTop = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return Orientation
#     def _set(self, Orientation):
#         '-no docstring-'
#     Orientation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return HorizontalAnchor
#     def _set(self, HorizontalAnchor):
#         '-no docstring-'
#     HorizontalAnchor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return VerticalAnchor
#     def _set(self, VerticalAnchor):
#         '-no docstring-'
#     VerticalAnchor = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return PathFormat
#     def _set(self, PathFormat):
#         '-no docstring-'
#     PathFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WarpFormat
#     def _set(self, WarpFormat):
#         '-no docstring-'
#     WarpFormat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WordArtformat
#     def _set(self, WordArtformat):
#         '-no docstring-'
#     WordArtformat = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return WordWrap
#     def _set(self, WordWrap):
#         '-no docstring-'
#     WordWrap = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return AutoSize
#     def _set(self, AutoSize):
#         '-no docstring-'
#     AutoSize = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def ThreeD(self):
#         '-no docstring-'
#         #return ThreeD
#
#     @property
#     def HasText(self):
#         '-no docstring-'
#         #return pHasText
#
#     @property
#     def TextRange(self):
#         '-no docstring-'
#         #return Range
#
#     @property
#     def Column(self):
#         '-no docstring-'
#         #return Column
#
#     @property
#     def Ruler(self):
#         '-no docstring-'
#         #return Ruler
#
#     def DeleteText(self):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return NoTextRotation
#     def _set(self, NoTextRotation):
#         '-no docstring-'
#     NoTextRotation = property(_get, _set, doc = _set.__doc__)
#


class FullSeriesCollection(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{000C1732-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def Item(self, Index: hints.Incomplete) -> 'IMsoSeries': ...
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _NewEnum(self) -> hints.Incomplete: ...
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Application(self) -> hints.Incomplete: ...
        Application = hints.normal_property(_get_Application)
        def _get_Creator(self) -> hints.Incomplete: ...
        Creator = hints.normal_property(_get_Creator)
        def _get__Default(self, Index: hints.Incomplete) -> 'IMsoSeries': ...
        _Default = hints.named_property('_Default', _get__Default)


FullSeriesCollection._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'RHS')
    ),
    COMMETHOD(
        [],
        HRESULT,
        'Item',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoSeries)), 'RHS')
    ),
    COMMETHOD(
        ['nonbrowsable'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Application',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppval')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Creator',
        (['out', 'retval'], POINTER(c_int), 'pval')
    ),
    COMMETHOD(
        ['nonbrowsable', 'propget'],
        HRESULT,
        '_Default',
        (['in'], VARIANT, 'Index'),
        (['out', 'retval'], POINTER(POINTER(IMsoSeries)), 'RHS')
    ),
]

################################################################
# code template for FullSeriesCollection implementation
# class FullSeriesCollection_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return RHS
#
#     def Item(self, Index):
#         '-no docstring-'
#         #return RHS
#
#     def _NewEnum(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Application(self):
#         '-no docstring-'
#         #return ppval
#
#     @property
#     def Creator(self):
#         '-no docstring-'
#         #return pval
#
#     @property
#     def _Default(self, Index):
#         '-no docstring-'
#         #return RHS
#


class Assistant(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0322-0000-0000-C000-000000000046}')
    _idlflags_ = ['hidden', 'dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def Move(self, xLeft: hints.Incomplete, yTop: hints.Incomplete) -> hints.Hresult: ...
        def _get_Top(self) -> hints.Incomplete: ...
        def _set_Top(self, pyTop: hints.Incomplete) -> hints.Hresult: ...
        Top = hints.normal_property(_get_Top, _set_Top)
        def _get_Left(self) -> hints.Incomplete: ...
        def _set_Left(self, pxLeft: hints.Incomplete) -> hints.Hresult: ...
        Left = hints.normal_property(_get_Left, _set_Left)
        def Help(self) -> hints.Hresult: ...
        def StartWizard(self, On: hints.Incomplete, Callback: hints.Incomplete, PrivateX: hints.Incomplete, Animation: hints.Incomplete = ..., CustomTeaser: hints.Incomplete = ..., Top: hints.Incomplete = ..., Left: hints.Incomplete = ..., Bottom: hints.Incomplete = ..., Right: hints.Incomplete = ...) -> hints.Incomplete: ...
        def EndWizard(self, WizardID: hints.Incomplete, varfSuccess: hints.Incomplete, Animation: hints.Incomplete = ...) -> hints.Hresult: ...
        def ActivateWizard(self, WizardID: hints.Incomplete, act: hints.Incomplete, Animation: hints.Incomplete = ...) -> hints.Hresult: ...
        def ResetTips(self) -> hints.Hresult: ...
        def _get_NewBalloon(self) -> 'Balloon': ...
        NewBalloon = hints.normal_property(_get_NewBalloon)
        def _get_BalloonError(self) -> hints.Incomplete: ...
        BalloonError = hints.normal_property(_get_BalloonError)
        def _get_Visible(self) -> hints.Incomplete: ...
        def _set_Visible(self, pvarfVisible: hints.Incomplete) -> hints.Hresult: ...
        Visible = hints.normal_property(_get_Visible, _set_Visible)
        def _get_Animation(self) -> hints.Incomplete: ...
        def _set_Animation(self, pfca: hints.Incomplete) -> hints.Hresult: ...
        Animation = hints.normal_property(_get_Animation, _set_Animation)
        def _get_Reduced(self) -> hints.Incomplete: ...
        def _set_Reduced(self, pvarfReduced: hints.Incomplete) -> hints.Hresult: ...
        Reduced = hints.normal_property(_get_Reduced, _set_Reduced)
        def _get_AssistWithHelp(self) -> hints.Incomplete: ...
        def _set_AssistWithHelp(self, pvarfAssistWithHelp: hints.Incomplete) -> hints.Hresult: ...
        AssistWithHelp = hints.normal_property(_get_AssistWithHelp, _set_AssistWithHelp)
        def _get_AssistWithWizards(self) -> hints.Incomplete: ...
        def _set_AssistWithWizards(self, pvarfAssistWithWizards: hints.Incomplete) -> hints.Hresult: ...
        AssistWithWizards = hints.normal_property(_get_AssistWithWizards, _set_AssistWithWizards)
        def _get_AssistWithAlerts(self) -> hints.Incomplete: ...
        def _set_AssistWithAlerts(self, pvarfAssistWithAlerts: hints.Incomplete) -> hints.Hresult: ...
        AssistWithAlerts = hints.normal_property(_get_AssistWithAlerts, _set_AssistWithAlerts)
        def _get_MoveWhenInTheWay(self) -> hints.Incomplete: ...
        def _set_MoveWhenInTheWay(self, pvarfMove: hints.Incomplete) -> hints.Hresult: ...
        MoveWhenInTheWay = hints.normal_property(_get_MoveWhenInTheWay, _set_MoveWhenInTheWay)
        def _get_Sounds(self) -> hints.Incomplete: ...
        def _set_Sounds(self, pvarfSounds: hints.Incomplete) -> hints.Hresult: ...
        Sounds = hints.normal_property(_get_Sounds, _set_Sounds)
        def _get_FeatureTips(self) -> hints.Incomplete: ...
        def _set_FeatureTips(self, pvarfFeatures: hints.Incomplete) -> hints.Hresult: ...
        FeatureTips = hints.normal_property(_get_FeatureTips, _set_FeatureTips)
        def _get_MouseTips(self) -> hints.Incomplete: ...
        def _set_MouseTips(self, pvarfMouse: hints.Incomplete) -> hints.Hresult: ...
        MouseTips = hints.normal_property(_get_MouseTips, _set_MouseTips)
        def _get_KeyboardShortcutTips(self) -> hints.Incomplete: ...
        def _set_KeyboardShortcutTips(self, pvarfKeyboardShortcuts: hints.Incomplete) -> hints.Hresult: ...
        KeyboardShortcutTips = hints.normal_property(_get_KeyboardShortcutTips, _set_KeyboardShortcutTips)
        def _get_HighPriorityTips(self) -> hints.Incomplete: ...
        def _set_HighPriorityTips(self, pvarfHighPriorityTips: hints.Incomplete) -> hints.Hresult: ...
        HighPriorityTips = hints.normal_property(_get_HighPriorityTips, _set_HighPriorityTips)
        def _get_TipOfDay(self) -> hints.Incomplete: ...
        def _set_TipOfDay(self, pvarfTipOfDay: hints.Incomplete) -> hints.Hresult: ...
        TipOfDay = hints.normal_property(_get_TipOfDay, _set_TipOfDay)
        def _get_GuessHelp(self) -> hints.Incomplete: ...
        def _set_GuessHelp(self, pvarfGuessHelp: hints.Incomplete) -> hints.Hresult: ...
        GuessHelp = hints.normal_property(_get_GuessHelp, _set_GuessHelp)
        def _get_SearchWhenProgramming(self) -> hints.Incomplete: ...
        def _set_SearchWhenProgramming(self, pvarfSearchInProgram: hints.Incomplete) -> hints.Hresult: ...
        SearchWhenProgramming = hints.normal_property(_get_SearchWhenProgramming, _set_SearchWhenProgramming)
        def _get_Item(self) -> hints.Incomplete: ...
        Item = hints.normal_property(_get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_FileName(self) -> hints.Incomplete: ...
        def _set_FileName(self, pbstr: hints.Incomplete) -> hints.Hresult: ...
        FileName = hints.normal_property(_get_FileName, _set_FileName)
        def _get_Name(self) -> hints.Incomplete: ...
        Name = hints.normal_property(_get_Name)
        def _get_On(self) -> hints.Incomplete: ...
        def _set_On(self, pvarfOn: hints.Incomplete) -> hints.Hresult: ...
        On = hints.normal_property(_get_On, _set_On)
        def DoAlert(self, bstrAlertTitle: hints.Incomplete, bstrAlertText: hints.Incomplete, alb: hints.Incomplete, alc: hints.Incomplete, ald: hints.Incomplete, alq: hints.Incomplete, varfSysAlert: hints.Incomplete) -> hints.Incomplete: ...


Assistant._methods_ = [
    COMMETHOD(
        [dispid(1610809344), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809345)],
        HRESULT,
        'Move',
        (['in'], c_int, 'xLeft'),
        (['in'], c_int, 'yTop')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propput'],
        HRESULT,
        'Top',
        (['in'], c_int, 'pyTop')
    ),
    COMMETHOD(
        [dispid(1610809346), 'propget'],
        HRESULT,
        'Top',
        (['out', 'retval'], POINTER(c_int), 'pyTop')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propput'],
        HRESULT,
        'Left',
        (['in'], c_int, 'pxLeft')
    ),
    COMMETHOD(
        [dispid(1610809348), 'propget'],
        HRESULT,
        'Left',
        (['out', 'retval'], POINTER(c_int), 'pxLeft')
    ),
    COMMETHOD([dispid(1610809350)], HRESULT, 'Help'),
    COMMETHOD(
        [dispid(1610809351)],
        HRESULT,
        'StartWizard',
        (['in'], VARIANT_BOOL, 'On'),
        (['in'], BSTR, 'Callback'),
        (['in'], c_int, 'PrivateX'),
        (['in', 'optional'], VARIANT, 'Animation'),
        (['in', 'optional'], VARIANT, 'CustomTeaser'),
        (['in', 'optional'], VARIANT, 'Top'),
        (['in', 'optional'], VARIANT, 'Left'),
        (['in', 'optional'], VARIANT, 'Bottom'),
        (['in', 'optional'], VARIANT, 'Right'),
        (['out', 'retval'], POINTER(c_int), 'plWizID')
    ),
    COMMETHOD(
        [dispid(1610809352)],
        HRESULT,
        'EndWizard',
        (['in'], c_int, 'WizardID'),
        (['in'], VARIANT_BOOL, 'varfSuccess'),
        (['in', 'optional'], VARIANT, 'Animation')
    ),
    COMMETHOD(
        [dispid(1610809353)],
        HRESULT,
        'ActivateWizard',
        (['in'], c_int, 'WizardID'),
        (['in'], MsoWizardActType, 'act'),
        (['in', 'optional'], VARIANT, 'Animation')
    ),
    COMMETHOD([dispid(1610809354)], HRESULT, 'ResetTips'),
    COMMETHOD(
        [dispid(1610809355), 'propget'],
        HRESULT,
        'NewBalloon',
        (['out', 'retval'], POINTER(POINTER(Balloon)), 'ppibal')
    ),
    COMMETHOD(
        [dispid(1610809356), 'propget'],
        HRESULT,
        'BalloonError',
        (['out', 'retval'], POINTER(MsoBalloonErrorType), 'pbne')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propget'],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfVisible')
    ),
    COMMETHOD(
        [dispid(1610809357), 'propput'],
        HRESULT,
        'Visible',
        (['in'], VARIANT_BOOL, 'pvarfVisible')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propget'],
        HRESULT,
        'Animation',
        (['out', 'retval'], POINTER(MsoAnimationType), 'pfca')
    ),
    COMMETHOD(
        [dispid(1610809359), 'propput'],
        HRESULT,
        'Animation',
        (['in'], MsoAnimationType, 'pfca')
    ),
    COMMETHOD(
        [dispid(1610809361), 'propget'],
        HRESULT,
        'Reduced',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfReduced')
    ),
    COMMETHOD(
        [dispid(1610809361), 'propput'],
        HRESULT,
        'Reduced',
        (['in'], VARIANT_BOOL, 'pvarfReduced')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propput'],
        HRESULT,
        'AssistWithHelp',
        (['in'], VARIANT_BOOL, 'pvarfAssistWithHelp')
    ),
    COMMETHOD(
        [dispid(1610809363), 'propget'],
        HRESULT,
        'AssistWithHelp',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfAssistWithHelp')
    ),
    COMMETHOD(
        [dispid(1610809365), 'propput'],
        HRESULT,
        'AssistWithWizards',
        (['in'], VARIANT_BOOL, 'pvarfAssistWithWizards')
    ),
    COMMETHOD(
        [dispid(1610809365), 'propget'],
        HRESULT,
        'AssistWithWizards',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfAssistWithWizards')
    ),
    COMMETHOD(
        [dispid(1610809367), 'propput'],
        HRESULT,
        'AssistWithAlerts',
        (['in'], VARIANT_BOOL, 'pvarfAssistWithAlerts')
    ),
    COMMETHOD(
        [dispid(1610809367), 'propget'],
        HRESULT,
        'AssistWithAlerts',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfAssistWithAlerts')
    ),
    COMMETHOD(
        [dispid(1610809369), 'propput'],
        HRESULT,
        'MoveWhenInTheWay',
        (['in'], VARIANT_BOOL, 'pvarfMove')
    ),
    COMMETHOD(
        [dispid(1610809369), 'propget'],
        HRESULT,
        'MoveWhenInTheWay',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfMove')
    ),
    COMMETHOD(
        [dispid(1610809371), 'propput'],
        HRESULT,
        'Sounds',
        (['in'], VARIANT_BOOL, 'pvarfSounds')
    ),
    COMMETHOD(
        [dispid(1610809371), 'propget'],
        HRESULT,
        'Sounds',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfSounds')
    ),
    COMMETHOD(
        [dispid(1610809373), 'propput'],
        HRESULT,
        'FeatureTips',
        (['in'], VARIANT_BOOL, 'pvarfFeatures')
    ),
    COMMETHOD(
        [dispid(1610809373), 'propget'],
        HRESULT,
        'FeatureTips',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfFeatures')
    ),
    COMMETHOD(
        [dispid(1610809375), 'propput'],
        HRESULT,
        'MouseTips',
        (['in'], VARIANT_BOOL, 'pvarfMouse')
    ),
    COMMETHOD(
        [dispid(1610809375), 'propget'],
        HRESULT,
        'MouseTips',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfMouse')
    ),
    COMMETHOD(
        [dispid(1610809377), 'propput'],
        HRESULT,
        'KeyboardShortcutTips',
        (['in'], VARIANT_BOOL, 'pvarfKeyboardShortcuts')
    ),
    COMMETHOD(
        [dispid(1610809377), 'propget'],
        HRESULT,
        'KeyboardShortcutTips',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfKeyboardShortcuts')
    ),
    COMMETHOD(
        [dispid(1610809379), 'propput'],
        HRESULT,
        'HighPriorityTips',
        (['in'], VARIANT_BOOL, 'pvarfHighPriorityTips')
    ),
    COMMETHOD(
        [dispid(1610809379), 'propget'],
        HRESULT,
        'HighPriorityTips',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfHighPriorityTips')
    ),
    COMMETHOD(
        [dispid(1610809381), 'propput'],
        HRESULT,
        'TipOfDay',
        (['in'], VARIANT_BOOL, 'pvarfTipOfDay')
    ),
    COMMETHOD(
        [dispid(1610809381), 'propget'],
        HRESULT,
        'TipOfDay',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfTipOfDay')
    ),
    COMMETHOD(
        [dispid(1610809383), 'propput'],
        HRESULT,
        'GuessHelp',
        (['in'], VARIANT_BOOL, 'pvarfGuessHelp')
    ),
    COMMETHOD(
        [dispid(1610809383), 'propget'],
        HRESULT,
        'GuessHelp',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfGuessHelp')
    ),
    COMMETHOD(
        [dispid(1610809385), 'propput'],
        HRESULT,
        'SearchWhenProgramming',
        (['in'], VARIANT_BOOL, 'pvarfSearchInProgram')
    ),
    COMMETHOD(
        [dispid(1610809385), 'propget'],
        HRESULT,
        'SearchWhenProgramming',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfSearchInProgram')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610809388), 'propget'],
        HRESULT,
        'FileName',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809388), 'propput'],
        HRESULT,
        'FileName',
        (['in'], BSTR, 'pbstr')
    ),
    COMMETHOD(
        [dispid(1610809390), 'propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstrName')
    ),
    COMMETHOD(
        [dispid(1610809391), 'propget'],
        HRESULT,
        'On',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfOn')
    ),
    COMMETHOD(
        [dispid(1610809391), 'propput'],
        HRESULT,
        'On',
        (['in'], VARIANT_BOOL, 'pvarfOn')
    ),
    COMMETHOD(
        [dispid(1610809393)],
        HRESULT,
        'DoAlert',
        (['in'], BSTR, 'bstrAlertTitle'),
        (['in'], BSTR, 'bstrAlertText'),
        (['in'], MsoAlertButtonType, 'alb'),
        (['in'], MsoAlertIconType, 'alc'),
        (['in'], MsoAlertDefaultType, 'ald'),
        (['in'], MsoAlertCancelType, 'alq'),
        (['in'], VARIANT_BOOL, 'varfSysAlert'),
        (['out', 'retval'], POINTER(c_int), 'pibtn')
    ),
]

################################################################
# code template for Assistant implementation
# class Assistant_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def Move(self, xLeft, yTop):
#         '-no docstring-'
#         #return 
#
#     def _get(self):
#         '-no docstring-'
#         #return pyTop
#     def _set(self, pyTop):
#         '-no docstring-'
#     Top = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pxLeft
#     def _set(self, pxLeft):
#         '-no docstring-'
#     Left = property(_get, _set, doc = _set.__doc__)
#
#     def Help(self):
#         '-no docstring-'
#         #return 
#
#     def StartWizard(self, On, Callback, PrivateX, Animation, CustomTeaser, Top, Left, Bottom, Right):
#         '-no docstring-'
#         #return plWizID
#
#     def EndWizard(self, WizardID, varfSuccess, Animation):
#         '-no docstring-'
#         #return 
#
#     def ActivateWizard(self, WizardID, act, Animation):
#         '-no docstring-'
#         #return 
#
#     def ResetTips(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def NewBalloon(self):
#         '-no docstring-'
#         #return ppibal
#
#     @property
#     def BalloonError(self):
#         '-no docstring-'
#         #return pbne
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfVisible
#     def _set(self, pvarfVisible):
#         '-no docstring-'
#     Visible = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pfca
#     def _set(self, pfca):
#         '-no docstring-'
#     Animation = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfReduced
#     def _set(self, pvarfReduced):
#         '-no docstring-'
#     Reduced = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfAssistWithHelp
#     def _set(self, pvarfAssistWithHelp):
#         '-no docstring-'
#     AssistWithHelp = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfAssistWithWizards
#     def _set(self, pvarfAssistWithWizards):
#         '-no docstring-'
#     AssistWithWizards = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfAssistWithAlerts
#     def _set(self, pvarfAssistWithAlerts):
#         '-no docstring-'
#     AssistWithAlerts = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfMove
#     def _set(self, pvarfMove):
#         '-no docstring-'
#     MoveWhenInTheWay = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfSounds
#     def _set(self, pvarfSounds):
#         '-no docstring-'
#     Sounds = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfFeatures
#     def _set(self, pvarfFeatures):
#         '-no docstring-'
#     FeatureTips = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfMouse
#     def _set(self, pvarfMouse):
#         '-no docstring-'
#     MouseTips = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfKeyboardShortcuts
#     def _set(self, pvarfKeyboardShortcuts):
#         '-no docstring-'
#     KeyboardShortcutTips = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfHighPriorityTips
#     def _set(self, pvarfHighPriorityTips):
#         '-no docstring-'
#     HighPriorityTips = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfTipOfDay
#     def _set(self, pvarfTipOfDay):
#         '-no docstring-'
#     TipOfDay = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfGuessHelp
#     def _set(self, pvarfGuessHelp):
#         '-no docstring-'
#     GuessHelp = property(_get, _set, doc = _set.__doc__)
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfSearchInProgram
#     def _set(self, pvarfSearchInProgram):
#         '-no docstring-'
#     SearchWhenProgramming = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Item(self):
#         '-no docstring-'
#         #return pbstrName
#
#     def _get(self):
#         '-no docstring-'
#         #return pbstr
#     def _set(self, pbstr):
#         '-no docstring-'
#     FileName = property(_get, _set, doc = _set.__doc__)
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstrName
#
#     def _get(self):
#         '-no docstring-'
#         #return pvarfOn
#     def _set(self, pvarfOn):
#         '-no docstring-'
#     On = property(_get, _set, doc = _set.__doc__)
#
#     def DoAlert(self, bstrAlertTitle, bstrAlertText, alb, alc, ald, alq, varfSysAlert):
#         '-no docstring-'
#         #return pibtn
#

IMsoCategory._methods_ = [
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'RHS')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'Name',
        (['out', 'retval'], POINTER(BSTR), 'pbstr')
    ),
    COMMETHOD(
        ['propget'],
        HRESULT,
        'IsFiltered',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pfIsFiltered')
    ),
    COMMETHOD(
        ['propput'],
        HRESULT,
        'IsFiltered',
        (['in'], VARIANT_BOOL, 'pfIsFiltered')
    ),
]

################################################################
# code template for IMsoCategory implementation
# class IMsoCategory_Impl(object):
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return RHS
#
#     @property
#     def Name(self):
#         '-no docstring-'
#         #return pbstr
#
#     def _get(self):
#         '-no docstring-'
#         #return pfIsFiltered
#     def _set(self, pfIsFiltered):
#         '-no docstring-'
#     IsFiltered = property(_get, _set, doc = _set.__doc__)
#

FoundFiles._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['in', 'lcid'], c_int, 'lcid', _lcid),
        (['out', 'retval'], POINTER(BSTR), 'pbstrFile')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pc')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for FoundFiles implementation
# class FoundFiles_Impl(object):
#     @property
#     def Item(self, Index, lcid):
#         '-no docstring-'
#         #return pbstrFile
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pc
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class WorkflowTasks(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000CD901-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get_Item(self, Index: hints.Incomplete) -> 'WorkflowTask': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)


WorkflowTasks._methods_ = [
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'Index'),
        (['out', 'retval'], POINTER(POINTER(WorkflowTask)), 'ppret')
    ),
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pCount')
    ),
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppunkEnum')
    ),
]

################################################################
# code template for WorkflowTasks implementation
# class WorkflowTasks_Impl(object):
#     @property
#     def Item(self, Index):
#         '-no docstring-'
#         #return ppret
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pCount
#
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppunkEnum
#


class SignatureSet(_IMsoDispObj):
    _case_insensitive_ = True
    _iid_ = GUID('{000C0410-0000-0000-C000-000000000046}')
    _idlflags_ = ['dual', 'nonextensible', 'oleautomation']

    if TYPE_CHECKING:  # commembers
        def _get__NewEnum(self) -> hints.Incomplete: ...
        _NewEnum = hints.normal_property(_get__NewEnum)
        __iter__ = hints.to_dunder_iter(_NewEnum)
        def _get_Count(self) -> hints.Incomplete: ...
        Count = hints.normal_property(_get_Count)
        __len__ = hints.to_dunder_len(Count)
        def _get_Item(self, iSig: hints.Incomplete) -> 'Signature': ...
        Item = hints.named_property('Item', _get_Item)
        __call__ = hints.to_dunder_call(Item)
        __getitem__ = hints.to_dunder_getitem(Item)
        __setitem__ = hints.to_dunder_setitem(Item)
        def Add(self) -> 'Signature': ...
        def Commit(self) -> hints.Hresult: ...
        def _get_Parent(self) -> hints.Incomplete: ...
        Parent = hints.normal_property(_get_Parent)
        def AddNonVisibleSignature(self, varSigProv: hints.Incomplete = ...) -> 'Signature': ...
        def _get_CanAddSignatureLine(self) -> hints.Incomplete: ...
        CanAddSignatureLine = hints.normal_property(_get_CanAddSignatureLine)
        def AddSignatureLine(self, varSigProv: hints.Incomplete = ...) -> 'Signature': ...
        def _get_Subset(self) -> hints.Incomplete: ...
        def _set_Subset(self, psubset: hints.Incomplete) -> hints.Hresult: ...
        Subset = hints.normal_property(_get_Subset, _set_Subset)
        def _set_ShowSignaturesPane(self, rhs: hints.Incomplete) -> hints.Hresult: ...
        ShowSignaturesPane = hints.normal_property(fset=_set_ShowSignaturesPane)


SignatureSet._methods_ = [
    COMMETHOD(
        [dispid(-4), 'nonbrowsable', 'propget'],
        HRESULT,
        '_NewEnum',
        (['out', 'retval'], POINTER(POINTER(IUnknown)), 'ppienum')
    ),
    COMMETHOD(
        [dispid(1610809345), 'propget'],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pcSig')
    ),
    COMMETHOD(
        [dispid(0), 'propget'],
        HRESULT,
        'Item',
        (['in'], c_int, 'iSig'),
        (['out', 'retval'], POINTER(POINTER(Signature)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809347), 'hidden'],
        HRESULT,
        'Add',
        (['out', 'retval'], POINTER(POINTER(Signature)), 'ppidisp')
    ),
    COMMETHOD([dispid(1610809348), 'hidden'], HRESULT, 'Commit'),
    COMMETHOD(
        [dispid(1610809349), 'propget'],
        HRESULT,
        'Parent',
        (['out', 'retval'], POINTER(POINTER(IDispatch)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809350)],
        HRESULT,
        'AddNonVisibleSignature',
        (['in', 'optional'], VARIANT, 'varSigProv'),
        (['out', 'retval'], POINTER(POINTER(Signature)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809351), 'propget'],
        HRESULT,
        'CanAddSignatureLine',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pvarfCanAddSigLine')
    ),
    COMMETHOD(
        [dispid(1610809352)],
        HRESULT,
        'AddSignatureLine',
        (['in', 'optional'], VARIANT, 'varSigProv'),
        (['out', 'retval'], POINTER(POINTER(Signature)), 'ppidisp')
    ),
    COMMETHOD(
        [dispid(1610809353), 'propget'],
        HRESULT,
        'Subset',
        (['out', 'retval'], POINTER(MsoSignatureSubset), 'psubset')
    ),
    COMMETHOD(
        [dispid(1610809353), 'propput'],
        HRESULT,
        'Subset',
        (['in'], MsoSignatureSubset, 'psubset')
    ),
    COMMETHOD(
        [dispid(1610809355), 'propput'],
        HRESULT,
        'ShowSignaturesPane',
        (['in'], VARIANT_BOOL, 'rhs')
    ),
]

################################################################
# code template for SignatureSet implementation
# class SignatureSet_Impl(object):
#     @property
#     def _NewEnum(self):
#         '-no docstring-'
#         #return ppienum
#
#     @property
#     def Count(self):
#         '-no docstring-'
#         #return pcSig
#
#     @property
#     def Item(self, iSig):
#         '-no docstring-'
#         #return ppidisp
#
#     def Add(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def Commit(self):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Parent(self):
#         '-no docstring-'
#         #return ppidisp
#
#     def AddNonVisibleSignature(self, varSigProv):
#         '-no docstring-'
#         #return ppidisp
#
#     @property
#     def CanAddSignatureLine(self):
#         '-no docstring-'
#         #return pvarfCanAddSigLine
#
#     def AddSignatureLine(self, varSigProv):
#         '-no docstring-'
#         #return ppidisp
#
#     def _get(self):
#         '-no docstring-'
#         #return psubset
#     def _set(self, psubset):
#         '-no docstring-'
#     Subset = property(_get, _set, doc = _set.__doc__)
#
#     def _set(self, rhs):
#         '-no docstring-'
#     ShowSignaturesPane = property(fset = _set, doc = _set.__doc__)
#

__all__ = [
    'xlLineMarkersStacked', 'sigdetColorDepth', 'msoTextEffect40',
    'Library', 'msoBulletKanjiKoreanPeriod', 'msoTextureCork',
    'msoUnderlineDoubleLine', 'msoCameraOrthographicFront',
    'XlPivotFieldOrientation', 'msoLanguageIDSerbianLatin',
    'xlCircle', 'msoTextEffectMixed', 'msoShapeFlowchartPunchedTape',
    'xlXYScatterSmooth', 'msoPlaceholder', 'UserPermission',
    'msoShapeFoldedCorner', 'msoBalloonButtonAbort',
    'msoShapeStylePreset75', 'xlDataField', 'IConverterPreferences',
    'xlHAlignRight', 'msoEncodingEuropa3', 'msoButtonIconAndCaption',
    '_CustomTaskPaneEvents', 'msoEffectLineDrawing',
    'msoFileTypeProjectFiles', 'msoAlertCancelFifth',
    'msoFileValidationDefault', 'msoLanguageIDEnglishJamaica',
    'msoContactCardHover', 'msoEffectNone', 'msoPattern90Percent',
    'msoShapeDecagon', 'msoLanguageIDUzbekLatin', 'SignatureProvider',
    'msoLanguageIDSinhalese', 'msoShapeStylePreset26',
    'msoLineFillBackground', 'msoPatternSphere',
    'msoLanguageIDSpanishVenezuela',
    'msoShapeLineCallout2BorderandAccentBar', 'msoLightingBright',
    'msoFillSolid', 'msoLanguageIDSpanishEcuador', 'XlColorIndex',
    'msoFillMixed', 'msoShapeMathPlus', 'xlPyramidColStacked100',
    'xlDataLabelsShowPercent', 'msoGraphicStylePreset13',
    'xlCategoryLabelLevelCustom', 'msoElementChartTitleNone',
    'msoComboLabel', 'TabStops2', 'xlPieOfPie',
    'msoLanguageIDCroatian', 'msoSortByLastModified',
    'msoShapePieWedge', 'msoCameraIsometricOffAxis3Bottom',
    'xlLineStacked', 'msoContactCardTypePersonalDistributionList',
    'msoConditionIsYes', 'msoElementDataLabelTop',
    'ICommandBarComboBoxEvents', 'MsoDebugOptions_UTRunResult',
    'msoTextureLeft', 'BroadcastStarted', 'msoCalloutAngleAutomatic',
    'msoPatternDownwardDiagonal', 'msoReflectionTypeNone',
    'xlVAlignBottom', 'msoEncodingISO2022JPNoHalfwidthKatakana',
    'xl3DColumn', 'IMsoWalls', 'msoControlOLEUsageServer',
    'msoEncodingIA5Norwegian', 'xlThousandMillions',
    'msoExtrusionColorAutomatic', 'msoEncodingBaltic',
    'MsoGradientColorType', 'msoShapeFlowchartDelay',
    'msoConditionFreeText', 'xlComboColumnClusteredLine',
    'msoEncodingISO2022JPJISX02011989', 'msoLanguageIDArabicKuwait',
    'msoShapeDodecagon', 'msoViewSummaryInfo', 'msoThemeAccent5',
    'msoLanguageIDDutch', 'msoEncodingOEMUnitedStates',
    'msoPatternDarkDownwardDiagonal', 'msoTextEffect', 'PolicyItem',
    'msoThreeD15', 'msoLanguageIDMacedonianFYROM', 'xlCenter',
    'msoThemeLatin', 'BalloonLabels', 'msoTextEffectShapeDoubleWave2',
    'msoMaterialPowder', 'msoFileTypeCalendarItem',
    'SignatureProviderDetail', 'msoBlogOneCategory',
    'msoFileDialogViewDetails', 'msoGradientBrass', 'SmartArtColor',
    'msoWizardActInactive', 'msoConditionIncludesFormsOf',
    'msoEncodingJapaneseShiftJIS', 'GroupShapes', 'MsoAlignCmd',
    'msoTextureCanvas', 'msoLineStylePreset3',
    'msoButtonSetBackNextSnooze', 'msoLanguageIDSpanishUruguay',
    'msoBulletAlphaLCPeriod', 'msoThemeColorText1', 'msoTabStopMixed',
    'MsoHTMLProjectState', 'msoFilterComparisonLessThanEqual',
    'msoCameraLegacyObliqueRight',
    'msoCameraLegacyPerspectiveTopLeft', 'msoAlertCancelDefault',
    'xlSurfaceTopViewWireframe', 'msoTextEffectShapeMixed',
    'msoLanguageIDYiddish', 'msoCameraLegacyPerspectiveTopRight',
    'msoShapeFlowchartCollate', 'msoAutomationSecurityForceDisable',
    'MsoTargetBrowser', 'msoShapeQuadArrow', 'xlValueNone',
    'msoEncodingKorean', 'msoControlEdit', 'msoExtrusionColorCustom',
    'msoLightRigMorning', 'msoTextEffectShapeCascadeDown',
    'certverresValid', 'msoAlertButtonAbortRetryIgnore',
    'msoShapeIsoscelesTriangle', 'msoEncodingISO88591Latin1',
    'msoNoUnderline', 'msoEffectMosiaicBubbles',
    'OfficeDataSourceObject', 'xlPieExploded',
    'msoElementSecondaryCategoryAxisTitleHorizontal', 'msoBevelCross',
    'msoAnimationThinking', 'ReflectionFormat',
    'msoBulletThaiAlphaPeriod', 'msoTextEffectShapeArchDownCurve',
    'msoDateTimehmmAMPM', 'msoColorTypeMixed', 'xlTreemap',
    'ODSOColumns', 'xlBarStacked', 'xlFloor',
    'msoSyncErrorVirusUpload', 'msoShapeMathNotEqual',
    'msoShapeCurvedDownArrow', 'msoTextEffect2',
    'msoLanguageIDMalaysian', 'msoLanguageIDRomanian',
    'msoElementDataTableNone', 'IMsoDownBars',
    'msoElementPlotAreaShow', 'msoSegmentLine',
    'msoShapeCurvedLeftArrow', 'msoShapeStylePreset4',
    'msoDateTimeMMMMyy', 'msoEffectPencilSketch', 'CanvasShapes',
    'msoLanguageIDFrenchLuxembourg', 'msoLanguageIDMixed',
    'msoGradientTwoColors', 'msoElementSecondaryValueGridLinesNone',
    'msoElementPrimaryValueAxisShow', 'msoLineStylePreset10',
    'msoEffectPaintStrokes', 'msoShapeStylePreset25',
    'msoBlackWhiteWhite', '_CustomTaskPane', 'msoScreenSize800x600',
    'msoTextEffect8', 'msoEncodingThai', 'msoShapeMoon',
    'msoTextEffectShapeButtonPour', 'msoStrictCharWrap',
    'xlChartTitle', 'msoExtrusionLeft', 'msoLanguageIDBurmese',
    'msoLightRigBrightRoom', 'CustomXMLNodes', 'IMsoFloor',
    'msoShapeStylePreset55', 'msoWizardMsgSuspending',
    'msoLanguageIDArabicJordan', 'xlPlotArea', 'msoWarpFormat35',
    'MsoConnector', 'msoLinked3DModel', 'msoFilterConjunctionOr',
    'msoBulletNone', 'msoShadow27',
    'msoSignatureSubsetSignatureLinesSigned', 'MsoShadowStyle',
    'msoLanguageIDDivehi', 'msoConditionFileTypeOfficeFiles',
    'msoPatternDashedDownwardDiagonal', '_CommandBarComboBoxEvents',
    'msoAlertCancelSecond', 'msoEncodingArabic', 'xlSplitByPosition',
    'msoElementSeriesAxisGridLinesMinor', 'msoSyncAvailableAnywhere',
    'IFind', 'msoViewFileInfo', 'msoCameraLegacyPerspectiveFront',
    'msoShapeRoundedRectangle', 'xlSeriesNameLevelCustom',
    'xlHistogram', 'xlValueDescending', 'msoCharacterSetThai',
    'sigdetDelSuggSignerEmailSet', 'msoShapeStylePreset37',
    'msoControlPopup', 'msoThreeD7', 'MsoPresetCamera',
    'msoSendToBack', 'msoPropertyTypeFloat', 'msoLineStylePreset29',
    'msoAlertCancelFirst', 'msoTextureOak', 'xlBubbleEx',
    'msoLanguageIDFrenchMorocco', 'msoBarNoChangeDock',
    'msoBalloonButtonNext', 'msoElementSeriesAxisNone',
    'MsoExtrusionColorType', 'msoLanguageIDArabicAlgeria',
    'msoTextEffectShapeDeflateBottom', 'msoLightRigLegacyFlat1',
    'msoLightRigBalanced', 'IMsoDispCagNotifySink',
    'msoConditionFileTypePhotoDrawFiles',
    'MsoCommandBarButtonHyperlinkType', 'msoGradientPeacock',
    'DocumentProperties', 'IMsoLegendKey', 'AnswerWizardFiles',
    'msoShapeStylePreset66', 'msoBulletUnnumbered',
    'SensitivityLabelPolicy', 'msoShapeHexagon',
    'xlTickLabelOrientationVertical', 'msoShapeStylePreset18',
    'msoLanguageIDSpanishColombia', 'msoShapeActionButtonBeginning',
    'MsoAnimationType', 'msoEncodingISO88599Turkish',
    'msoElementSecondaryValueAxisShow',
    'msoElementPrimaryValueAxisTitleVertical',
    'msoCameraLegacyObliqueTopRight', 'MsoLineStyle',
    'msoMetaPropertyTypeText', 'msoCameraObliqueTopRight',
    'msoLanguageIDSwahili', 'msoPictureTypeBMP',
    'msoLanguageIDGeorgian', 'msoLanguageIDSpanishDominicanRepublic',
    'msoOrgChartLayoutLeftHanging', 'xlMillions', 'xlBottom',
    'msoSyncVersionLastViewed', 'xlTransparent',
    'msoBalloonButtonOptions', 'msoPermissionChange',
    'offPropertyTypeFloat', 'CustomXMLValidationErrors',
    'msoAnimationLookRight', 'msoCameraLegacyObliqueLeft',
    'MsoLineCapStyle',
    'msoElementSecondaryValueAxisTitleAdjacentToAxis',
    'msoShapeStylePreset33', 'msoPermissionEdit',
    'msoBaselineAlignBaseline', 'msoCaseSentence',
    'msoCameraLegacyPerspectiveBottomLeft', 'msoLanguageIDKonkani',
    'msoLineStylePreset17', 'COMAddIn', 'msoFilterComparisonLessThan',
    'msoShapeStylePreset71', 'XlCategoryType',
    'msoElementChartTitleCenteredOverlay',
    'msoConditionNotEqualToWaitingForSomeoneElse',
    'siglnimgSoftwareRequired', 'msoFileDialogViewPreview',
    'msoLineCapRound', 'msoEncodingMacKorean',
    'msoElementSeriesAxisTitleNone', 'msoLightingBottomLeft',
    'msoLineDashStyleMixed', 'msoTextureWalnut',
    'msoDisconnectedState', 'MsoLineFillType', 'SharedWorkspaceLinks',
    'msoScreenSize1600x1200', 'xlAreaStacked',
    'msoShadowStyleInnerShadow', 'msoEncodingOEMArabic',
    'msoEncodingOEMBaltic', 'TextFrame', 'xlSeries',
    'xlConeColStacked100', 'msoSyncErrorFileNotFound',
    'xlConeBarClustered', 'msoMergeCombine',
    'msoCameraIsometricLeftUp', 'msoLanguageIDArabicMorocco',
    'msoBulletArabicDBPeriod', 'msoLanguageIDIbibio',
    'msoShapeDoubleBracket', 'msoSyncErrorCouldNotResolve',
    'xlLegendPositionLeft', 'msoAlignThaiDistribute',
    'msoLanguageIDGaelicIreland', 'msoNew', 'Permission',
    'msoMetaPropertyTypeNumber', 'msoMergeIntersect',
    'msoArrowheadWidthMixed', 'msoLanguageIDCherokee', 'xlColumn',
    'msoBarNoResize', 'xlFill', 'msoTextEffect36', 'msoTextEffect4',
    'xlCorners', 'IMsoBorder', 'msoWarpFormat31',
    'msoShapeLeftRightRibbon', 'msoTextEffectShapeInflate',
    'msoLanguageIDUzbekCyrillic', 'msoArrowheadWidthMedium',
    'EncryptionCipherMode', 'encprovdetCipherMode',
    'xlMarkerStyleDiamond', 'msoMetaPropertyTypeMultiChoiceLookup',
    'msoLanguageIDByelorussian', 'msoTextEffect26', 'XlTickMark',
    'xlDataLabelsShowNone', 'xlBarClusteredEx',
    'msoTextEffectShapeFadeLeft', 'xlThousands',
    'msoCameraLegacyObliqueBottomRight', 'msoConnectorCurve',
    'sigdetShouldShowViewWarning', 'msoOrgChartLayoutDefault',
    'xlCombo', 'ThemeFont', 'SmartArtLayout', 'msoSyncStatusError',
    'msoLightRigLegacyHarsh4', 'xlOpaque', 'MsoBlogCategorySupport',
    'msoContactCardAddressTypeUnknown', 'xlBarClustered',
    'sigdetLocalSigningTime', 'msoLanguageIDTajik', 'msoBarBottom',
    'xlBubble', 'msoBulletHindiNumParenRight', 'xlVAlignJustify',
    '_CommandBarButtonEvents', 'xlPolynomial', 'msoBalloonButtonNo',
    'msoTextEffect17', 'msoEncodingMacCroatia', 'xlAxisTitle',
    'msoElementPrimaryCategoryGridLinesMinorMajor',
    'msoEncodingISO88598HebrewLogical', 'msoShapeChevron',
    'msoSyncConflictClientWins', 'msoThemeLight2', 'msoTextEffect38',
    'xlTenThousands', 'msoTargetBrowserIE5', 'msoAfterNode',
    'msoPatternDashedHorizontal', 'GlowFormat',
    'msoLanguageIDManipuri', 'msoScaleFromTopLeft',
    'msoShapeParallelogram', 'msoGraphicStylePreset11',
    'msoTextureBrownMarble', 'msoAnimationLookUp', 'MsoAutoSize',
    'msoControlExpandingGrid', 'msoAnimationLookUpRight',
    'msoShapeStylePreset50', 'msoShapeSnip1Rectangle',
    'msoLanguageIDArabicBahrain', 'offPropertyTypeDate',
    'xlConeColStacked', 'msoConditionIsExactly', 'SoftEdgeFormat',
    'mfHTML', 'msoLanguageIDChineseSingapore', 'msoMaterialClear',
    'msoCameraLegacyObliqueFront', 'MsoTabStopType',
    'msoLightingBottomRight', 'msoPatternDarkUpwardDiagonal',
    'msoLanguageIDSesotho', 'msoThreeD4', 'xlGray25',
    'msoSmartArtNodeAbove', 'msoShapeStylePreset16',
    'msoShapeRectangle', 'msoBevelCoolSlant', 'MsoTriState',
    'msoLineSysDash', 'msoLanguageIDGalician', 'msoWarpFormat33',
    'MsoSmartArtNodeType', 'msoPatternDiagonalBrick',
    'msoLineCapSquare', 'msoIntegerMixed', 'xlLegendPositionCorner',
    'msoArrowheadTriangle', 'msoTextEffectShapeDeflateTop',
    'msoFeatureInstallNone', 'MsoBarType', 'msoAlertCancelFourth',
    'msoGradientMultiColor', 'msoBarTypePopup',
    'msoLineStylePreset27', 'msoEffectLightScreen',
    'msoMetaPropertyTypeBusinessData', 'msoSyncErrorCouldNotUpdate',
    'ODSOColumn', 'msoEncodingTurkish', 'msoAlignCenter',
    'xlCrissCross', 'msoThemeAccent1', 'msoBevelArtDeco',
    'XlPieSliceIndex', 'msoDocInspectorStatusDocOk',
    'msoElementLineSeriesLine', 'msoLanguageIDAfrikaans',
    'msoPictureTypeGIF', 'msoListbyName', 'msoBulletHindiAlphaPeriod',
    'MsoSortOrder', 'TextEffectFormat', 'msoWarpFormat4',
    'msoLanguageIDIndonesian', 'xlLightVertical',
    'BroadcastCapSupportsUpdateDoc', 'LabelInfo',
    'msoEncodingEBCDICKoreanExtended', 'xlAreaStacked100',
    'msoShapeLeftCircularArrow', 'WebPageFonts', 'msoTextEffect45',
    'msoSyncErrorNoNetwork', 'msoPatternHorizontalBrick',
    'CommandBarControl', 'msoElementPrimaryValueGridLinesNone',
    'msoPatternSmallCheckerBoard', 'msoEncodingEBCDICHebrew',
    'msoThreeD8', 'msoShapeStylePreset11', 'CustomXMLPrefixMappings',
    'MsoThemeColorSchemeIndex', 'xlPivotChartExpandEntireFieldButton',
    'MsoPresetExtrusionDirection',
    'msoTextEffectAlignmentStretchJustify', 'msoGradientChrome',
    'IMsoLegend', 'msoAnimationGestureRight', 'XlValueSortOrder',
    'msoEditingSmooth', 'msoUnderlineDotDotDashHeavyLine',
    'msoAlertCancelThird', 'msoModeAutoDown',
    'msoTextureBlueTissuePaper', 'msoLineFillSolid',
    'msoConditionFileTypeTaskItem', 'msoTextureFishFossil',
    'msoBackgroundStylePreset10', 'WorkflowTemplate',
    'xl3DColumnClustered', 'msoGraphicStylePreset12',
    'xlTickMarkOutside', 'IMsoChartTitle', 'msoConditionInTheLast',
    'msoShapeBlockArc', 'msoLanguageIDSwissGerman', 'xlLegendEntry',
    'xlSplitByCustomSplit', 'msoLanguageIDTswana', 'msoTextEffect10',
    'msoLightRigSoft', 'msoElementPrimaryCategoryAxisShow',
    'msoShadow9', 'MsoSortBy', 'msoAlertIconInfo',
    'msoGraphicStylePreset23', 'msoFileTypePublisherFiles',
    'msoElementChartTitleAboveChart', 'msoLanguageIDFulfulde',
    'msoShadow8', 'msoBalloonButtonSnooze', 'msoWarpFormat28',
    'msoFormControl', 'msoElementSecondaryCategoryAxisReverse',
    'msoBulletKanjiSimpChinDBPeriod', 'msoShadow12',
    'msoArrowheadOpen', '_CustomXMLPartsEvents',
    'xlInnerCounterClockwisePoint',
    'msoLanguageIDSerbianBosniaHerzegovinaCyrillic', 'FileTypes',
    'msoAnchorBottom', 'msoCameraLegacyPerspectiveTop',
    'xlDistributed', 'MsoArrowheadStyle', 'xlBinsTypeBinCount',
    'msoSegmentCurve', 'msoAutomationSecurityByUI',
    'msoEncodingMacIcelandic', 'msoTextEffect29',
    'msoUnderlineDashLine', 'msoEncodingISCIIPunjabi',
    'msoLineFillNone', 'xlLegendPositionCustom',
    'msoArrowheadLengthMixed', 'msoSyncStatusSuspended',
    'msoElementPrimaryCategoryAxisTitleHorizontal',
    'msoAlertButtonOKCancel', 'xlMinusValues',
    'msoLanguageIDArmenian', 'xlSizeIsWidth', 'msoShapeCloud',
    'msoShapeActionButtonHome', 'MsoAssignmentMethod',
    'msoLineStylePreset38', 'msoFileTypeTaskItem',
    'msoMetaPropertyTypeCalculated', 'XlAxisType',
    'msoTextureGranite', 'msoShapeLeftArrowCallout',
    'msoShapeRoundedRectangularCallout', 'msoFileTypeExcelWorkbooks',
    'MsoShadowType', 'msoContactCardFull', 'msoPresetGradientMixed',
    'msoBackgroundStylePreset4', 'msoLanguageIDRussian', 'msoPicture',
    'xlErrorBarTypeStDev', 'msoLineJoinMiter', 'msoTexturePaperBag',
    'msoListbyTitle', 'msoPatternSolidDiamond', 'xlLineStacked100',
    'msoCTPDockPositionTop', 'MsoLightRigType',
    'msoMetaPropertyTypeBusinessDataSecondary', 'msoShapeDownArrow',
    'PickerProperties', 'msoCameraObliqueRight', 'ODSOFilter',
    'MsoBevelType', 'msoConditionFileTypeWordDocuments',
    'msoThreeD20', 'msoEncodingEBCDICDenmarkNorway',
    'XlSeriesNameLevel', 'msoFillBackground', 'PRIVILEGED',
    'msoAlertDefaultFifth', 'msoAnchorTopBaseline',
    'msoSharedWorkspaceTaskStatusInProgress',
    'msoBackgroundStylePreset6', 'Balloon', 'msoSmallCaps',
    'msoAlertButtonYesNo', 'Crop', 'xlMarkerStyleAutomatic',
    'IMsoUpBars', 'msoThemeColorAccent3', 'msoTextEffect12',
    'MsoPresetThreeDFormat', 'msoAlertDefaultFirst', 'msoShapeCan',
    'msoPictureCompressFalse', 'msoExtrusionTopLeft',
    'MsoSyncEventType', 'msoCustomXMLNodeAttribute',
    'xlMarkerStylePlus', 'msoTextEffectShapeStop',
    'msoEncodingMacUkraine', 'msoLightingLeft',
    'msoElementTrendlineAddLinear', 'msoShapeStylePreset36',
    'msoAnimationRestPose', 'msoLineThickThin', 'msoLineFillMixed',
    'msoAutoShape', 'msoControlOCXDropdown', 'msoShapeDiagonalStripe',
    'xlLabelPositionInsideBase', 'xlUnderlineStyleSingleAccounting',
    'msoClipboardFormatMixed', 'msoCameraLegacyPerspectiveBottom',
    'MsoCalloutType', 'msoThemeColorDark2', 'msoShapeStylePreset49',
    'MsoSyncConflictResolutionType', 'IBlogExtensibility',
    'msoShapeNonIsoscelesTrapezoid', 'msoConditionOnOrBefore',
    'msoShapeFrame', 'msoDateTimeMdyy', 'xlRadarAxisLabels',
    'xlMaximum', 'msoSyncStatusNoSharedWorkspace', 'msoButtonDown',
    'msoBlogMultipleCategories', 'xlMarkerStyleDot',
    'msoScreenSize1920x1200', 'xlLineEx', 'msoPictureAutomatic',
    'msoFileTypePowerPointPresentations', 'msoLanguageIDXhosa',
    'msoLanguageIDKashmiri', 'msoScreenSize1280x1024',
    'msoLanguageIDMalayalam', 'msoArrowheadWide', 'xlNextToAxis',
    'MsoHyperlinkType', 'msoShadow24', 'SharedWorkspaceFile',
    'MsoBarProtection', 'msoGraphicStylePreset25',
    'msoEncodingEBCDICTurkishLatin5', 'msoPatternDottedGrid',
    'msoAnchorCenter', 'xlInterpolated',
    'msoConditionFileTypeWebPages', 'msoLanguageIDNoProofing',
    'msoConditionYesterday', 'PropertyTests',
    'msoControlAutoCompleteCombo', 'msoControlPane',
    'msoEncodingEBCDICItaly', 'msoComment',
    'msoElementTrendlineAddExponential', 'msoConditionIncludesPhrase',
    'IMsoEServicesDialog', 'MsoDebugOptions_UTs', 'certdetIssuer',
    'msoGraphicStylePreset19', 'PickerFields',
    'msoBulletCircleNumDBPlain', 'xlInnerCenterPoint',
    'xlHundredThousands', 'XlTickLabelOrientation', 'msoShadow13',
    'msoEncodingEBCDICInternational',
    'msoLanguageIDMalayBruneiDarussalam', 'msoPatternUpwardDiagonal',
    'msoElementSecondaryValueAxisBillions', 'xlPercent',
    'msoBeforeNode', 'msoMenuAnimationSlide',
    'msoLanguageIDSwissFrench', 'msoLanguageIDFrenchCanadian',
    'msoCameraIsometricOffAxis4Right', 'MsoAlertButtonType',
    'msoPatternVertical', 'xlBox', 'msoControlOLEUsageBoth',
    'LanguageSettings', 'msoWarpFormat3', 'msoShapeUpDownArrow',
    'msoBarRowFirst', 'msoLineStylePreset37', 'MsoPictureCompress',
    'msoLineStylePreset32', 'msoFontAlignMixed',
    'msoGradientFromTitle', 'msoOrientationMixed',
    'msoLineStylePreset16', 'msoShapeCircularArrow',
    'msoPatternWideUpwardDiagonal', 'msoLanguageIDLithuanian',
    'msoPatternDarkVertical', 'msoLanguageIDHausa',
    'msoShapeBentUpArrow', 'FileSearch', 'msoEncodingIA5IRV',
    'SignatureInfo', 'msoConditionToday',
    'msoElementSecondaryCategoryGridLinesMinor',
    'msoBackgroundStylePreset12', 'msoTextEffect24',
    'certverresUntrusted', 'msoTextOrientationMixed',
    'msoEncodingOEMIcelandic',
    'msoElementPrimaryCategoryAxisBillions', 'msoReflectionType6',
    'MsoArrowheadWidth', 'msoTable', 'msoLightRigLegacyNormal2',
    'msoButtonSetSearchClose', 'msoTextEffectShapeFadeDown',
    'msoLightRigLegacyNormal1', 'xlStack', 'DataPrivacyOptions',
    'msoMetaPropertyTypeNote', 'msoArrowheadNone',
    'msoShapeStylePreset40', 'WorkflowTask',
    'msoEncodingOEMCanadianFrench', 'msoScriptLanguageOther',
    'sigtypeMax', 'msoPresetTextureMixed', 'msoChartFieldBubbleSize',
    'xlAreaStacked100Ex', 'msoTextureTop', 'MsoTextCharWrap',
    'xlPyramidBarClustered', 'msoLinkedGraphic', 'xlBoxwhisker',
    'msoShapeFlowchartDirectAccessStorage', 'ThemeFontScheme',
    'xlColorIndexNone', 'msoLightingNone', 'msoLanguageIDPolish',
    'msoChartFieldSeriesName', 'msoCharacterSetHebrew',
    'msoShapeActionButtonForwardorNext', 'msoBaselineAlignMixed',
    'msoWarpFormat30', 'MsoSmartArtNodePosition', 'msoLanguageIDThai',
    'msoBalloonErrorButtonlessModal', 'msoBulletArabicPeriod',
    'msoPropertyTypeString', 'msoShapeSun', 'msoPatternSmallConfetti',
    'ShadowFormat', 'MsoAutomationSecurity', 'msoGradientFog',
    'msoMetaPropertyTypeCurrency',
    'msoLanguageIDEnglishTrinidadTobago', 'xlLineMarkers',
    'msoShapeFlowchartPreparation', 'msoBalloonButtonClose',
    'msoShapeStylePreset2', 'msoFileTypeVisioFiles',
    'msoCameraPerspectiveRelaxedModerately',
    'msoBulletSimpChinPeriod', 'xlVAlignTop', 'XlChartPictureType',
    'msoSyncStatusLocalChanges', 'sigdetApplicationVersion',
    'sigdetDelSuggSignerLine2Set', 'certdetSubject',
    'BroadcastCapFileSizeLimited', 'DocumentLibraryVersions',
    'msoEncodingIA5Swedish', 'xlBarOfPie', 'msoPattern60Percent',
    'MsoFeatureInstall', 'msoConditionEqualsInProgress',
    'msoCommandBarButtonHyperlinkOpen', 'msoLineStylePreset13',
    'BroadcastPaused', 'msoLanguageIDExeMode',
    'msoLanguageIDSerbianBosniaHerzegovinaLatin',
    'msoLightRigLegacyFlat3', 'MsoSyncCompareType',
    '_CommandBarComboBox', 'msoStandardCharWrap',
    'msoConditionAnytimeBetween', 'msoBalloonButtonSearch',
    'xlPyramidBarStacked', 'msoBalloonErrorBadPictureRef',
    '_CustomXMLPartEvents', 'msoBevelSlope',
    'xlGradientStopPositionTypeExtremeValue', 'msoShadow39',
    'msoWarpFormat11', 'msoLanguageIDAzeriLatin', 'xlMinimum',
    'msoShapeStyleNotAPreset', 'msoGraphicStylePreset16',
    'msoLanguageIDEnglishSouthAfrica', 'msoDateTimeHmm',
    'msoShapeStylePreset62', 'msoLanguageIDChineseMacao',
    'PickerResult', 'msoLanguageIDArabicSyria', 'msoShadowMixed',
    'msoControlSplitExpandingGrid',
    'msoShapeLineCallout1BorderandAccentBar', 'msoLanguageIDLatvian',
    'IConverter', 'MsoShapeStyleIndex', 'msoMetaPropertyTypeUser',
    'msoLineStylePreset34', 'xlGray8', 'DiagramNodeChildren',
    'msoTextEffect35', 'MsoThemeColorIndex', 'msoLanguageIDBasque',
    'msoLineStylePreset35', 'msoLanguageIDEnglishUS',
    'msoMaterialWarmMatte', 'xlSeriesAxis',
    'msoConditionFileTypeCalendarItem', 'msoThemeColorText2',
    'msoFilterComparisonIsNotBlank', 'msoPickerFieldMax', 'xlPlus',
    'msoTabAlignDecimal', 'msoLineSysDashDot', 'msoPickerFieldText',
    'MsoButtonStyle', 'msoOrgChartOrientationMixed',
    'MsoBalloonErrorType', 'BackstageGroupStyleError',
    'msoBulletArabicParenBoth', 'xlGeoMappingLevelCountryRegion',
    'msoBulletAlphaLCParenBoth', 'msoBringToFront',
    'msoBulletCircleNumWDWhitePlain', 'xlErrorBarTypeStError',
    'msoEncodingEBCDICFrance', 'msoMaterialSoftMetal',
    'xlErrorBarTypeCustom', 'msoShape6pointStar', 'msoBevelRiblet',
    'xlLTR', 'msoShapeFlowchartAlternateProcess', 'xlCombination',
    'msoLanguageIDFrisianNetherlands', 'msoCameraIsometricRightUp',
    'MsoArrowheadLength', 'msoTelemetryConsentLevelFull',
    'xlLegendKey', 'msoGraphicStylePreset21', 'MsoScriptLocation',
    'msoTextureUserDefined', 'msoSignatureSubsetSignaturesAllSigs',
    'xlMinorGridlines', 'msoBulletKanjiKoreanPlain', 'xlStar',
    'msoLanguageIDAlbanian', 'msoPatternZigZag',
    'msoShapeStylePreset14', 'Script', 'MsoBroadcastState',
    'msoShapeHeptagon', 'msoPattern5Percent',
    'msoSearchInMyNetworkPlaces', 'MsoGradientStyle', 'xlDataLabel',
    'msoCustomXMLNodeText', 'msoFreeform', 'msoAnimationGestureLeft',
    'msoPathType1', 'msoFontAlignCenter', 'msoShapeRegularPentagon',
    'msoUnderlineWavyHeavyLine', 'msoMaterialSoftEdge',
    'msoGradientDesert', 'xlRegionLabelOptionsShowAll',
    'msoChartFieldFormula', 'xlTriangle',
    'msoLanguageIDSwedishFinland', 'xlHAlignJustify',
    'msoMetaPropertyTypeUrl', 'msoElementLegendRightOverlay',
    'SharedWorkspaceLink', 'WebComponentProperties',
    'IMsoLeaderLines', 'msoExtrusionColorTypeMixed',
    'msoLastModifiedLastMonth', 'xlTickLabelPositionLow',
    'msoLanguageIDQuechuaEcuador', 'msoPatternNarrowHorizontal',
    'HTMLProject', 'xlHidden', 'IAccessible',
    'msoSmartArtNodeTypeDefault', 'CustomXMLSchema',
    'CustomXMLPrefixMapping',
    'msoElementSecondaryCategoryGridLinesMinorMajor', 'msoPathType2',
    'MsoTextureType', 'msoExtrusionTopRight', 'sigdetSignatureType',
    'msoEncodingEBCDICKoreanExtendedAndKorean',
    'ICustomXMLPartsEvents', 'msoGradientFromCorner',
    'msoShadowStyleMixed', 'msoLanguageIDSpanishCostaRica',
    'MsoFarEastLineBreakLanguageTraditionalChinese',
    'XlTickLabelPosition',
    'msoElementSecondaryCategoryAxisWithoutLabels', 'msoTextEffect50',
    'xlGeoMappingLevelWorld', 'msoCameraLegacyObliqueTop',
    'msoElementSecondaryValueGridLinesMinorMajor',
    'msoSortOrderAscending', 'msoShapeLineCallout1AccentBar',
    'xlNoCap', 'MsoEditingType', 'msoNotThemeColor',
    'MsoSharedWorkspaceTaskPriority', 'xlStockHLC', 'IMsoHyperlinks',
    'MsoOrientation', 'msoEncodingEBCDICUSCanada',
    'msoThemeColorAccent1', 'msoShape24pointStar',
    'msoShapeFlowchartDecision', 'msoShapeStylePreset74',
    'msoAutoSizeNone', 'msoThreeD14', 'msoLanguageIDZulu',
    'xlVAlignCenter', 'xlUpBars', 'msoLineStylePreset9', 'msoFalse',
    'msoLanguageIDSimplifiedChinese', 'msoEncodingISO88595Cyrillic',
    'msoSingleStrike', 'msoEncodingISO88594Baltic',
    'XlErrorBarInclude', 'msoOrgChartLayoutMixed', 'MsoModeType',
    'msoElementSecondaryCategoryAxisTitleVertical',
    'MsoCTPDockPosition', 'msoEncodingMacArabic',
    'msoSyncErrorOutOfSpace', 'MsoRelativeNodePosition',
    'MsoDiagramType', 'msoCameraIsometricOffAxis3Right',
    'msoBackgroundStylePreset5', 'msoGraphicStyleMixed',
    'msoElementSecondaryValueAxisLogScale', 'msoLanguageIDArabicUAE',
    'MsoComboStyle', 'msoFileTypeDataConnectionFiles',
    'msoReflectionType2', 'msoEncodingISO88596Arabic',
    'msoLineStylePreset33', 'msoAfterLastSibling',
    'msoIconAlertWarning', 'msoScaleFromBottomRight',
    'msoElementSeriesAxisReverse', 'xlMarkerStyleDash',
    'msoWarpFormat32', 'IMsoChartGroup',
    'msoConditionIncludesNearEachOther', 'LegendEntries',
    'MsoAlertDefaultType', 'msoCTPDockPositionRestrictNoChange',
    'msoAlertIconCritical', 'msoPathTypeMixed', 'msoAnimationGoodbye',
    'msoAnimationEmptyTrash', 'sigprovdetUIOnly',
    'msoUnderlineWavyDoubleLine', 'MsoFontLanguageIndex',
    'msoConditionLastMonth', 'sigdetDelSuggSigner',
    'msoAlertDefaultSecond', 'msoDiagramMixed', 'msoLanguageIDEdo',
    'xlCorner', 'MsoPickerField', 'msoBlackWhiteMixed',
    'xlMarkerStyleNone', 'msoBulletRomanUCPeriod',
    'xlDisplayUnitCustom', 'msoCameraObliqueTop',
    'msoShapeStylePreset57', 'MsoGraphicStyleIndex',
    'certverresError', 'ODSOFilters', 'msoSyncCompareSideBySide',
    'certverresVerifying', 'msoCharacterSetSimplifiedChinese',
    'msoTextEffectShapeSlantDown', 'msoTextureBouquet',
    'msoBalloonButtonBack', 'msoBulletHebrewAlphaDash',
    'msoMetaPropertyTypeMultiChoiceFillIn', 'msoAlignBottoms',
    'MsoExtraInfoMethod', 'xlGeoProjectionTypeAlbers',
    'msoAnimationGetAttentionMajor', 'xlDisplayUnitNone',
    'xlMarkerStyleTriangle', 'EncryptionProviderDetail',
    'SensitivityLabelInitInfo', 'msoBulletArabicDBPlain',
    'MsoTextureAlignment', 'msoLanguageIDNorwegianBokmol',
    'msoLanguageIDEnglishIndonesia', 'msoAnimationLookDownLeft',
    'msoBarNoVerticalDock', 'msoPattern25Percent',
    'msoGradientPresetColors', 'msoBarFloating',
    'sigdetDelSuggSignerSet', 'msoGradientHorizontal', 'xlLeft',
    'msoElementSecondaryValueAxisThousands', 'msoEffectGlowEdges',
    'msoGraphicStylePreset9',
    'msoElementPrimaryCategoryAxisWithoutLabels',
    'xlComboColumnClusteredLineSecondaryAxis', 'msoPermissionView',
    'msoLanguageIDArabicOman', 'msoThreeD18',
    'msoBaselineAlignFarEast50', 'PropertyTest', 'XlAxisGroup',
    'msoButtonUp', 'sigdetHorizResolution',
    'msoElementDataLabelCallout', 'SignatureDetail',
    'msoBalloonButtonIgnore', 'ICommandBarsEvents',
    'msoGraphicStylePreset28', 'msoSyncErrorCouldNotCompare',
    'msoCameraPerspectiveHeroicExtremeLeftFacing',
    'msoShapeStylePreset41', 'mfPlainText', 'xlGray16',
    'msoLightingRight', 'msoShape16pointStar', 'msoEncodingHebrew',
    'RibbonControlSize', 'msoBulletRomanUCParenRight',
    'msoBackgroundStylePreset9', 'xlStockOHLC',
    'msoContactCardAddressTypeSMTP', 'msoScreenSize720x512',
    'sigprovdetUseOfficeStampUI', 'xlMarkerStyleCircle',
    'msoAnimationBeginSpeaking', 'MsoContactCardType',
    'msoShapeStylePreset23', 'MsoWizardActType',
    'MsoLanguageIDHidden', 'FileDialogFilters',
    'msoShapeStylePreset51', 'msoLanguageIDSpanishParaguay',
    'SmartArtNodes', 'msoShapeStylePreset64', 'certverresRevoked',
    'msoShadow35', 'msoShapeRectangularCallout',
    'msoShapeFlowchartMerge', 'msoShapeStylePreset22',
    'msoShapeFlowchartPredefinedProcess',
    'XlGradientStopPositionType', 'MsoScreenSize',
    'msoBarNoChangeVisible', 'xlTickLabelOrientationDownward',
    'msoBulletThaiAlphaParenBoth', 'msoCTrue', 'msoMaterialWireFrame',
    'msoBulletAlphaUCParenRight', 'SharedWorkspaceMembers',
    'xlLabelPositionLeft', 'msoSharedWorkspaceTaskStatusNotStarted',
    'msoElementLineHiLoLine', 'msoEncodingMacRomania',
    'msoLanguageIDSomali', 'msoShapeStylePreset38',
    'msoConditionNextMonth', 'msoShadow32', 'msoLanguageIDFrench',
    'msoPatternDashedVertical', 'msoShapeLeftUpArrow', 'msoBarLeft',
    'EffectParameter', 'msoMoveRowPrev', 'CommandBarControls',
    'msoBulletHindiAlpha1Period', 'msoTextEffect22',
    'msoTexturePapyrus', 'msoControlSpinner',
    'msoButtonSetTipsOptionsClose', 'msoBlackWhiteHighContrast',
    'msoSoftEdgeTypeMixed', 'msoElementChartWallShow',
    'xlSeriesNameLevelNone', 'msoBevelDivot',
    'MsoOrgChartOrientation', 'msoBulletHindiNumPeriod',
    'xlMarkerStylePicture', 'msoLineCapMixed',
    'msoPatternOutlinedDiamond',
    'msoElementPrimaryCategoryAxisMillions',
    'msoConditionNotEqualToHigh', 'msoConditionEqualsCompleted',
    'msoWizardMsgLocalStateOff', 'WebPageFont',
    'msoBlackWhiteBlackTextAndLine', 'msoLanguageIDUI',
    'certverresUnverified', 'msoAlignJustify', 'sigdetWindowsVersion',
    'msoBarNoMove', 'SmartArtQuickStyles',
    'msoCameraIsometricTopDown', 'ThemeFonts',
    'msoBackgroundStylePreset3', 'msoTrue', 'msoUnderlineHeavyLine',
    'xlMarkerStyleX', 'msoFilterConjunctionAnd', 'Shape',
    'msoLanguageIDFrenchZaire', 'IMsoTickLabels',
    'msoGraphicStylePreset27', 'msoEncodingUTF8',
    'DocumentInspectors', 'msoAnimationSearching', 'msoLightRigFlood',
    '_CustomXMLSchemaCollection', 'msoLightRigTwoPoint',
    'msoExtrusionBottomRight', 'msoDiagramCycle',
    'xlLabelPositionAbove', 'msoOLEControlObject',
    'msoBalloonErrorCOMFailure', 'msoShapeStylePreset58',
    'xlParentDataLabelOptionsOverlapping', 'AUTO',
    'msoShapeNotchedRightArrow',
    'msoEncodingEBCDICSimplifiedChineseExtendedAndSimplifiedChinese',
    'msoSharedWorkspaceTaskStatusWaiting',
    'msoShapeFlowchartSummingJunction', 'CommandBars',
    'msoPermissionAllCommon', 'IMsoPlotArea', 'msoFileTypeAllFiles',
    'msoCameraIsometricRightDown', 'xlStockVHLC', 'xlCap',
    'xlWaterfall', 'msoElementSecondaryCategoryGridLinesMajor',
    'msoElementSeriesAxisGridLinesMinorMajor',
    'msoElementLineDropLine', 'msoShapeLineCallout3', 'MsoScaleFrom',
    'msoGraphic', 'msoEncodingSimplifiedChineseGBK',
    'msoEffectBrightnessContrast', 'MsoCustomXMLValidationErrorType',
    '_CustomXMLParts', 'msoShadow22', 'msoPatternLightVertical',
    'xlPyramidCol', 'msoLineJoinBevel', 'msoGraphicStylePreset8',
    'msoElementChartFloorShow', 'msoScreenSize1800x1440',
    'msoCameraObliqueLeft', 'msoWizardMsgResuming',
    'SharedWorkspaceMember', 'xlRowField', 'MsoFileType',
    'msoButtonIconAndWrapCaption', 'msoCalloutAngleMixed',
    'msoElementSecondaryCategoryAxisThousands', 'msoOLEMenuGroupEdit',
    'msoReflectionType7', 'msoShapeFlowchartCard', 'msoAlignRights',
    'xlAxis', 'sigdetSignedData', 'msoPermissionPrint',
    '_CustomXMLPart', 'msoEncodingEBCDICFinlandSweden', 'xlAutomatic',
    'msoBlackWhiteInverseGrayScale',
    'msoConditionNotEqualToCompleted', 'msoSyncErrorNone',
    'msoShapeLineCallout4', 'msoConditionEquals', 'xlAutomaticScale',
    'msoShapeStylePreset9', 'msoTriStateMixed',
    'msoTextOrientationVerticalFarEast', 'PickerDialog',
    'IMsoCharacters', 'xlVertical', 'msoGraphicStylePreset20',
    'msoLanguageIDArabic', 'siglnimgUnsigned', 'xlPyramidColStacked',
    'xl3DBarClustered', 'msoTextureStationery', 'MsoReflectionType',
    'msoTextEffect23', 'msoTexturePinkTissuePaper',
    'msoPermissionRead', 'msoShapeExplosion1',
    'msoElementErrorBarNone', 'xlShowLabelAndPercent',
    'msoAnimationCharacterSuccessMajor', 'xlOtherCombinations',
    'MsoFillType', 'msoTextEffectAlignmentCentered',
    'msoArrowheadDiamond', 'msoTextDirectionLeftToRight',
    'msoBlogNoCategories', 'msoWarpFormatMixed',
    'xlConeBarStacked100', 'msoCameraIsometricOffAxis1Left',
    'msoCameraObliqueTopLeft', 'msoLanguageIDPashto',
    'msoButtonCaption', 'ISensitivityLabel', 'msoLightRigContrasting',
    'ICommandBarButtonEvents', 'msoBulletAlphaUCPeriod',
    'msoShapeLeftBracket', 'msoLanguageIDChineseMacaoSAR',
    'msoLanguageIDEnglishTrinidad', 'xlTickLabelOrientationAutomatic',
    'Model3DFormat', 'msoLanguageIDFrenchReunion', 'msoCaseLower',
    'msoBalloonButtonTips', 'msoShapeSwooshArrow',
    'msoBackgroundStyleMixed', 'msoTargetBrowserV4',
    'msoMenuAnimationRandom', 'msoThemeEastAsian',
    'xlCylinderColStacked100', 'msoElementChartFloorNone',
    'msoControlLabel', 'msoMethodPost', 'msoLanguageIDTelugu',
    'xlMillionMillions', 'MsoBarPosition', 'MsoConnectorType',
    'xlWalls', 'XlGeoProjectionType', 'msoSyncEventDownloadInitiated',
    'xlHAlignDistributed', 'msoLineLongDash', 'msoTextureGreenMarble',
    'msoThemeColorLight1', 'siglnimgSignedValid',
    'CommandBarComboBox', 'MsoFlipCmd', 'msoShapeLineInverse',
    'xlSeriesColorGradientStyleSequential',
    'BackstageGroupStyleWarning', 'BackstageGroupStyleNormal',
    'msoShadow2', 'xlPivotChartFieldButton',
    'msoEncodingISO885915Latin9', 'msoCameraIsometricLeftDown',
    'msoCalloutThree', 'xlGeoMappingLevelState', 'msoShadow36',
    'msoSharedWorkspaceTaskStatusCompleted', 'msoCalloutDropCustom',
    'msoPresetLightingDirectionMixed', 'msoEffectPastelsSmooth',
    'msoElementTrendlineAddTwoPeriodMovingAverage',
    'msoMaterialPlastic2', 'msoShapeStylePreset65', 'xlYears',
    'msoShapeStylePreset72', 'msoLineStylePreset8',
    'msoConditionIsNo', 'MsoLastModified', 'msoShadow6',
    'msoAnimationCheckingSomething', 'xlPyramidToMax',
    'msoElementPrimaryCategoryAxisTitleNone', 'DocumentProperty',
    'msoLanguageIDBulgarian', 'msoShadow28', 'msoColorTypeRGB',
    'msoSignatureSubsetSignatureLinesUnsigned', 'msoPictureMixed',
    'msoLightingNormal', 'msoLanguageIDMacedonian', 'msoThreeD16',
    'msoIodGroupPIAs', 'msoSmartArtNodeBefore',
    'msoTextEffectAlignmentRight', 'msoThemeColorFollowedHyperlink',
    'msoShapeSmileyFace', 'msoPatternMixed', 'msoUnderlineWavyLine',
    'xlErrorBarTypePercent', 'xlCategoryLabelLevelAll',
    'msoGradientDaybreak', 'SharedWorkspace',
    'xlLabelPositionInsideEnd', 'msoBalloonButtonCancel',
    'xlSplitByPercentValue', 'IMsoChartData',
    'msoLanguageIDGermanLuxembourg', 'msoTextEffect11',
    'msoFillPatterned', 'xlGradientStopPositionTypePercent',
    'msoButtonIconAndWrapCaptionBelow', 'PictureEffects',
    'msoMaterialTranslucentPowder', 'MsoPictureEffectType',
    'msoConditionFileTypeAllFiles', 'msoEncodingKOI8R',
    'msoBlackWhiteAutomatic', 'msoUnderlineDotDashLine',
    'msoLanguageIDCzech', 'msoShapeStylePreset70', 'xlErrorBars',
    'msoElementLegendTop', 'msoFeatureInstallOnDemand',
    'msoElementSeriesAxisWithoutLabeling', 'msoEncodingOEMNordic',
    'msoShapeFlowchartTerminator', 'msoCameraIsometricOffAxis2Top',
    'msoLanguageIDEnglishBelize', 'msoHyperlinkInlineShape',
    'GradientStop', 'msoControlSplitDropdown',
    'msoTextEffectShapeChevronDown', 'XlParentDataLabelOptions',
    'MsoDistributeCmd', 'msoEmbeddedOLEObject',
    'msoThemeColorAccent4', 'MsoControlOLEUsage',
    'msoElementPrimaryCategoryAxisTitleBelowAxis',
    'msoLanguageIDHindi', 'xlSurfaceWireframe',
    'msoAlertDefaultThird', 'msoShapeOval', 'xlUnderlineStyleDouble',
    'msoShapeFlowchartDocument', 'msoButtonSetOkCancel',
    'MsoMergeCmd', 'msoWarpFormat29', 'msoBottomSection',
    'xlConeColClustered', 'msoTextureTopLeft', 'msoFileDialogOpen',
    'xlZero', 'msoConditionAnytime', 'XlBarShape',
    'msoFilterComparisonContains', 'msoLanguageIDAmharic',
    'msoElementSecondaryValueAxisTitleHorizontal',
    'msoFileFindSortbyTitle', 'xlSquare', 'msoScriptLocationInHead',
    'msoLineStylePreset14', 'CustomXMLPart', 'msoShapeOctagon',
    'msoShapeLineCallout4NoBorder', 'msoLastModifiedThisMonth',
    'MsoTextStrike', 'MsoAlertCancelType', 'msoShapeDonut',
    'msoContactCardTypePersonalContact', 'msoLanguageIDBelgianDutch',
    'xlRadarMarkers', 'msoBevelTypeMixed', 'SharedWorkspaceTask',
    'xlRTL', 'msoScriptLanguageVisualBasic',
    'msoCameraPerspectiveLeft', 'MsoChartElementType', 'msoNoError',
    'msoLineStylePreset19', 'xlCylinder', 'msoPatternCross',
    'msoFileDialogSaveAs', 'xlCategory',
    'msoEncodingMacSimplifiedChineseGB2312',
    'msoEncodingISO2022JPJISX02021984', 'msoShadow40',
    'msoGraphicStylePreset15', 'offPropertyTypeString',
    'msoConditionEqualsLow', 'msoElementSecondaryCategoryAxisShow',
    'msoEncodingExtAlphaLowercase',
    'msoConditionEqualsWaitingForSomeoneElse', 'encprovdetAlgorithm',
    'msoElementTrendlineNone', 'MsoBaselineAlignment',
    'encprovdetBlockCipher', 'msoFileTypeOfficeFiles',
    'xl3DAreaStacked100', 'RibbonControlSizeLarge', 'xl3DPie',
    'IMsoChartArea', 'msoTextEffectShapeCircleCurve',
    'msoFileFindSortbyFileName', 'msoContactCardTypeUnknownContact',
    'msoFileTypeOutlookItems', 'xlColorIndexAutomatic',
    'SmartArtLayouts', 'msoCameraLegacyObliqueTopLeft',
    'msoControlOLEUsageNeither', 'msoShapeStylePreset52',
    'msoShadow1', 'msoEncodingUTF7', 'xlAxisCrossesCustom',
    'msoTextEffect49', 'msoLanguageIDSyriac', 'msoSyncStatusConflict',
    'msoCalloutAngle60', 'msoElementSecondaryValueAxisMillions',
    'msoThreeD6', 'xlPivotChartDropZone', 'msoLastModifiedAnyTime',
    'msoMetaPropertyTypeDateTime', 'XlUnderlineStyle',
    'msoSyncVersionServer', 'MsoBlogImageType', 'SmartDocument',
    'xlChartY', 'msoExtrusionRight', 'xlAreaEx', 'contverresValid',
    'msoLanguageIDHelp', 'msoLanguageIDKyrgyz',
    'msoLineFillPatterned', 'msoShapeActionButtonHelp', 'TextColumn2',
    'ILicAgent', 'msoTextEffectShapeCanUp', 'msoLanguageIDTsonga',
    'msoShapeStylePreset1', 'msoConditionFileTypeOutlookItems',
    'msoSyncErrorUnknownDownload', 'msoEffectSharpenSoften',
    'msoLanguageIDTatar', 'msoCommandBarButtonHyperlinkInsertPicture',
    'msoLightingTopLeft', 'msoTextEffectShapeButtonCurve',
    'msoElementPrimaryValueAxisBillions',
    'msoElementSeriesAxisTitleVertical', 'msoShape5pointStar',
    'BulletFormat2', 'xlColumnStacked100Ex', 'msoAlignTops',
    'MsoSignatureSubset', '_CommandBarActiveX',
    'msoHTMLProjectStateDocumentProjectUnlocked',
    'msoDistributeHorizontally', 'msoFileDialogFolderPicker',
    'msoEffectGlass', 'msoMedia', 'msoButtonIconAndCaptionBelow',
    'CustomXMLSchemaCollection', 'XlErrorBarDirection',
    'msoElementLegendLeftOverlay', 'msoThemeColorBackground1',
    'xlYErrorBars', 'msoLanguageIDTibetan', 'MsoHorizontalAnchor',
    'msoMetaPropertyTypeBoolean',
    'xlPivotChartCollapseEntireFieldButton', 'msoShapeWave',
    'siglnimgSignedInvalid',
    'msoElementSecondaryValueAxisTitleVertical',
    'msoLanguageIDSpanishHonduras', 'msoAlertButtonYesAllNoCancel',
    'msoShapeGear9', 'msoShapeStylePreset67', 'Sync',
    'msoScriptLocationInBody', 'msoLanguageIDFrenchSenegal',
    'IFoundFiles', 'msoEncodingEBCDICLatinAmericaSpain',
    'msoWizardActResume', 'xlNotPlotted', 'msoShapeMathMultiply',
    'msoPictureGrayscale', 'msoShapeStylePreset63', 'msoTextEffect32',
    'msoScreenSize1152x900', 'msoShapeStylePreset56', 'xlHundreds',
    'xlDefaultAutoFormat', 'msoDateTimeMMddyyhmmAMPM',
    'msoShapeFlowchartSequentialAccessStorage', 'msoInk',
    'msoFeatureInstallOnDemandWithUI', 'msoCameraObliqueBottomLeft',
    'msoLightRigHarsh', 'msoButtonSetAbortRetryIgnore', 'MsoSearchIn',
    'contverresVerifying', 'msoOLEMenuGroupFile', 'msoWarpFormat15',
    'msoBaselineAlignAuto', 'msoTelemetryConsentLevelZero',
    'msoLanguageIDYi', 'msoPattern75Percent', 'msoUnderlineMixed',
    'msoThemeColorMixed', 'msoGradientVertical', 'PickerProperty',
    'DocProperties', 'msoConditionThisWeek', 'msoFontAlignTop',
    'msoLightingTop', 'MsoSyncAvailableType', 'siglnimgSigned',
    'ServerPolicy', 'msoFileTypeDesignerFiles', 'xlHigh',
    'msoConditionAtLeast', 'msoBalloonButtonNull',
    'XlChartOrientation', 'msoTextureBottomRight',
    'msoElementLegendBottom', 'msoHTMLProjectStateDocumentLocked',
    'xlXYScatter', 'msoPatternNarrowVertical',
    'certdetExpirationDate', 'msoAlignMixed',
    'msoLanguageIDGermanAustria', 'msoTextEffect46',
    'msoLightRigLegacyNormal3', 'msoCharacterSetCyrillic',
    'msoShadow17', 'msoLanguageIDItalian', 'msoLanguageIDJapanese',
    'msoShapeChartX', 'xlConeCol', 'XlTrendlineType', 'MetaProperty',
    'msoConditionFileTypeExcelWorkbooks', 'msoWarpFormat8',
    'msoShapeRound1Rectangle', 'certverresExpired', 'ChartGroups',
    'msoLineSolid', 'msoLanguageIDKashmiriDevanagari',
    'msoEncodingEUCChineseSimplifiedChinese', 'msoLanguageIDCatalan',
    'msoExtrusionBottomLeft', 'SignatureSet', 'msoLanguageIDHebrew',
    'msoShapeRightBrace', 'msoShapeUTurnArrow',
    'xlPyramidColClustered', 'MsoVerticalAnchor', 'MsoTextTabAlign',
    'msoBulletThaiNumParenRight',
    'msoElementSecondaryCategoryAxisTitleNone',
    'msoShadowStyleOuterShadow', 'IMsoContactCard',
    'WebComponentWindowExternal', 'msoBaselineAlignTop',
    'msoCharacterSetTraditionalChinese', 'msoSearchInMyComputer',
    'msoPatternLightUpwardDiagonal', 'MsoTextChangeCase',
    'SignatureType', 'msoCustomXMLValidationErrorSchemaGenerated',
    'msoTextureBottom', 'msoEncodingOEMMultilingualLatinI',
    'msoEncodingT61', 'msoTextEffect31', '_IMsoOleAccDispObj',
    'msoPatternPlaid', 'msoLineStylePreset20', 'xlScaleLogarithmic',
    'msoCameraPerspectiveHeroicLeftFacing', 'MsoCalloutAngleType',
    'xlConeToMax', 'xlPageField', 'msoShapeStylePreset10',
    'msoSlicer', 'msoLanguageIDGujarati', 'msoEncodingOEMPortuguese',
    'msoLanguageIDKannada', 'msoButtonAutomatic',
    'msoShapeActionButtonMovie', 'msoLineStylePreset25', 'xlLegend',
    'xlPareto', 'xlOuterCounterClockwisePoint',
    'msoBulletTradChinPeriod', 'xlLineStackedEx',
    'msoElementSecondaryValueAxisTitleRotated',
    'msoLanguageIDBelgianFrench', 'msoSyncEventOffline',
    'msoHTMLProjectOpenSourceView', 'msoblogImageTypeJPEG',
    'MsoPatternType', 'xlUpward', 'msoCameraIsometricBottomDown',
    'msoCustomXMLNodeCData', 'msoElementDataTableShow',
    'certdetAvailable', 'sigprovdetUrl', 'msoEncodingISO88597Greek',
    'msoTextEffect13', 'msoMetaPropertyTypeMax', 'msoTextEffect28',
    'msoLanguageIDDzongkhaBhutan', 'msoReflectionType9',
    'msoShadow34', 'xlAreaStackedEx',
    'xlDataLabelsShowLabelAndPercent', 'xlHorizontal', 'xlStretch',
    'MsoPermission', 'XlChartElementPosition', 'MsoCustomXMLNodeType',
    'msoCharacterSetGreek', 'MsoPathFormat', 'IMsoDiagram',
    'msoLineRoundDot', 'msoBulletRomanUCParenBoth', 'msoWarpFormat26',
    'msoCameraIsometricOffAxis2Right', 'msoShadow33',
    'IConverterUICallback', 'msoShadow26', 'msoLightRigLegacyHarsh2',
    'xlSeriesLines', 'MsoControlType', 'msoButtonSetNone',
    'msoEncodingISO88593Latin3', 'PictureEffect',
    'msoFileTypeBinders', 'msoFontAlignAuto',
    'msoFileTypeJournalItem', 'msoLanguageIDKhmer',
    'msoElementSecondaryCategoryAxisNone', 'msoSoftEdgeType4',
    'MsoEnvelope', 'msoTabAlignRight', 'IMsoSeriesLines',
    'msoEditingSymmetric', 'msoLastModifiedThisWeek',
    'ContentVerificationResults', 'msoNoStrike',
    'xlXYScatterLinesNoMarkers', 'msoLineFillPicture',
    'msoLanguageIDTamazightLatin', 'WebComponentFormat',
    'xlDoughnutExploded', 'msoShapeActionButtonBackorPrevious',
    'msoTextureNewsprint', 'MsoEncoding', 'xlHorizontalCoordinate',
    'msoConditionEndsWith', 'msoLanguageIDArabicTunisia',
    'msoLightRigGlow', 'msoUnderlineSingleLine',
    'msoGradientEarlySunset', 'msoConditionBeginsWith',
    'msoShapeLineCallout4BorderandAccentBar',
    'msoDocInspectorStatusIssueFound', 'msoShadow29',
    'msoFilterComparisonEqual', 'msoFlipHorizontal', 'xlColumns',
    'msoSoftEdgeType2', 'msoGradientRainbow', 'msoControlButton',
    'xlXYScatterEx', 'msoTextEffectShapeCurveUp',
    'msoGradientNightfall', 'msoContactCardTypeEnterpriseContact',
    'sigprovdetHashAlgorithm', 'msoTextEffectShapeWave2',
    'msoButtonSetBackClose', 'msoLastModifiedLastWeek', 'msoShadow16',
    'msoLinkedPicture', 'XlErrorBarType', 'msoPatternLargeConfetti',
    'msoEncodingISCIIBengali', 'msoShapeStylePreset47',
    'xlHAlignFill', 'msoTextEffectShapeDeflateInflate',
    'msoSmartArtNodeDefault', 'msoTexturePreset', 'msoShapeTypeMixed',
    'SharedWorkspaceFolders', 'msoIconNone',
    'msoElementSecondaryCategoryGridLinesNone', 'MsoFileFindView',
    'msoElementDataLabelRight', 'msoEncodingIA5German',
    'msoFilterComparisonGreaterThan', 'msoAlignCenters',
    'xlAxisCrossesAutomatic', 'msoShapeStyleMixed', 'MsoDebugOptions',
    'msoTabAlignCenter', 'SmartArtNode', 'msoPictureTypePNG',
    'msoSyncEventUploadFailed', 'msoEncodingCyrillicAutoDetect',
    'msoControlGraphicDropdown', 'msoShapeLeftRightArrowCallout',
    'msoBalloonButtonRetry', 'msoShadow4', 'msoBalloonTypeNumbers',
    'msoShapeBevel', 'msoAutomationSecurityLow',
    'msoDistributeVertically', 'msoEncodingGreek',
    'msoShapeLineCallout2', 'msoShadow10', 'xlCategoryScale',
    'msoLineStylePreset41', 'GridLines', 'FoundFiles',
    'msoPatternHorizontal', 'mso3DModel', 'xlValue',
    'msoShapeStylePreset7', 'msoThemeAccent6', 'msoTextEffect5',
    'msoTabAlignLeft', 'msoMetaPropertyTypeGuid', 'msoShapeChord',
    'msoLightingDim', 'msoLightRigThreePoint',
    'msoSharedWorkspaceTaskPriorityHigh', 'msoTextureCenter',
    'MsoTextRangeInsertPosition',
    'msoTextEffectAlignmentLetterJustify',
    'msoTextEffectShapeRingOutside', 'msoEncodingUSASCII',
    'msoElementPrimaryCategoryAxisTitleRotated',
    'msoNewfromExistingFile', 'msoMoveRowFirst',
    'msoConditionNextWeek', 'msoTargetBrowserV3', 'xlShowPercent',
    'msoBlackWhiteLightGrayScale', 'xlOuterCenterPoint',
    'msoLanguageIDBosnianBosniaHerzegovinaCyrillic',
    'msoBulletRomanLCParenRight', 'xlSeriesNameLevelAll', 'msoLine',
    'xlMedium', 'msoWarpFormat10', 'xlInnerClockwisePoint',
    'msoTextEffectShapeWave1', 'msoPatternDottedDiamond',
    'msoGradientMoss', 'msoShapeFlowchartOfflineStorage',
    'xlDoughnutEx', 'XlAxisCrosses', 'OfficeTheme',
    'MsoPresetTextEffectShape', 'msoGradientRainbowII',
    'msoEditingAuto', 'msoUnderlineDotDotDashLine',
    'msoShapeLineCallout3BorderandAccentBar', 'msoWarpFormat12',
    'msoLanguageIDMaori', 'msoFileTypeTemplates',
    'msoShapeStylePreset19', 'msoMetaPropertyTypeChoice',
    'msoSyncErrorVirusDownload', 'msoFontAlignBottom',
    'msoElementPrimaryCategoryAxisLogScale', 'msoGradientGoldII',
    'xlMarkerStyleStar', 'msoEncodingSimplifiedChineseGB18030',
    'msoLineStylePreset36', 'xlSemiGray75', 'msoElementLegendRight',
    'msoOLEMenuGroupNone', 'msoShapeSnipRoundRectangle',
    'msoLightRigSunset', 'msoSmartArtNodeAfter', 'msoWarpFormat9',
    'msoSortOrderDescending', 'msoTextEffect20', 'ShapeRange',
    'msoAlignLeft', 'msoThreeD13', 'msoLanguageIDSwedish',
    '_CommandBarsEvents', 'msoCameraPerspectiveBelow',
    'msoShapeStylePreset48', 'msoConditionAnyNumberBetween',
    'msoGradientOcean', 'msoLanguageIDHungarian',
    'xlLegendPositionTop', 'msoConditionInTheNext', 'xlPower',
    'msoPictureCompressTrue', 'xlHundredMillions',
    'msoFileFindSortbySize', 'msoThemeDark2',
    'msoEncodingArabicAutoDetect', 'msoTextureDenim',
    'msoOLEMenuGroupWindow', 'IMsoEnvelopeVBEvents',
    'msoTextEffect33', 'msoShapeStylePreset73',
    'msoSyncCompareAndMerge', 'msoEffectPlasticWrap',
    'msoCameraIsometricOffAxis2Left', 'msoShapeMathMinus',
    'msoButtonTextBelow', 'msoTextEffect47', 'msoTextEffect9',
    'xlBinsTypeCategorical', 'msoVerticalAnchorMixed',
    'msoDateTimeHmmss', 'msoBalloonButtonYesToAll', 'msoTextureSand',
    'msoBulletThaiNumParenBoth', 'msoTextEffectShapeTriangleUp',
    'msoSyncEventDownloadFailed', 'msoCustomXMLValidationErrorManual',
    'XlGeoMappingLevel', 'msoLanguageIDFrenchCongoDRC',
    'ICustomXMLPartEvents', 'msoFileDialogViewTiles',
    'msoShapeFlowchartMagneticDisk', 'XlDataLabelPosition',
    'msoSyncConflictServerWins', 'XlCategorySortOrder',
    'msoTabStopLeft', 'xlSunburst', 'msoCameraPerspectiveRelaxed',
    'msoLanguageIDFaeroese', 'msoEffectMarker',
    'msoElementPrimaryCategoryGridLinesNone',
    'msoCTPDockPositionFloating', 'msoControlCustom',
    'MsoDebugOptions_UT', 'msoChartFieldRange',
    'msoEncodingMacHebrew', 'msoGradientOneColor', 'MsoBalloonType',
    'sigdetDocPreviewImg', 'xlErrorBarIncludeNone', 'msoAlignMiddles',
    'msoConditionNotEqualToNormal', 'msoShapeStylePreset30',
    'sigdetHashAlgorithm', 'xlLeaderLines', 'Assistant',
    'DocumentLibraryVersion', 'msoMetaPropertyTypeMultiChoice',
    'msoEncodingEBCDICRussian', 'msoShapeDownRibbon',
    'msoAlertIconWarning', 'msoScreenSize1152x882', 'FreeformBuilder',
    'MsoSyncVersionType', 'msoLanguageIDYoruba',
    'msoMetaPropertyTypeLookup', 'MsoAlertIconType',
    'msoGradientMixed', 'xlAbove', 'msoBackgroundStyleNotAPreset',
    'xlColumnStacked100', 'msoShapeStylePreset35',
    'MsoOrgChartLayoutType', 'msoShapeStylePreset76',
    'XlChartSplitType', 'MsoFileFindSortBy', 'msoShapeHalfFrame',
    'msoLanguageIDTurkmen', 'msoGraphicStylePreset3',
    'msoShapeBalloon', 'CertificateDetail', 'msoIodGroupVSTOR35Mgd',
    'msoShapeNotPrimitive', 'NOT_SET', 'msoChartFieldCategoryName',
    'RulerLevel2', 'MsoFilterConjunction', 'msoPictureTypeDefault',
    'xlCylinderColStacked', 'msoDiagramAssistant', 'xlTrendline',
    'SearchFolders', 'xlBinsTypeAutomatic',
    'msoEncodingISCIIAssamese', 'msoThreeD19', 'xlColumnClusteredEx',
    'Signature', 'msoShapeStylePreset53',
    'msoLanguageIDQuechuaBolivia', 'msoShapeFlowchartData',
    'msoShadow7', 'msoSortBySize', 'msoEffectBlur',
    'msoBringInFrontOfText', 'msoDocInspectorStatusError',
    'msoBalloonButtonOK', 'msoShapeRightArrowCallout',
    'xlBinsTypeManual', 'msoTextEffectShapeDeflate',
    'msoThemeColorHyperlink', 'msoSharedWorkspaceTaskStatusDeferred',
    'msoControlGraphicCombo',
    'msoElementSecondaryCategoryAxisTitleAdjacentToAxis',
    'IAssistance', 'xlXErrorBars', 'msoChart', 'xlJustify',
    'msoConditionFileTypeNoteItem', 'msoCameraPerspectiveRight',
    'msoShapeStylePreset5', 'xl3DBarStacked', 'RulerLevels2',
    'msoConditionIsNot', 'xlLabelPositionMixed', 'HTMLProjectItem',
    'MsoDateTimeFormat', 'msoExtrusionNone', 'LineFormat',
    'msoSyncConflictMerge', 'msoFilterComparisonNotEqual',
    'msoColorTypeInk', 'msoLanguageIDTurkish', 'XlDisplayUnit',
    'msoShapeStylePreset60', 'msoSyncErrorUnknownUpload',
    'msoContentApp', 'msoEncodingSimplifiedChineseAutoDetect',
    'msoWarpFormat37', 'msoShapeRightTriangle',
    'msoLanguageIDMaltese', 'msoLanguageIDSpanishBolivia',
    'msoThreeD10', 'MsoCharacterSet', 'msoLanguageIDQuechuaPeru',
    'xlDoughnut', 'msoPresetCameraMixed', 'xl3DPieExploded',
    'ThreeDFormat', 'msoEncodingTaiwanEten', 'msoTargetBrowserIE4',
    'xlCross', 'MsoFileFindOptions', 'msoElementUpDownBarsShow',
    'msoEncodingMacRoman', 'msoGradientDiagonalUp',
    'msoShape32pointStar', 'msoShapePentagon',
    'msoSyncStatusNotRoaming', 'MsoMixedType', 'msoTextEffect37',
    'msoEffectSaturation', 'msoWebVideo', 'msoShapeBentArrow',
    'msoIconTip', 'msoTabAlignMixed', 'XlChartType',
    'msoBackgroundStylePreset11', 'msoCharWrapMixed',
    'msoShapeCurvedUpRibbon', 'msoPatternWave', 'msoCalloutAngle45',
    'xlNone', 'msoShapeActionButtonEnd', 'msoCameraPerspectiveFront',
    'msoLineStylePreset5', 'msoBulletThaiAlphaParenRight',
    'msoLineDashDot', 'msoStrikeMixed',
    'msoCameraLegacyObliqueBottom', 'msoFileFindSortbyAuthor',
    'msoCalloutMixed', 'msoConditionFileTypePowerPointPresentations',
    'msoLanguageIDBrazilianPortuguese', 'msoBulletRomanLCParenBoth',
    'msoEncodingEUCKorean', 'msoShapeDiamond', 'msoWarpFormat1',
    'xlChartArea', 'msoSignatureSubsetSignatureLines',
    'msoLineSquareDot', 'msoShapeSquareTabs', 'msoTextureTypeMixed',
    'msoPatternLargeGrid', 'CommandBar', 'msoSendBackward',
    'msoColorTypeScheme', 'msoAnimationGestureDown',
    'msoElementErrorBarPercentage', 'xlBarStacked100Ex',
    'ILicValidator',
    'msoEncodingEBCDICJapaneseKatakanaExtendedAndJapanese',
    'msoTextEffect42', 'SharedWorkspaceTasks',
    'msoFileFindSortbyDateCreated', 'msoPatternTrellis',
    'msoConditionNotEqualToLow', 'msoLineDash',
    'msoBulletArabicAbjadDash', 'msoPictureCompressDocDefault',
    'xlLineStacked100Ex', 'msoGradientWheat', 'msoLineStylePreset30',
    'msoCameraObliqueBottomRight', 'msoShapeLineCallout3NoBorder',
    'msoPatternDashedUpwardDiagonal', 'msoPattern10Percent',
    'msoElementLineDropHiLoLine', 'msoLineStylePreset21',
    'msoThreeD11', 'msoPatternWideDownwardDiagonal', 'xlSecondary',
    'msoElementSeriesAxisGridLinesNone', 'CustomXMLNode',
    'xlComboAreaStackedColumnClustered', 'FileDialogFilter',
    'msoTextDirectionRightToLeft', 'msoMetaPropertyTypeFillInChoice',
    'msoTextureAlignmentMixed', 'sigdetIPFormHash', 'msoThreeD12',
    'msoExtrusionTop', 'msoCapsMixed', 'msoShapeStylePreset69',
    'msoBarRight', 'msoShapeMixed', 'ShapeNode',
    'msoElementSecondaryValueGridLinesMinor', 'msoShapeStylePreset39',
    'MsoButtonSetType', 'MsoColorType', 'msoColorTypeCMYK',
    'msoBackgroundStylePreset8', 'EffectParameters', 'MsoButtonState',
    'msoControlGenericDropdown', 'msoThreeD1', 'NewFile',
    'msoPresetMaterialMixed', 'msoAnimationGreeting',
    'msoEncodingCentralEuropean', 'msoShapeLeftBrace',
    'msoTextOrientationUpward', 'msoLightRigLegacyFlat4',
    'msoLanguageIDArabicQatar', 'msoControlButtonDropdown',
    'msoLanguageIDSerbianCyrillic', 'msoCallout', 'msoHyperlinkShape',
    '_SensitivityLabelEvents', 'msoThemeColorLight2', 'msoThreeD2',
    'msoGroup', 'MsoFarEastLineBreakLanguageID',
    'msoConditionLessThan', 'msoShapeLineCallout1',
    'msoUnderlineDottedLine', 'msoThemeColorDark1',
    'msoPattern40Percent', 'msoAnchorMiddle',
    'msoElementSecondaryValueAxisNone', 'msoConditionOn',
    'msoBlackWhiteBlack', 'msoEncodingHZGBSimplifiedChinese',
    'CustomTaskPane', 'msoLanguageIDChineseHongKong',
    'msoMergeFragment', 'msoEffectTexturizer', 'msoShapeRightBracket',
    'msoEncodingISO88592CentralEurope',
    'msoConditionNotEqualToNotStarted', 'msoShapeHeart',
    'msoTextEffectShapeFadeUp', 'msoBringForward',
    'msoTextureWhiteMarble', 'xlHAlignCenterAcrossSelection',
    'msoLanguageIDInstall', 'xlOutside',
    'msoElementSeriesAxisGridLinesMajor', 'xlLightHorizontal',
    'msoLanguageIDArabicEgypt', 'msoElementPrimaryValueAxisLogScale',
    'msoEncodingTaiwanWang', 'msoFileTypeWebPages',
    'msoControlSplitButtonMRUPopup', 'xlDisplayUnitLabel',
    'MetaProperties', 'xlChartElementPositionCustom',
    'msoElementDataLabelOutSideEnd', 'msoEncodingISCIIMalayalam',
    'msoWarpFormat24', 'msoWarpFormat22', 'msoControlGraphicPopup',
    'xlLabelPositionCustom', 'SensitivityLabel',
    'msoShapeActionButtonSound', 'msoLanguageIDUIPrevious',
    'msoShadow14', 'msoTextEffectShapeArchUpPour', 'msoTextBox',
    'msoBalloonErrorBadCharacter', 'msoCharacterSetKorean',
    'xlCylinderCol', 'msoMaterialDarkEdge',
    'msoConditionFileTypeContactItem', 'MsoPrivacyOptionSetting',
    'msoBevelConvex', 'msoNoCaps', 'msoConditionMoreThan',
    'msoShapeFlowchartOffpageConnector', 'xlLabelPositionBelow',
    'msoTextEffectAlignmentMixed', 'PictureFormat', 'msoEditFile',
    'msoEncodingEBCDICSerbianBulgarian', 'msoLightRigSunrise',
    'IMsoSeries', 'msoLanguageIDWelsh',
    'msoUnderlineDashLongHeavyLine', 'msoLineJoinRound',
    'MsoHTMLProjectOpen', 'msoAnimationWorkingAtSomething',
    'msoShape12pointStar', 'msoTextEffectShapeDeflateInflateDeflate',
    'msoShapeStylePreset32', 'msoDateTimeMMddyyHmm',
    'xlLabelPositionBestFit', 'msoConnectorOr', 'MsoChartFieldType',
    'msoNewfromTemplate', 'msoTextEffectShapeSlantUp',
    'msoEncodingEBCDICUnitedKingdom', 'msoEncodingKOI8U',
    'MsoTextUnderlineType', 'msoCameraIsometricTopUp',
    'msoFillGradient', 'msoColorTypeCMS', 'msoLanguageIDKanuri',
    'MsoSyncStatusType', 'xlGradientStopPositionTypeNumber',
    'msoTextureMediumWood', 'msoGradientSapphire',
    'msoCameraIsometricOffAxis1Right', 'msoDateTimeMMyy',
    'msoReflectionType5', 'MsoPictureColorType', 'msoElementLineNone',
    'msoPropertyTypeBoolean', 'FileDialogSelectedItems',
    'msoShapeCorner', 'XlSizeRepresents', 'msoLanguageIDGerman',
    'msoGraphicStylePreset6', 'msoAlignLefts', 'msoTextEffect44',
    'msoThemeColorAccent2', 'msoCharacterSetJapanese',
    'msoGraphicStylePreset10', 'xlBelow', 'MsoDocProperties',
    'msoShadow18', 'xlHiLoLines', 'msoBackgroundStylePreset1',
    'Ruler2', 'msoPermissionFullControl', 'msoLanguageIDIgbo',
    'msoLineJoinMixed', 'msoShapeStylePreset31', 'FileDialog',
    'msoEncodingEBCDICJapaneseLatinExtendedAndJapanese',
    'msoCameraPerspectiveAbove', 'msoHyperlinkRange', 'xlLine',
    'msoPatternLargeCheckerBoard', 'msoEffectCement',
    'msoTextEffect16', 'PickerField', 'msoBarTop',
    'msoEffectPhotocopy', 'msoIconAlertCritical', 'xlDays',
    'msoShapeLineCallout3AccentBar', 'msoShapeStylePreset68',
    'IMsoCorners', 'msoLanguageIDRussianMoldova',
    'msoGradientDiagonalDown', '_IMsoDispObj',
    'msoEncodingMacCyrillic', 'CategoryCollection', 'IMsoInterior',
    'BalloonCheckbox', 'xlSuggestedChart',
    'msoCommandBarButtonHyperlinkNone', 'msoSyncEventUploadSucceeded',
    'msoUnderlineDottedHeavyLine',
    'msoElementPrimaryValueAxisTitleBelowAxis', 'MsoSyncErrorType',
    'MsoCondition', 'msoConditionFileTypeDataConnectionFiles',
    'msoEncodingTraditionalChineseAutoDetect', 'msoLanguageIDMarathi',
    'msoTelemetryConsentLevelBasic', 'msoIodGroupVSTOR40Mgd',
    'xlSolid', 'certverresInvalid', 'msoTextEffectShapeChevronUp',
    'xlLinear', 'msoEncodingISCIIKannada',
    'msoTelemetryConsentLevelDefault', 'msoShapeStylePreset20',
    'msoModeModeless', 'msoLanguageIDEnglishCaribbean', 'msoShadow30',
    'msoLineFillGradient', 'msoLanguageIDTigrignaEritrea',
    'MsoFarEastLineBreakLanguageSimplifiedChinese',
    'offPropertyTypeNumber', 'xlSingle',
    'msoControllerConnectedServicesEnabled', 'msoTextEffect6',
    'msoTextDirectionMixed', 'msoElementPrimaryValueAxisTitleRotated',
    'msoEncodingKoreanAutoDetect', 'sigprovdetUseOfficeUI',
    'MsoSensitivityLabelError', 'NoBroadcast', 'msoIconAlertQuery',
    'msoShadow23', 'msoElementPrimaryCategoryGridLinesMajor',
    'msoEncodingEBCDICGreekModern', 'msoAnimationGetWizardy',
    'MsoFileValidationMode', 'typelib_path',
    'msoBalloonErrorButtonModeless', 'msoConditionLastWeek',
    'msoCustomXMLNodeComment', 'msoLanguageIDPortuguese',
    'xlGeoProjectionTypeRobinson', 'xlScaleLinear',
    'msoEncodingCyrillic', 'msoMergeUnion', 'xlLabelPositionRight',
    'msoElementSeriesAxisTitleHorizontal', 'msoLightRigFlat',
    'msoEffectGlowDiffused', 'ICTPFactory', 'xlGray50', 'COMAddIns',
    'xlDownward', 'msoEncodingEBCDICTurkish',
    'msoConditionEqualsDeferred', 'msoShapeActionButtonDocument',
    'xlCylinderColClustered', 'msoPathTypeNone',
    'MsoFilterComparison', 'msoLineStylePreset24', 'MsoAutoShapeType',
    'IMsoTrendline', 'MsoBackgroundStyleIndex',
    'msoLineStylePreset15', 'SeriesGradientStopData',
    'msoGraphicStylePreset22', 'xlColumnClustered',
    'msoLineDashDotDot', 'contverresError',
    'msoPresetLightingSoftnessMixed', 'xlCylinderBarStacked100',
    'msoCustomCharWrap', 'msoShapeLineCallout2AccentBar',
    'msoConditionTomorrow', 'xlSeriesColorGradientStyleDiverging',
    'msoShapeCross', 'msoReflectionTypeMixed',
    'msoEncodingEBCDICJapaneseKatakanaExtended',
    'msoEncodingEUCJapanese', 'msoConditionFileTypeMailItem',
    'MsoBlackWhiteMode', 'msoDateTimedMMMyy',
    'xlCylinderBarClustered', 'msoSoftEdgeType1', 'xlXYScatterLines',
    'msoLanguageIDKirghiz', 'msoBevelNone',
    'MsoTelemetryConsentLevel', 'msoBevelAngle', 'xlTickMarkInside',
    'msoShapeCloudCallout', 'msoShapeUpRibbon', 'xlVAlignDistributed',
    'MailFormat', 'CommandBarButton', 'msoShapeRound2DiagRectangle',
    'XlLegendPosition', 'msoAutoSizeShapeToFitText',
    'msoGradientSilver', 'msoShapeGear6', 'msoLineThinThin',
    'msoOptionsAdd', 'msoLanguageIDSpanishPuertoRico',
    'msoCameraIsometricBottomUp', 'msoLanguageIDDanish',
    'xlUnderlineStyleDoubleAccounting', 'sigtypeUnknown',
    'msoLineCapFlat', 'sigdetIPCurrentView', 'msoBarNoHorizontalDock',
    'msoArrowheadShort', 'msoLanguageIDKazakh',
    'msoLanguageIDEnglishPhilippines', 'msoMergeSubtract',
    'msoWarpFormat34', 'msoChartFieldPercentage',
    'msoLightRigLegacyHarsh1', 'msoBulletRomanLCPeriod',
    'xl3DColumnStacked100', 'xlSurfaceTopView', 'sigtypeNonVisible',
    'msoClipboardFormatHTML', 'msoCTPDockPositionRestrictNone',
    'msoSignatureSubsetAll', 'xlGeneral', 'msoMenuAnimationNone',
    'msoWarpFormat17', 'xlParentDataLabelOptionsNone',
    'msoCameraIsometricOffAxis3Left', 'MsoScriptLanguage',
    'msoShapeStylePreset34', 'DiagramNodes', 'msoShapeRightArrow',
    'xlRows', 'msoLineStylePreset11', 'msoEditingCorner',
    'msoAlertIconQuery', 'IMsoHiLoLines', 'ChartFont', 'Scripts',
    'xlErrorBarIncludeBoth', 'msoButtonSetNextClose',
    'msoElementPrimaryValueAxisThousands', 'msoAnimationLookLeft',
    'msoBackgroundStylePreset2', 'msoBarRowLast',
    'msoEffectPencilGrayscale', 'msoControlOLEUsageClient',
    'msoLanguageIDSpanishElSalvador', 'xlTickMarkCross',
    'xlParentDataLabelOptionsBanner', 'msoScriptLanguageASP',
    'CalloutFormat', 'xlShape',
    'msoElementSecondaryCategoryAxisBillions',
    'msoPropertyTypeNumber', 'msoElementPrimaryCategoryAxisThousands',
    'msoEncodingWestern', 'msoEncodingOEMCyrillicII',
    'msoBarTypeNormal', 'msoTextEffectShapeArchUpCurve',
    'msoScriptLanguageJava', 'msoLanguageIDOromo', 'msoWarpFormat23',
    'msoCaseToggle', 'XlConstants', 'msoEffectBackgroundRemoval',
    'msoShapeLightningBolt', 'msoEffectWatercolorSponge',
    'msoAnimationLookDownRight', 'msoCharacterSetMultilingualUnicode',
    'msoFileTypeDatabases', 'msoGraphicStyleNotAPreset',
    'msoThreeD17', 'msoShapeLineCallout2NoBorder', 'msoCalloutOne',
    'msoCameraPerspectiveContrastingRightFacing',
    'msoLineStylePreset18', 'msoLanguageIDRomanianMoldova',
    'msoScriptAnchor', 'msoLanguageIDEnglishNewZealand', 'XlBinsType',
    'msoArrowheadLengthMedium', 'msoSyncEventDownloadSucceeded',
    'CustomTaskPaneEvents', 'msoShapeOvalCallout',
    'msoDateTimeFigureOut', 'msoEffectColorTemperature',
    'msoElementSecondaryValueAxisTitleNone', 'msoGraphicStylePreset7',
    'msoControlDropdown', 'msoDateTimehmmssAMPM', 'xlStError',
    'msoArrowheadOval', 'msoLanguageIDPunjabi',
    'MsoPresetLightingDirection', 'msoCTPDockPositionRight',
    'msoAnimationGestureUp', 'msoLanguageIDAssamese',
    'msoThemeColorAccent6', 'msoLanguageIDFarsi',
    'msoUnderlineDashHeavyLine', 'msoConditionFileTypeVisioFiles',
    'MsoLanguageID', 'msoThemeLight1', 'xlErrorBarIncludePlusValues',
    'msoMsoTextRangeInsertAfter', 'xlRegionMap', 'xlMajorGridlines',
    'msoControlActiveX', 'msoConditionFileTypeTemplates',
    'msoAnimationSaving', 'msoPermissionExtract', 'XlHAlign',
    'msoDoubleStrike', 'xlCategoryDescending', 'ChartColorFormat',
    'msoViewPreview', 'msoEncodingISCIIDevanagari',
    'msoElementSecondaryValueGridLinesMajor', 'msoShadow42',
    'msoElementDataTableWithLegendKeys', 'msoCalloutTwo',
    'msoFlipVertical', 'msoSyncEventUploadInitiated',
    'msoReflectionType8', 'msoTabStopCenter',
    'msoLanguageIDArabicLebanon', 'MsoContactCardAddressType',
    'msoLineStylePreset22', 'msoThreeD9', 'msoLineStylePreset2',
    'xlDataLabelsShowBubbleSizes', 'msoEncodingMacLatin2',
    'msoConditionFileTypePublisherFiles',
    'msoBalloonErrorTooManyControls', 'SmartArtQuickStyle',
    'msoShapeFlowchartExtract', 'msoGraphicStylePreset4',
    'xlUnderlineStyleSingle', 'xlScale', 'IDocumentInspector',
    'MsoPresetTextEffect', 'msoLanguageIDSepedi',
    'msoShapeFlowchartManualOperation', 'xlBubble3DEffect',
    'msoSyncErrorCouldNotOpen', 'msoShapeVerticalScroll',
    'msoSoftEdgeTypeNone', 'msoUnderlineWords', 'msoFileTypeMailItem',
    'msoCustomXMLNodeDocument', 'Points', 'WebComponent',
    'msoChartFieldValue', 'BalloonCheckboxes',
    'msoCameraPerspectiveContrastingLeftFacing', 'msoSearchInCustom',
    'msoThemeFollowedHyperlink', 'msoAnchorNone',
    'msoShapeStylePreset43', 'xlContext', 'msoShapeStylePreset28',
    'xlBoth', 'msoPathType3', 'msoSyncStatusLatest', 'xlLightDown',
    'msoEffectCrisscrossEtching', 'msoLanguageIDArabicYemen',
    'msoLanguageIDSpanishArgentina', 'xlErrorBarTypeFixedValue',
    'msoBalloonTypeBullets', 'msoCaseTitle', 'msoPatternWeave',
    'msoDiagram', 'msoArrowheadNarrow', 'msoArrowheadStealth',
    'xl3DLine', 'ThemeColorScheme', 'msoLineFillTextured',
    'msoLanguageIDGuarani', 'msoButtonWrapText', 'EncryptionProvider',
    'msoLineThickBetweenThin', 'msoLanguageIDSanskrit',
    'xlLabelPositionOutsideEnd', 'msoShadow25', 'WorkflowTemplates',
    'msoOrgChartLayoutStandard', 'msoControlSplitButtonPopup',
    'msoGradientColorMixed', 'MsoBulletType',
    'BroadcastCapSupportsMeetingNotes', 'msoTextEffect25',
    'MsoAppLanguageID', 'msoLightRigLegacyFlat2',
    'msoButtonSetBackNextClose', 'xlSplitByValue', 'xlTenMillions',
    'msoElementTrendlineAddLinearForecast', 'msoAlertButtonOK',
    'msoEffectChalkSketch', 'xlPlusValues', 'msoAlignRight',
    'msoFontAlignBaseline', 'msoPermissionSave', 'msoWarpFormat7',
    'msoEncodingMacGreek1', 'msoBarPopup',
    'msoTextOrientationHorizontal', 'xlHAlignLeft',
    'msoShapeCurvedDownRibbon', 'msoTextEffectAlignmentLeft',
    'msoTextureRecycledPaper', 'msoBarTypeMenuBar',
    'ThemeEffectScheme', 'msoSignatureSubsetSignaturesNonVisible',
    'msoConditionEqualsNormal', 'msoElementDataLabelBottom',
    'msoElementSeriesAxisTitleRotated', 'xlInside',
    'msoLanguageIDSorbian', 'msoEncodingISO88598Hebrew',
    'msoCustomXMLValidationErrorAutomaticallyCleared',
    'msoSyncErrorFileTooLarge', 'xlBar', 'msoShapeStylePreset27',
    'msoPattern70Percent', 'msoTextureWaterDroplets',
    'msoCameraLegacyPerspectiveRight', 'msoConditionThisMonth',
    'msoTextEffect14', 'msoConnectorElbow', 'msoEncodingVietnamese',
    'msoThemeHyperlink', 'MsoOLEMenuGroup',
    'MsoPresetLightingSoftness', 'msoLineStylePreset4',
    'xlBarStackedEx', 'msoCTPDockPositionRestrictNoVertical',
    'msoGradientMahogany', 'SharedWorkspaceFiles',
    'msoShapeActionButtonReturn', 'msoEncodingOEMCyrillic',
    'IRibbonUI', 'msoLanguageIDFrenchMonaco',
    'msoOrgChartLayoutBothHanging', 'xlLegendPositionRight',
    'msoTexturePurpleMesh', 'msoSyncStatusNewerAvailable',
    'msoPickerFieldNumber', 'msoFileDialogViewSmallIcons',
    'msoWizardMsgShowHelp', 'msoShapeChartPlus', 'msoShape7pointStar',
    'MsoIconType', 'msoBalloonTypeButtons', 'msoBalloonErrorTooBig',
    'msoContactCardAddressTypeOutlook',
    'msoOrgChartLayoutRightHanging', 'msoElementPlotAreaNone',
    'MsoFarEastLineBreakLanguageJapanese',
    'IBlogPictureExtensibility', 'msoTextureWovenMat',
    'XlPieSliceLocation', 'msoShapeFlowchartDisplay',
    'SeriesGradientStopColorFormat', 'msoAlertButtonYesNoCancel',
    'msoLanguageIDMongolian', 'msoSharedWorkspaceTaskPriorityLow',
    'xlFixedValue', 'msoCTPDockPositionRestrictNoHorizontal',
    'msoLanguageIDEnglishIreland', 'msoLanguageIDSpanishChile',
    'msoBeforeFirstSibling', 'MsoNumberedBulletStyle',
    'msoWarpFormat18', 'msoLinkedOLEObject',
    'msoEncodingUnicodeBigEndian', 'msoShapeStylePreset24',
    'msoTextEffectShapeArchDownPour', 'xlLow', 'MsoPictureType',
    'msoLanguageIDNone', 'IMsoDataLabels',
    'msoLanguageIDSpanishGuatemala', 'SmartArtColors',
    'msoTextEffect39', 'msoGradientFire',
    'msoTextOrientationHorizontalRotatedFarEast',
    'msoMaterialPlastic', 'msoLightRigMixed', 'msoShapeStylePreset21',
    'XlRowCol', 'xlThin', 'msoAnimationGetTechy',
    'msoScreenSize1024x768', 'MsoDocInspectorStatus',
    'msoShapeDoubleWave', 'msoMetaPropertyTypeInteger',
    'msoBlackWhiteGrayOutline', 'msoLanguageIDKorean',
    'msoLanguageIDGreek', 'sigdetDelSuggSignerEmail', 'MsoWarpFormat',
    'msoFilterComparisonGreaterThanEqual', 'IMsoEnvelopeVB',
    'msoElementSecondaryCategoryAxisLogScale',
    'msoEncodingOEMMultilingualLatinII', 'msoShapeStylePreset8',
    'msoTextEffectShapePlainText', 'msoOrgChartOrientationVertical',
    'msoLanguageIDLatin', 'ParagraphFormat2',
    'msoLightRigLegacyHarsh3', 'msoPictureBlackAndWhite',
    'msoElementDataLabelShow', 'MsoMenuAnimation', 'XlMarkerStyle',
    'msoLanguageIDSindhiPakistan', 'msoCTPDockPositionBottom',
    'encprovdetCipherBlockSize', 'msoLanguageIDSutu', 'IMsoErrorBars',
    'msoDiagramRadial', 'msoTextEffectShapeInflateTop',
    'msoElementDataLabelCenter', 'msoAlertIconNoIcon',
    'XlRegionLabelOptions', 'XlCategoryLabelLevel',
    'msoCameraIsometricOffAxis4Left', 'xlOuterClockwisePoint',
    'xlPrimary', 'xlRadarFilled', 'cipherModeCBC',
    'msoElementPrimaryValueAxisTitleAdjacentToAxis',
    'xlIndexDescending', 'XlReadingOrder', 'msoLanguageIDUrdu',
    'msoReflectionType3', 'msoTextEffectShapeRingInside',
    'msoAnimationLookUpLeft', 'msoBevelSoftRound', 'ConnectorFormat',
    'msoAutoSizeTextToFitShape', 'msoAnchorBottomBaseLine',
    'msoReflectionType4', 'msoPattern30Percent',
    'msoOLEMenuGroupObject', 'msoShapeQuadArrowCallout',
    'msoSyncErrorFileInUse', 'msoShape10pointStar', 'xlFunnel',
    'msoShapeRound2SameRectangle', 'msoConditionIncludes',
    'msoCalloutDropCenter', 'msoElementDataLabelNone',
    'msoMsoTextRangeInsertBefore',
    'msoEncodingISO6937NonSpacingAccent', 'msoBevelRelaxedInset',
    'msoLanguageIDTigrignaEthiopic', 'msoUnderlineDashLongLine',
    'xlTickLabelPositionNextToAxis', 'msoBaselineAlignCenter',
    'xlTickLabelPositionHigh', 'BalloonLabel', 'msoPictureTypePDF',
    'msoWarpFormat27', 'msoButtonIcon', 'MsoLineDashStyle',
    'msoContactCardAddressTypeIM', 'msoLineLongDashDot',
    'MsoBroadcastCapabilities', 'xlSizeIsArea',
    'msoLanguageIDHawaiian', 'msoElementPrimaryValueAxisNone',
    'msoConditionEqualsHigh', 'msoBulletPicture',
    'msoControlComboBox', 'msoScreenSize640x480', 'ILicWizExternal',
    'msoCameraObliqueBottom', 'msoLanguageIDChineseHongKongSAR',
    'msoMetaPropertyTypeUserMulti', 'SignatureLineImage',
    'ScopeFolder', 'IMsoDisplayUnitLabel', 'msoShapeDownArrowCallout',
    'msoElementErrorBarStandardDeviation', 'msoShapeFlowchartProcess',
    'xlGeoMappingLevelAutomatic', 'msoPattern80Percent',
    'IConverterApplicationPreferences', 'msoIconAlertInfo',
    'msoBalloonButtonYes', 'xlTickLabelPositionNone',
    'msoEncodingOEMModernGreek', 'MsoButtonStyleHidden',
    'msoShapeFlowchartManualInput', 'STANDARD',
    'msoFileDialogViewLargeIcons', 'msoAnimationPrinting',
    'msoMetaPropertyTypeUnknown', 'msoShapeFunnel',
    'xlDataLabelsShowValue', 'msoHTMLProjectStateProjectLocked',
    'xlVerticalCoordinate', 'msoLanguageIDTamil', 'msoWarpFormat21',
    'msoShadow31', 'MsoMetaPropertyType', 'MsoPresetMaterial',
    'msoWarpFormat6', 'msoElementPrimaryValueAxisTitleNone',
    'msoTextEffectAlignmentWordJustify', 'msoGradientParchment',
    'xlDropLines', 'PickerResults', 'msoShapeFlowchartSort',
    'msoBulletAlphaUCParenBoth', 'msoOpenFile', 'msoLineStylePreset7',
    'msoPatternDiagonalCross', 'MsoBalloonButtonType',
    'msoFileDialogFilePicker', '_CommandBarButton',
    'msoElementPrimaryCategoryAxisTitleAdjacentToAxis',
    'xlColumnField', 'msoFileTypeWordDocuments',
    'msoEncodingEBCDICUSCanadaAndTraditionalChinese',
    'msoMaterialMatte', 'msoShapeFlowchartConnector', 'Trendlines',
    'HTMLProjectItems', 'SeriesCollection', 'SmartArt',
    'sigdetNumberOfMonitors', 'msoShapeChartStar', 'xlThick',
    'msoWarpFormat5', 'msoLanguageIDVenda',
    'msoElementDataLabelBestFit', 'msoTextEffectShapeInflateBottom',
    'msoElementSecondaryCategoryAxisTitleRotated',
    'msoSyncErrorUnknown', 'msoCharacterSetVietnamese',
    'msoEncodingKoreanJohab', 'LegendEntry', 'msoTextEffect18',
    'msoAnimationListensToComputer', 'msoBalloonErrorOther',
    'msoTextEffect21', 'msoEncodingISCIITamil',
    'msoEncodingEBCDICArabic', 'msoTextEffectShapeCirclePour',
    'xlAxisCrossesMinimum', 'MsoFileDialogType',
    'msoDownloadContentEnabled', 'msoElementChartWallNone',
    'msoMaterialMetal', 'msoDiagramVenn', 'msoElementLegendNone',
    'msoShapeCurvedRightArrow', 'msoElementDataLabelInsideEnd',
    'msoLineStylePreset1', 'msoTextEffect27', 'xlDiamond',
    'msoLanguageIDBosnianBosniaHerzegovinaLatin', 'xlShowValue',
    'msoPickerFieldUser', 'xlMidClockwiseRadiusPoint', 'ContactCard',
    'msoSoftEdgeType6', 'msoFileTypeNoteItem',
    'msoButtonSetYesAllNoCancel', 'msoCreateNewFile',
    'msoTriStateToggle', 'msoShadow11', 'sigdetVertResolution',
    'msoElementSecondaryCategoryAxisTitleBelowAxis',
    'msoCustomXMLNodeElement', 'msoLanguageIDEnglishCanadian',
    'xlNothing', 'Shapes', 'msoSmartArtNodeBelow',
    'msoLanguageIDEstonian', 'msoLanguageIDSindhi',
    'msoHorizontalAnchorMixed', 'msoLineSingle', 'msoSoftEdgeType3',
    'msoLineStylePreset28', 'SignatureSetup', 'ChartPoint',
    'msoFileValidationSkip', 'msoElementPrimaryValueGridLinesMinor',
    'msoButtonSetYesNoCancel', '_CommandBars', 'XlScaleType',
    'msoPathType4', 'msoTextEffect7',
    'xlMidCounterClockwiseRadiusPoint', 'xlLegendPositionBottom',
    'msoSmartArtNodeTypeAssistant', 'msoGraphicStylePreset1',
    'msoLanguageIDFrenchMali', 'xlPie', 'xlRegionLabelOptionsNone',
    'msoEncodingArabicASMO', 'msoCameraPerspectiveAboveRightFacing',
    'xlDownBars', 'xlLabelPositionCenter', 'msoPatternShingle',
    'msoSyncErrorCouldNotConnect', 'msoAlignJustifyLow',
    'msoWarpFormat16', 'msoThemeColorBackground2',
    'MsoDebugOptions_UTManager', 'msoEncodingEBCDICGermany',
    'msoOLEMenuGroupHelp', 'msoShapeStylePreset61', 'msoBarMenuBar',
    'msoReflectionType1', 'msoAutoSizeMixed',
    'msoWizardMsgLocalStateOn', 'msoEncodingISCIITelugu',
    'sigdetOfficeVersion', 'msoOptionsNew', 'msoLightingTopRight',
    'msoGraphicStylePreset14', 'msoButtonSetYesNo',
    'msoBalloonErrorOutOfMemory', 'msoThemeAccent2',
    'msoSharedWorkspaceTaskPriorityNormal',
    'msoShapeActionButtonCustom', 'msoLanguageIDMexicanSpanish',
    'msoShadow5', 'msoShapeStylePreset46', 'MsoCalloutDropType',
    'msoAlignDistribute', 'msoLanguageIDGaelicScotland',
    'msoTextEffectShapeCurveDown', 'msoWarpFormat2',
    'msoElementUpDownBarsNone', 'msoWarpFormat14', 'XlBorderWeight',
    'msoBulletStyleMixed', 'msoEncodingISO2022CNTraditionalChinese',
    'msoSortByFileType', 'MsoLineJoinStyle', 'msoWarpFormat36',
    'msoPropertyTypeDate', 'msoLanguageIDSamiLappish', 'xlStockVOHLC',
    'TextRange2', 'msoElementPrimaryCategoryGridLinesMinor',
    'msoFileDialogViewProperties', 'MsoFileNewSection',
    'msoConditionDoesNotEqual', 'msoMaterialMetal2', 'msoThreeD5',
    'msoTextEffect43', 'sigdetDelSuggSignerLine2',
    'msoShapeFlowchartStoredData', 'ISensitivityLabelEvents',
    'msoPatternLightDownwardDiagonal', 'msoTextureParchment',
    'ColorFormat', 'msoArrowheadStyleMixed', 'msoEncodingMacTurkish',
    'msoLanguageIDNorwegianNynorsk', 'msoShapeArc', 'msoInkComment',
    'TabStop2', 'msoConditionFileTypeDocumentImagingFiles',
    'msoLanguageIDBengali', 'msoShapeStylePreset77',
    'msoAnimationSendingMail', 'MsoCTPDockPositionRestrict',
    'msoShapeCube', 'MsoFileNewAction', 'msoShapeTear',
    'xlBarStacked100', 'msoThemeAccent3', 'xlDataTable',
    'msoButtonMixed', 'CustomXMLValidationError',
    'msoShapeUpArrowCallout', 'msoWizardActActive',
    'msoLineThinThick', 'encprovdetUrl', 'xlShowLabel',
    'MsoFileDialogView', 'msoShapeLeftRightCircularArrow',
    'msoPatternLightHorizontal', 'msoLanguageIDTamazight',
    'msoShape8pointStar', 'xlIndexAscending', 'msoExtrusionBottom',
    'CertificateVerificationResults', 'msoLanguageIDFrenchWestIndies',
    'Font2', 'msoLanguageIDRhaetoRomanic',
    'msoCameraPerspectiveHeroicRightFacing', 'msoGradientLateSunset',
    'msoCTPDockPositionLeft', 'msoLineLongDashDotDot',
    'msoClipboardFormatRTF', 'ThemeColor', 'sigtypeSignatureLine',
    'TextFrame2', 'msoDateTimeddddMMMMddyyyy', 'xl3DBar',
    'msoEffectCutout', 'msoSyncAvailableNone', 'xl3DAreaStacked',
    'msoCameraLegacyObliqueBottomLeft', 'msoEncodingEBCDICThai',
    'msoShapeStylePreset54', 'msoBulletAlphaLCParenRight',
    'msoGraphicStylePreset18', 'msoLineStylePreset39',
    'xlConeToPoint', 'xlValueAscending', 'msoCalloutDropTop',
    'xlPyramidBarStacked100', 'xl3DColumnStacked', 'CustomXMLParts',
    'msoWizardActSuspend', 'MsoTextCaps', 'xlGray75',
    'msoFileDialogViewList', 'msoShapeDoubleBrace', 'msoCalloutFour',
    'msoArrowheadLong', 'msoBulletArabicParenRight',
    'xlGeoMappingLevelCountryRegionList', 'msoThemeDark1',
    'msoUserContentEnabled', 'msoShapeCurvedUpArrow',
    'msoDiagramOrgChart', 'msoTabStopRight', 'msoShapePlaqueTabs',
    'msoShapeStylePreset29', 'msoAllCaps',
    'msoCustomXMLNodeProcessingInstruction', 'msoBulletSimpChinPlain',
    'xlConeBarStacked', 'msoLightRigChilly', 'msoLanguageIDSlovak',
    'msoCalloutDropMixed', 'msoFillTextured', 'SearchScopes',
    'msoCanvas', 'msoLineSysDot', 'msoCameraLegacyPerspectiveLeft',
    'XlChartItem', 'msoShapeFlowchartOr',
    'MsoFarEastLineBreakLanguageKorean', 'MsoTextEffectAlignment',
    'msoElementLegendLeft', 'msoGraphicStylePreset17',
    'CommandBarPopup', 'msoConditionFileTypeJournalItem',
    'DiagramNode', 'msoMaterialFlat',
    'msoCameraPerspectiveAboveLeftFacing', 'msoGraphicStylePreset5',
    'msoSendBehindText', 'MsoParagraphAlignment', 'msoAnchorTop',
    'msoEncodingISCIIOriya', 'msoPictureWatermark',
    'msoGradientCalmWater', 'msoOptionsWithin',
    'msoGraphicStylePreset24', 'msoWarpFormat25',
    'MsoTextOrientation', 'msoMetaPropertyTypeComputed',
    'msoEncodingEBCDICIcelandic', 'msoFilterComparisonNotContains',
    'msoConditionEqualsNotStarted', 'msoLanguageIDLao',
    'xlCylinderBarStacked', 'xlHairline',
    'msoEncodingEBCDICMultilingualROECELatin2',
    'xlAxisCrossesMaximum', 'xlMonths', 'msoDateTimedMMMMyyyy',
    'msoSyncEventDownloadNoChange', 'msoEncodingTaiwanTeleText',
    'msoShapeStylePreset42', 'xlCustom', 'msoLightingBottom',
    'msoSearchInOutlook', 'msoLineStylePreset42',
    'msoAlertButtonRetryCancel', 'msoEncodingTaiwanIBM5550',
    'msoControlLabelEx', 'msoElementPrimaryValueAxisMillions',
    'msoTextEffect3', 'xlCategoryLabelLevelNone',
    'msoOrientationHorizontal', 'xlColumnStacked', 'msoDiagramTarget',
    'msoLanguageIDArabicIraq', 'msoLanguageIDSpanishPanama',
    'msoBevelHardEdge', 'msoBulletTradChinPlain',
    'msoAnimationGetArtsy', 'msoLanguageIDArabicLibya',
    'msoLightRigFreezing',
    'msoEncodingEUCTaiwaneseTraditionalChinese',
    'msoLineStylePreset23', 'msoScaleFromMiddle',
    'xlGeoProjectionTypeAutomatic', 'MsoFileFindListBy',
    'msoShapeStylePreset15', 'msoLanguageIDSpanish', 'mfRTF',
    'IMsoCategory', 'xlGeoMappingLevelDataOnly',
    'msoBulletThaiNumPeriod', 'msoFileTypeDocumentImagingFiles',
    'msoGradientChromeII', 'msoLanguageIDUkrainian',
    'msoLightRigLegacyNormal4', 'msoBevelCircle', 'MsoIodGroup',
    'msoShapeLineCallout1NoBorder', 'ChartFillFormat',
    'msoCalloutAngle30', 'msoTextOrientationDownward', 'msoShadow37',
    'msoDateTimeMMMMdyyyy', 'msoPattern50Percent', 'Adjustments',
    'msoDiagramNode', 'msoFileTypeContactItem',
    'msoLanguageIDSpanishNicaragua', 'msoShapeMathDivide',
    'msoLanguageIDBosnian', 'msoBulletNumbered',
    'msoLineStylePreset40', 'msoScreenSize544x376',
    'msoCharacterSetEnglishWesternEuropeanOtherLatinScript',
    'msoDateTimeFormatMixed', 'certdetThumbprint',
    'BackstageGroupStyle', 'msoPatternSmallGrid',
    'msoEncodingMacTraditionalChineseBig5', 'msoShadow3',
    'msoCameraPerspectiveHeroicExtremeRightFacing', 'msoShadow19',
    'msoGraphicStylePreset26', 'msoLanguageIDNepali',
    'msoShapeLineCallout4AccentBar', 'xlGeoProjectionTypeMiller',
    'xlCenterPoint', 'msoLanguageIDEnglishAUS', 'GradientStops',
    'xlXYScatterSmoothNoMarkers', 'msoAlertDefaultFourth',
    'msoWarpFormat19', 'msoAnimationDisappear',
    'msoLanguageIDFilipino', 'xlTickMarkNone',
    'msoBlackWhiteGrayScale', 'msoFileTypePhotoDrawFiles',
    'contverresUnverified', 'xlRegionLabelOptionsBestFitOnly',
    'msoEncodingEBCDICUSCanadaAndJapanese', 'sigdetApplicationName',
    'msoShapeSnip2SameRectangle', 'msoFilterComparisonIsBlank',
    'msoCalloutAngle90', 'msoShapeLeftArrow', 'msoPickerFieldUnknown',
    'msoConditionFileTypeDesignerFiles', 'msoConditionOnOrAfter',
    'IMsoAxisTitle', 'xlRadar', 'msoButtonSetCancel', 'xlLightUp',
    'cipherModeECB', 'MsoContactCardStyle', 'msoThreeD3',
    'msoSyncAvailableOffline', 'msoblogImageTypePNG',
    'msoControlButtonPopup', 'msoPickerFieldDateTime',
    'msoElementPrimaryCategoryAxisReverse', 'MsoSoftEdgeType',
    'msoTextureTopRight', 'msoBulletArabicAlphaDash',
    'msoLanguageIDEnglishUK', 'msoContactCardTypeEnterpriseGroup',
    'msoLineStylePreset12', 'msoFillPicture',
    'msoShapeSnip2DiagRectangle', 'MsoPresetGradientType',
    'msoLastModifiedToday', 'msoLastModifiedYesterday',
    'DocumentInspector', 'xlHAlignCenter',
    'msoShapeFlowchartInternalStorage', 'msoTextureBottomLeft',
    'msoEncodingArabicTransparentASMO', 'RibbonControlSizeRegular',
    'msoSyncErrorUnauthorizedUser', 'msoLanguageIDVietnamese',
    'msoShapeLeftRightUpArrow', 'msoEffectPaintBrush',
    'msoMenuAnimationUnfold', 'msoEncodingOEMTurkish',
    'xlCategoryAscending', 'msoDiagramPyramid',
    'msoTelemetryConsentLevelUnset', 'IMsoDataTable',
    'msoShapeLeftRightArrow', 'MsoPresetTexture', 'msoSortByFileName',
    'msoCharacterSetArabic', 'msoElementPrimaryCategoryAxisNone',
    'msoEncodingTaiwanTCA', 'msoEncodingEBCDICGreek',
    'msoElementDataLabelInsideBase',
    'msoShapeActionButtonInformation', 'IRibbonControl',
    'msoButtonSetOK', 'MsoZOrderCmd',
    'msoElementPrimaryCategoryAxisTitleVertical', 'xl3DArea',
    'msoGraphicStylePreset2', 'msoWarpFormat20',
    'msoElementDataLabelLeft', 'msoEncodingTraditionalChineseBig5',
    'MsoMoveRow', 'msoGradientFromCenter', 'msoShapeStylePreset6',
    'msoPresetExtrusionDirectionMixed', 'msoSortByNone',
    'msoTextEffectShapeDoubleWave1', 'AnswerWizard', 'msoShadow41',
    'msoConnectorAnd', 'xlGeoMappingLevelCounty',
    'msoTextOrientationVertical', 'msoBalloonErrorBadReference',
    'msoPermissionObjModel', 'MsoTextFontAlign',
    'xlUnderlineStyleNone', 'msoConditionAtMost', 'msoBarNoCustomize',
    'msoShadow21', 'msoCalloutDropBottom', 'msoAnimationAppear',
    'msoOrientationVertical', 'msoFileDialogViewThumbnail',
    'msoButtonSetRetryCancel', 'xlLineMarkersStacked100',
    'msoLanguageIDSpanishModernSort', 'msoTextEffect41',
    'msoSingleMixed', 'msoShapePie', 'msoTargetBrowserIE6',
    'xlExponential', 'MsoTextDirection', 'msoLanguageIDOriya',
    'msoButtonWrapCaption', 'msoControlWorkPane', 'xlTop',
    'SharedWorkspaceFolder', 'msoLanguageIDFinnish',
    'msoBackgroundStylePreset7', 'msoConditionNotEqualToInProgress',
    'msoClipboardFormatNative', 'msoShapeStylePreset59',
    'msoShadow20', 'IMsoAxis', 'xlMarkerStyleSquare', 'XlTimeUnit',
    'msoShapeStripedRightArrow', 'msoBalloonErrorNone',
    'msoEncodingISO2022KR', 'xl3DSurface',
    'msoLanguageIDTraditionalChinese', 'msoLanguageIDIcelandic',
    'msoTextEffect34', 'FullSeriesCollection', 'msoAnimationIdle',
    'msoEncodingISO2022CNSimplifiedChinese',
    'msoLanguageIDFrenchCameroon', 'msoEncodingGreekAutoDetect',
    'msoAnimationWritingNotingSomething', 'msoThemeAccent4',
    'contverresModified', 'msoFileFindSortbyLastSavedBy',
    'msoConditionFileTypeDatabases', 'xlColumnStackedEx',
    'msoShapeMathEqual', 'MsoDiagramNodeType',
    'msoCameraLegacyPerspectiveBottomRight', 'msoShapeNoSymbol',
    'msoShapeUpArrow', 'msoShapeStylePreset12',
    'XlSeriesColorGradientStyle', 'msoAnimationGetAttentionMinor',
    'msoElementPrimaryValueAxisTitleHorizontal',
    'msoLineStylePreset31', 'msoConditionFileTypeProjectFiles',
    'msoLanguageIDSwissItalian', 'msoShapeHorizontalScroll',
    'msoLanguageIDEnglishZimbabwe', 'xlTimeScale',
    'xlGeoProjectionTypeMercator', 'msoShapeFlowchartMultidocument',
    'msoShapeStylePreset45', 'msoLineStylePreset6', 'msoWarpFormat13',
    'offPropertyTypeBoolean', 'msoShapePlaque',
    'msoLanguageIDFrenchCotedIvoire', 'msoLineStylePreset26',
    'msoTabStopDecimal', 'MsoSharedWorkspaceTaskStatus',
    'msoConnectorTypeMixed', 'msoMaterialMatte2',
    'IRibbonExtensibility', 'msoIconAlert', 'msoGradientGold',
    'msoCaseUpper', 'msoShapeExplosion2',
    'msoCameraIsometricOffAxis1Top', 'msoComboNormal',
    'msoElementErrorBarStandardError', 'msoblogImageTypeGIF',
    'msoControlGrid', 'msoLanguageIDInuktitut', 'msoPatternDivot',
    'msoLanguageIDFrenchHaiti', 'XlDataLabelsType',
    'msoConnectorStraight', 'msoMethodGet', 'msoMoveRowNext',
    'IMsoChart', 'xlChartX', 'MsoBarRow', 'Axes', 'IMsoDropLines',
    'msoShadow38', 'ScopeFolders', 'MsoSegmentType', 'IMsoDataLabel',
    'xlChecker', 'MsoClipboardFormat', 'msoTextEffect15',
    'xlTickLabelOrientationUpward', 'msoTextEffectShapeFadeRight',
    'msoBarNoProtection', 'msoThemeColorAccent5', 'WorkflowTasks',
    'xlPyramidToPoint', 'msoBlackWhiteDontShow',
    'msoEncodingOEMHebrew', 'xlMovingAvg', 'ShapeNodes',
    'msoEncodingMacJapanese', 'msoTextEffect19', 'SearchScope',
    'msoElementPrimaryValueGridLinesMinorMajor', 'msoShapeTrapezoid',
    'msoShapeStylePreset17', 'msoTextEffect48',
    'msoShapeStylePreset44', 'msoShapeCornerTabs', 'msoTextEffect30',
    'msoCameraIsometricOffAxis4Bottom', 'msoMoveRowNbr',
    'msoEncodingAutoDetect', 'MsoWizardMsgType',
    'msoPattern20Percent', 'msoEncodingISCIIGujarati',
    'ICustomTaskPaneConsumer', 'xlTickLabelOrientationHorizontal',
    'xlErrorBarIncludeMinusValues', 'MsoShapeType', 'msoTextEffect1',
    'msoElementPrimaryValueGridLinesMajor', 'msoBulletArabicPlain',
    'msoTextEffectShapeTriangleDown', 'xlSurface', 'msoShadow15',
    'msoElementSeriesAxisShow', 'msoOpenDocument', 'xlGrid',
    'msoLineStyleMixed', 'xlPieEx', 'xlChartElementPositionAutomatic',
    'msoEncodingUnicodeLittleEndian', 'msoEncodingJapaneseAutoDetect',
    'msoClipboardFormatPlainText', 'xlDataLabelsShowLabel',
    'msoPictureTypeJPG', 'msoModeModal', 'msoEncodingOEMGreek437G',
    'msoElementSecondaryValueAxisTitleBelowAxis', 'msoBulletMixed',
    'msoOLEMenuGroupContainer', 'MsoRGBType',
    'msoFileDialogViewWebView',
    'msoBalloonErrorCharNotTopmostForModal', 'msoUserNotSignedIn',
    'msoLanguageIDSlovenian', 'msoUnderlineDotDashHeavyLine',
    'msoShape4pointStar', 'msoConditionNotEqualToDeferred',
    'msoLanguageIDSpanishPeru', 'xlHAlignGeneral',
    'msoGradientHorizon', 'xlRight', 'msoEffectFilmGrain',
    'msoFileFindSortbyDateSaved', 'msoPatternDarkHorizontal',
    'XlDisplayBlanksAs', 'msoSmartArt', 'msoShapeStylePreset3',
    'xlBinsTypeBinSize', 'IMsoChartFormat',
    'msoShapeUpDownArrowCallout', 'msoConditionFileTypeBinders',
    'FillFormat', 'msoShapeStylePreset13',
    'xlGeoMappingLevelPostalCode', 'xlLogarithmic', 'msoNoCharWrap',
    'msoEncodingTaiwanCNS', 'xl3DBarStacked100', 'msoShadow43',
    'msoBulletCircleNumWDBlackPlain',
    'msoLanguageIDGermanLiechtenstein', 'msoLanguageIDAzeriCyrillic',
    'XlEndStyleCap', 'xlStackScale', 'xlArea', 'msoControlGauge',
    'msoAnimationLookDown', 'msoHTMLProjectOpenTextView',
    'msoTextureRight', 'msoElementSecondaryCategoryAxisMillions',
    'msoSoftEdgeType5', 'XlVAlign', 'msoTextEffectShapeCanDown',
    'msoTextEffectShapeCascadeUp', 'msoThemeComplexScript',
    'msoPresetThreeDFormatMixed'
]

_check_version('1.4.7', 1728797524.012948)

